//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/LumaSharp.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LumaSharpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, IMPORT=44, NAMESPACE=45, 
		TYPE=46, CONTRACT=47, ENUM=48, GLOBAL=49, EXPORT=50, INTERNAL=51, SPECIALHIDDEN=52, 
		AS=53, CONTINUE=54, BREAK=55, RETURN=56, IF=57, ELSE=58, ELSEIF=59, TRUE=60, 
		FALSE=61, IN=62, FOR=63, WHILE=64, SELECT=65, MATCH=66, DEFAULT=67, TRY=68, 
		CATCH=69, FINALLY=70, SIZE=71, READ=72, WRITE=73, THIS=74, BASE=75, NEW=76, 
		STACKNEW=77, ANY=78, BOOL=79, CHAR=80, I8=81, U8=82, I16=83, U16=84, I32=85, 
		U32=86, I64=87, U64=88, FLOAT=89, DOUBLE=90, STRING=91, NULL=92, IDENTIFIER=93, 
		INT=94, DECIMAL=95, HEX=96, LITERAL=97, WS=98, COMMENT=99;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "IMPORT", "NAMESPACE", "TYPE", "CONTRACT", "ENUM", "GLOBAL", 
		"EXPORT", "INTERNAL", "SPECIALHIDDEN", "AS", "CONTINUE", "BREAK", "RETURN", 
		"IF", "ELSE", "ELSEIF", "TRUE", "FALSE", "IN", "FOR", "WHILE", "SELECT", 
		"MATCH", "DEFAULT", "TRY", "CATCH", "FINALLY", "SIZE", "READ", "WRITE", 
		"THIS", "BASE", "NEW", "STACKNEW", "ANY", "BOOL", "CHAR", "I8", "U8", 
		"I16", "U16", "I32", "U32", "I64", "U64", "FLOAT", "DOUBLE", "STRING", 
		"NULL", "IDENTIFIER", "INT", "DECIMAL", "HEX", "LITERAL", "WS", "COMMENT"
	};


	public LumaSharpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LumaSharpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "':'", "'{'", "','", "'}'", "'#'", "'('", "')'", "'='", 
		"'=>'", "'...'", "'<'", "'>'", "'['", "']'", "'&'", "'++'", "'--'", "'+='", 
		"'-='", "'/='", "'*='", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'>='", 
		"'<='", "'=='", "'!='", "'&&'", "'||'", "'?'", "'U'", "'L'", "'UL'", "'F'", 
		"'D'", "'..='", "'..<'", "'import'", "'namespace'", "'type'", "'contract'", 
		"'enum'", "'global'", "'export'", "'internal'", "'hidden'", "'as'", "'continue'", 
		"'break'", "'return'", "'if'", "'else'", "'elseif'", "'true'", "'false'", 
		"'in'", "'for'", "'while'", "'select'", "'match'", "'default'", "'try'", 
		"'catch'", "'finally'", "'size'", "'read'", "'write'", "'this'", "'base'", 
		"'new'", "'stacknew'", "'any'", "'bool'", "'char'", "'i8'", "'u8'", "'i16'", 
		"'u16'", "'i32'", "'u32'", "'i64'", "'u64'", "'float'", "'double'", "'string'", 
		"'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "IMPORT", "NAMESPACE", 
		"TYPE", "CONTRACT", "ENUM", "GLOBAL", "EXPORT", "INTERNAL", "SPECIALHIDDEN", 
		"AS", "CONTINUE", "BREAK", "RETURN", "IF", "ELSE", "ELSEIF", "TRUE", "FALSE", 
		"IN", "FOR", "WHILE", "SELECT", "MATCH", "DEFAULT", "TRY", "CATCH", "FINALLY", 
		"SIZE", "READ", "WRITE", "THIS", "BASE", "NEW", "STACKNEW", "ANY", "BOOL", 
		"CHAR", "I8", "U8", "I16", "U16", "I32", "U32", "I64", "U64", "FLOAT", 
		"DOUBLE", "STRING", "NULL", "IDENTIFIER", "INT", "DECIMAL", "HEX", "LITERAL", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LumaSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LumaSharpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,99,643,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
		7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
		7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
		7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
		7,98,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,
		14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,
		19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,
		25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,
		31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,
		36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,
		41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,
		46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,
		48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,
		51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,
		54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,
		56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,
		59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,
		62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,
		66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,
		69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,
		71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,
		74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,
		76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,
		79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,1,
		83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,
		86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,
		89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,
		91,1,91,1,92,1,92,5,92,585,8,92,10,92,12,92,588,9,92,1,93,4,93,591,8,93,
		11,93,12,93,592,1,94,4,94,596,8,94,11,94,12,94,597,1,94,1,94,4,94,602,
		8,94,11,94,12,94,603,1,95,1,95,1,95,1,95,4,95,610,8,95,11,95,12,95,611,
		1,96,1,96,5,96,616,8,96,10,96,12,96,619,9,96,1,96,1,96,1,97,4,97,624,8,
		97,11,97,12,97,625,1,97,1,97,1,98,1,98,1,98,1,98,5,98,634,8,98,10,98,12,
		98,637,9,98,1,98,1,98,1,98,1,98,1,98,2,617,635,0,99,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
		83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
		53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
		63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
		73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,
		83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,92,185,
		93,187,94,189,95,191,96,193,97,195,98,197,99,1,0,5,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,48,57,65,70,97,102,3,0,
		9,10,13,13,32,32,650,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
		0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
		0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
		0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
		0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
		0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,
		0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,
		0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,
		0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,
		0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,
		0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,
		0,197,1,0,0,0,1,199,1,0,0,0,3,201,1,0,0,0,5,203,1,0,0,0,7,205,1,0,0,0,
		9,207,1,0,0,0,11,209,1,0,0,0,13,211,1,0,0,0,15,213,1,0,0,0,17,215,1,0,
		0,0,19,217,1,0,0,0,21,219,1,0,0,0,23,222,1,0,0,0,25,226,1,0,0,0,27,228,
		1,0,0,0,29,230,1,0,0,0,31,232,1,0,0,0,33,234,1,0,0,0,35,236,1,0,0,0,37,
		239,1,0,0,0,39,242,1,0,0,0,41,245,1,0,0,0,43,248,1,0,0,0,45,251,1,0,0,
		0,47,254,1,0,0,0,49,256,1,0,0,0,51,258,1,0,0,0,53,260,1,0,0,0,55,262,1,
		0,0,0,57,264,1,0,0,0,59,266,1,0,0,0,61,269,1,0,0,0,63,272,1,0,0,0,65,275,
		1,0,0,0,67,278,1,0,0,0,69,281,1,0,0,0,71,284,1,0,0,0,73,286,1,0,0,0,75,
		288,1,0,0,0,77,290,1,0,0,0,79,293,1,0,0,0,81,295,1,0,0,0,83,297,1,0,0,
		0,85,301,1,0,0,0,87,305,1,0,0,0,89,312,1,0,0,0,91,322,1,0,0,0,93,327,1,
		0,0,0,95,336,1,0,0,0,97,341,1,0,0,0,99,348,1,0,0,0,101,355,1,0,0,0,103,
		364,1,0,0,0,105,371,1,0,0,0,107,374,1,0,0,0,109,383,1,0,0,0,111,389,1,
		0,0,0,113,396,1,0,0,0,115,399,1,0,0,0,117,404,1,0,0,0,119,411,1,0,0,0,
		121,416,1,0,0,0,123,422,1,0,0,0,125,425,1,0,0,0,127,429,1,0,0,0,129,435,
		1,0,0,0,131,442,1,0,0,0,133,448,1,0,0,0,135,456,1,0,0,0,137,460,1,0,0,
		0,139,466,1,0,0,0,141,474,1,0,0,0,143,479,1,0,0,0,145,484,1,0,0,0,147,
		490,1,0,0,0,149,495,1,0,0,0,151,500,1,0,0,0,153,504,1,0,0,0,155,513,1,
		0,0,0,157,517,1,0,0,0,159,522,1,0,0,0,161,527,1,0,0,0,163,530,1,0,0,0,
		165,533,1,0,0,0,167,537,1,0,0,0,169,541,1,0,0,0,171,545,1,0,0,0,173,549,
		1,0,0,0,175,553,1,0,0,0,177,557,1,0,0,0,179,563,1,0,0,0,181,570,1,0,0,
		0,183,577,1,0,0,0,185,582,1,0,0,0,187,590,1,0,0,0,189,595,1,0,0,0,191,
		605,1,0,0,0,193,613,1,0,0,0,195,623,1,0,0,0,197,629,1,0,0,0,199,200,5,
		59,0,0,200,2,1,0,0,0,201,202,5,46,0,0,202,4,1,0,0,0,203,204,5,58,0,0,204,
		6,1,0,0,0,205,206,5,123,0,0,206,8,1,0,0,0,207,208,5,44,0,0,208,10,1,0,
		0,0,209,210,5,125,0,0,210,12,1,0,0,0,211,212,5,35,0,0,212,14,1,0,0,0,213,
		214,5,40,0,0,214,16,1,0,0,0,215,216,5,41,0,0,216,18,1,0,0,0,217,218,5,
		61,0,0,218,20,1,0,0,0,219,220,5,61,0,0,220,221,5,62,0,0,221,22,1,0,0,0,
		222,223,5,46,0,0,223,224,5,46,0,0,224,225,5,46,0,0,225,24,1,0,0,0,226,
		227,5,60,0,0,227,26,1,0,0,0,228,229,5,62,0,0,229,28,1,0,0,0,230,231,5,
		91,0,0,231,30,1,0,0,0,232,233,5,93,0,0,233,32,1,0,0,0,234,235,5,38,0,0,
		235,34,1,0,0,0,236,237,5,43,0,0,237,238,5,43,0,0,238,36,1,0,0,0,239,240,
		5,45,0,0,240,241,5,45,0,0,241,38,1,0,0,0,242,243,5,43,0,0,243,244,5,61,
		0,0,244,40,1,0,0,0,245,246,5,45,0,0,246,247,5,61,0,0,247,42,1,0,0,0,248,
		249,5,47,0,0,249,250,5,61,0,0,250,44,1,0,0,0,251,252,5,42,0,0,252,253,
		5,61,0,0,253,46,1,0,0,0,254,255,5,45,0,0,255,48,1,0,0,0,256,257,5,33,0,
		0,257,50,1,0,0,0,258,259,5,42,0,0,259,52,1,0,0,0,260,261,5,47,0,0,261,
		54,1,0,0,0,262,263,5,37,0,0,263,56,1,0,0,0,264,265,5,43,0,0,265,58,1,0,
		0,0,266,267,5,62,0,0,267,268,5,61,0,0,268,60,1,0,0,0,269,270,5,60,0,0,
		270,271,5,61,0,0,271,62,1,0,0,0,272,273,5,61,0,0,273,274,5,61,0,0,274,
		64,1,0,0,0,275,276,5,33,0,0,276,277,5,61,0,0,277,66,1,0,0,0,278,279,5,
		38,0,0,279,280,5,38,0,0,280,68,1,0,0,0,281,282,5,124,0,0,282,283,5,124,
		0,0,283,70,1,0,0,0,284,285,5,63,0,0,285,72,1,0,0,0,286,287,5,85,0,0,287,
		74,1,0,0,0,288,289,5,76,0,0,289,76,1,0,0,0,290,291,5,85,0,0,291,292,5,
		76,0,0,292,78,1,0,0,0,293,294,5,70,0,0,294,80,1,0,0,0,295,296,5,68,0,0,
		296,82,1,0,0,0,297,298,5,46,0,0,298,299,5,46,0,0,299,300,5,61,0,0,300,
		84,1,0,0,0,301,302,5,46,0,0,302,303,5,46,0,0,303,304,5,60,0,0,304,86,1,
		0,0,0,305,306,5,105,0,0,306,307,5,109,0,0,307,308,5,112,0,0,308,309,5,
		111,0,0,309,310,5,114,0,0,310,311,5,116,0,0,311,88,1,0,0,0,312,313,5,110,
		0,0,313,314,5,97,0,0,314,315,5,109,0,0,315,316,5,101,0,0,316,317,5,115,
		0,0,317,318,5,112,0,0,318,319,5,97,0,0,319,320,5,99,0,0,320,321,5,101,
		0,0,321,90,1,0,0,0,322,323,5,116,0,0,323,324,5,121,0,0,324,325,5,112,0,
		0,325,326,5,101,0,0,326,92,1,0,0,0,327,328,5,99,0,0,328,329,5,111,0,0,
		329,330,5,110,0,0,330,331,5,116,0,0,331,332,5,114,0,0,332,333,5,97,0,0,
		333,334,5,99,0,0,334,335,5,116,0,0,335,94,1,0,0,0,336,337,5,101,0,0,337,
		338,5,110,0,0,338,339,5,117,0,0,339,340,5,109,0,0,340,96,1,0,0,0,341,342,
		5,103,0,0,342,343,5,108,0,0,343,344,5,111,0,0,344,345,5,98,0,0,345,346,
		5,97,0,0,346,347,5,108,0,0,347,98,1,0,0,0,348,349,5,101,0,0,349,350,5,
		120,0,0,350,351,5,112,0,0,351,352,5,111,0,0,352,353,5,114,0,0,353,354,
		5,116,0,0,354,100,1,0,0,0,355,356,5,105,0,0,356,357,5,110,0,0,357,358,
		5,116,0,0,358,359,5,101,0,0,359,360,5,114,0,0,360,361,5,110,0,0,361,362,
		5,97,0,0,362,363,5,108,0,0,363,102,1,0,0,0,364,365,5,104,0,0,365,366,5,
		105,0,0,366,367,5,100,0,0,367,368,5,100,0,0,368,369,5,101,0,0,369,370,
		5,110,0,0,370,104,1,0,0,0,371,372,5,97,0,0,372,373,5,115,0,0,373,106,1,
		0,0,0,374,375,5,99,0,0,375,376,5,111,0,0,376,377,5,110,0,0,377,378,5,116,
		0,0,378,379,5,105,0,0,379,380,5,110,0,0,380,381,5,117,0,0,381,382,5,101,
		0,0,382,108,1,0,0,0,383,384,5,98,0,0,384,385,5,114,0,0,385,386,5,101,0,
		0,386,387,5,97,0,0,387,388,5,107,0,0,388,110,1,0,0,0,389,390,5,114,0,0,
		390,391,5,101,0,0,391,392,5,116,0,0,392,393,5,117,0,0,393,394,5,114,0,
		0,394,395,5,110,0,0,395,112,1,0,0,0,396,397,5,105,0,0,397,398,5,102,0,
		0,398,114,1,0,0,0,399,400,5,101,0,0,400,401,5,108,0,0,401,402,5,115,0,
		0,402,403,5,101,0,0,403,116,1,0,0,0,404,405,5,101,0,0,405,406,5,108,0,
		0,406,407,5,115,0,0,407,408,5,101,0,0,408,409,5,105,0,0,409,410,5,102,
		0,0,410,118,1,0,0,0,411,412,5,116,0,0,412,413,5,114,0,0,413,414,5,117,
		0,0,414,415,5,101,0,0,415,120,1,0,0,0,416,417,5,102,0,0,417,418,5,97,0,
		0,418,419,5,108,0,0,419,420,5,115,0,0,420,421,5,101,0,0,421,122,1,0,0,
		0,422,423,5,105,0,0,423,424,5,110,0,0,424,124,1,0,0,0,425,426,5,102,0,
		0,426,427,5,111,0,0,427,428,5,114,0,0,428,126,1,0,0,0,429,430,5,119,0,
		0,430,431,5,104,0,0,431,432,5,105,0,0,432,433,5,108,0,0,433,434,5,101,
		0,0,434,128,1,0,0,0,435,436,5,115,0,0,436,437,5,101,0,0,437,438,5,108,
		0,0,438,439,5,101,0,0,439,440,5,99,0,0,440,441,5,116,0,0,441,130,1,0,0,
		0,442,443,5,109,0,0,443,444,5,97,0,0,444,445,5,116,0,0,445,446,5,99,0,
		0,446,447,5,104,0,0,447,132,1,0,0,0,448,449,5,100,0,0,449,450,5,101,0,
		0,450,451,5,102,0,0,451,452,5,97,0,0,452,453,5,117,0,0,453,454,5,108,0,
		0,454,455,5,116,0,0,455,134,1,0,0,0,456,457,5,116,0,0,457,458,5,114,0,
		0,458,459,5,121,0,0,459,136,1,0,0,0,460,461,5,99,0,0,461,462,5,97,0,0,
		462,463,5,116,0,0,463,464,5,99,0,0,464,465,5,104,0,0,465,138,1,0,0,0,466,
		467,5,102,0,0,467,468,5,105,0,0,468,469,5,110,0,0,469,470,5,97,0,0,470,
		471,5,108,0,0,471,472,5,108,0,0,472,473,5,121,0,0,473,140,1,0,0,0,474,
		475,5,115,0,0,475,476,5,105,0,0,476,477,5,122,0,0,477,478,5,101,0,0,478,
		142,1,0,0,0,479,480,5,114,0,0,480,481,5,101,0,0,481,482,5,97,0,0,482,483,
		5,100,0,0,483,144,1,0,0,0,484,485,5,119,0,0,485,486,5,114,0,0,486,487,
		5,105,0,0,487,488,5,116,0,0,488,489,5,101,0,0,489,146,1,0,0,0,490,491,
		5,116,0,0,491,492,5,104,0,0,492,493,5,105,0,0,493,494,5,115,0,0,494,148,
		1,0,0,0,495,496,5,98,0,0,496,497,5,97,0,0,497,498,5,115,0,0,498,499,5,
		101,0,0,499,150,1,0,0,0,500,501,5,110,0,0,501,502,5,101,0,0,502,503,5,
		119,0,0,503,152,1,0,0,0,504,505,5,115,0,0,505,506,5,116,0,0,506,507,5,
		97,0,0,507,508,5,99,0,0,508,509,5,107,0,0,509,510,5,110,0,0,510,511,5,
		101,0,0,511,512,5,119,0,0,512,154,1,0,0,0,513,514,5,97,0,0,514,515,5,110,
		0,0,515,516,5,121,0,0,516,156,1,0,0,0,517,518,5,98,0,0,518,519,5,111,0,
		0,519,520,5,111,0,0,520,521,5,108,0,0,521,158,1,0,0,0,522,523,5,99,0,0,
		523,524,5,104,0,0,524,525,5,97,0,0,525,526,5,114,0,0,526,160,1,0,0,0,527,
		528,5,105,0,0,528,529,5,56,0,0,529,162,1,0,0,0,530,531,5,117,0,0,531,532,
		5,56,0,0,532,164,1,0,0,0,533,534,5,105,0,0,534,535,5,49,0,0,535,536,5,
		54,0,0,536,166,1,0,0,0,537,538,5,117,0,0,538,539,5,49,0,0,539,540,5,54,
		0,0,540,168,1,0,0,0,541,542,5,105,0,0,542,543,5,51,0,0,543,544,5,50,0,
		0,544,170,1,0,0,0,545,546,5,117,0,0,546,547,5,51,0,0,547,548,5,50,0,0,
		548,172,1,0,0,0,549,550,5,105,0,0,550,551,5,54,0,0,551,552,5,52,0,0,552,
		174,1,0,0,0,553,554,5,117,0,0,554,555,5,54,0,0,555,556,5,52,0,0,556,176,
		1,0,0,0,557,558,5,102,0,0,558,559,5,108,0,0,559,560,5,111,0,0,560,561,
		5,97,0,0,561,562,5,116,0,0,562,178,1,0,0,0,563,564,5,100,0,0,564,565,5,
		111,0,0,565,566,5,117,0,0,566,567,5,98,0,0,567,568,5,108,0,0,568,569,5,
		101,0,0,569,180,1,0,0,0,570,571,5,115,0,0,571,572,5,116,0,0,572,573,5,
		114,0,0,573,574,5,105,0,0,574,575,5,110,0,0,575,576,5,103,0,0,576,182,
		1,0,0,0,577,578,5,110,0,0,578,579,5,117,0,0,579,580,5,108,0,0,580,581,
		5,108,0,0,581,184,1,0,0,0,582,586,7,0,0,0,583,585,7,1,0,0,584,583,1,0,
		0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,186,1,0,0,0,588,
		586,1,0,0,0,589,591,7,2,0,0,590,589,1,0,0,0,591,592,1,0,0,0,592,590,1,
		0,0,0,592,593,1,0,0,0,593,188,1,0,0,0,594,596,7,2,0,0,595,594,1,0,0,0,
		596,597,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,601,
		5,46,0,0,600,602,7,2,0,0,601,600,1,0,0,0,602,603,1,0,0,0,603,601,1,0,0,
		0,603,604,1,0,0,0,604,190,1,0,0,0,605,606,5,48,0,0,606,607,5,120,0,0,607,
		609,1,0,0,0,608,610,7,3,0,0,609,608,1,0,0,0,610,611,1,0,0,0,611,609,1,
		0,0,0,611,612,1,0,0,0,612,192,1,0,0,0,613,617,5,34,0,0,614,616,9,0,0,0,
		615,614,1,0,0,0,616,619,1,0,0,0,617,618,1,0,0,0,617,615,1,0,0,0,618,620,
		1,0,0,0,619,617,1,0,0,0,620,621,5,34,0,0,621,194,1,0,0,0,622,624,7,4,0,
		0,623,622,1,0,0,0,624,625,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,
		627,1,0,0,0,627,628,6,97,0,0,628,196,1,0,0,0,629,630,5,47,0,0,630,631,
		5,42,0,0,631,635,1,0,0,0,632,634,9,0,0,0,633,632,1,0,0,0,634,637,1,0,0,
		0,635,636,1,0,0,0,635,633,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,
		639,5,42,0,0,639,640,5,47,0,0,640,641,1,0,0,0,641,642,6,98,1,0,642,198,
		1,0,0,0,9,0,586,592,597,603,611,617,625,635,2,0,1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
