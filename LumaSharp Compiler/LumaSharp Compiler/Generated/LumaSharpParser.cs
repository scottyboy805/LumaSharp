//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/LumaSharp.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LumaSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, IMPORT=42, NAMESPACE=43, TYPE=44, CONTRACT=45, 
		ENUM=46, GLOBAL=47, EXPORT=48, INTERNAL=49, SPECIALHIDDEN=50, AS=51, CONTINUE=52, 
		BREAK=53, RETURN=54, IF=55, ELSE=56, ELSEIF=57, TRUE=58, FALSE=59, FOREACH=60, 
		IN=61, FOR=62, WHILE=63, SELECT=64, MATCH=65, DEFAULT=66, TRY=67, CATCH=68, 
		FINALLY=69, SIZE=70, READ=71, WRITE=72, THIS=73, BASE=74, NEW=75, STACKNEW=76, 
		ANY=77, BOOL=78, CHAR=79, I8=80, U8=81, I16=82, U16=83, I32=84, U32=85, 
		I64=86, U64=87, FLOAT=88, DOUBLE=89, STRING=90, NULL=91, IDENTIFIER=92, 
		INT=93, DECIMAL=94, HEX=95, LITERAL=96, WS=97, COMMENT=98;
	public const int
		RULE_compilationUnit = 0, RULE_importElement = 1, RULE_rootElement = 2, 
		RULE_importStatement = 3, RULE_importAlias = 4, RULE_namespaceDeclaration = 5, 
		RULE_namespaceName = 6, RULE_typeDeclaration = 7, RULE_contractDeclaration = 8, 
		RULE_enumDeclaration = 9, RULE_enumBlock = 10, RULE_enumField = 11, RULE_rootMember = 12, 
		RULE_rootMemberBlock = 13, RULE_memberBlock = 14, RULE_memberDeclaration = 15, 
		RULE_attributeDeclaration = 16, RULE_fieldDeclaration = 17, RULE_fieldAssignment = 18, 
		RULE_accessorDeclaration = 19, RULE_accessorBody = 20, RULE_accessorRead = 21, 
		RULE_accessorWrite = 22, RULE_initializerDeclaration = 23, RULE_methodDeclaration = 24, 
		RULE_methodParameterList = 25, RULE_methodParameter = 26, RULE_accessModifier = 27, 
		RULE_genericParameterList = 28, RULE_genericParameter = 29, RULE_genericArguments = 30, 
		RULE_arrayParameters = 31, RULE_inheritParameters = 32, RULE_typeReference = 33, 
		RULE_shortTypeReference = 34, RULE_parentTypeReference = 35, RULE_primitiveType = 36, 
		RULE_statementBlock = 37, RULE_statement = 38, RULE_returnStatement = 39, 
		RULE_methodInvokeStatement = 40, RULE_postfixStatement = 41, RULE_localVariableStatement = 42, 
		RULE_localVariableAssignment = 43, RULE_assignStatement = 44, RULE_ifStatement = 45, 
		RULE_elseifStatement = 46, RULE_elseStatement = 47, RULE_foreachStatement = 48, 
		RULE_forStatement = 49, RULE_forVariableStatement = 50, RULE_forIncrementStatement = 51, 
		RULE_whileStatement = 52, RULE_selectStatement = 53, RULE_defaultStatement = 54, 
		RULE_matchStatement = 55, RULE_tryStatement = 56, RULE_catchStatement = 57, 
		RULE_finallyStatement = 58, RULE_expression = 59, RULE_endExpression = 60, 
		RULE_typeExpression = 61, RULE_sizeExpression = 62, RULE_newExpression = 63, 
		RULE_indexExpression = 64, RULE_fieldAccessExpression = 65, RULE_methodInvokeExpression = 66, 
		RULE_methodArgument = 67, RULE_initializerInvokeExpression = 68;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importElement", "rootElement", "importStatement", 
		"importAlias", "namespaceDeclaration", "namespaceName", "typeDeclaration", 
		"contractDeclaration", "enumDeclaration", "enumBlock", "enumField", "rootMember", 
		"rootMemberBlock", "memberBlock", "memberDeclaration", "attributeDeclaration", 
		"fieldDeclaration", "fieldAssignment", "accessorDeclaration", "accessorBody", 
		"accessorRead", "accessorWrite", "initializerDeclaration", "methodDeclaration", 
		"methodParameterList", "methodParameter", "accessModifier", "genericParameterList", 
		"genericParameter", "genericArguments", "arrayParameters", "inheritParameters", 
		"typeReference", "shortTypeReference", "parentTypeReference", "primitiveType", 
		"statementBlock", "statement", "returnStatement", "methodInvokeStatement", 
		"postfixStatement", "localVariableStatement", "localVariableAssignment", 
		"assignStatement", "ifStatement", "elseifStatement", "elseStatement", 
		"foreachStatement", "forStatement", "forVariableStatement", "forIncrementStatement", 
		"whileStatement", "selectStatement", "defaultStatement", "matchStatement", 
		"tryStatement", "catchStatement", "finallyStatement", "expression", "endExpression", 
		"typeExpression", "sizeExpression", "newExpression", "indexExpression", 
		"fieldAccessExpression", "methodInvokeExpression", "methodArgument", "initializerInvokeExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "':'", "'{'", "','", "'}'", "'#'", "'('", "')'", "'='", 
		"'=>'", "'...'", "'<'", "'>'", "'['", "']'", "'&'", "'++'", "'--'", "'+='", 
		"'-='", "'/='", "'*='", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'>='", 
		"'<='", "'=='", "'!='", "'&&'", "'||'", "'?'", "'U'", "'L'", "'UL'", "'F'", 
		"'D'", "'import'", "'namespace'", "'type'", "'contract'", "'enum'", "'global'", 
		"'export'", "'internal'", "'hidden'", "'as'", "'continue'", "'break'", 
		"'return'", "'if'", "'else'", "'elseif'", "'true'", "'false'", "'foreach'", 
		"'in'", "'for'", "'while'", "'select'", "'match'", "'default'", "'try'", 
		"'catch'", "'finally'", "'size'", "'read'", "'write'", "'this'", "'base'", 
		"'new'", "'stacknew'", "'any'", "'bool'", "'char'", "'i8'", "'u8'", "'i16'", 
		"'u16'", "'i32'", "'u32'", "'i64'", "'u64'", "'float'", "'double'", "'string'", 
		"'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IMPORT", "NAMESPACE", "TYPE", "CONTRACT", 
		"ENUM", "GLOBAL", "EXPORT", "INTERNAL", "SPECIALHIDDEN", "AS", "CONTINUE", 
		"BREAK", "RETURN", "IF", "ELSE", "ELSEIF", "TRUE", "FALSE", "FOREACH", 
		"IN", "FOR", "WHILE", "SELECT", "MATCH", "DEFAULT", "TRY", "CATCH", "FINALLY", 
		"SIZE", "READ", "WRITE", "THIS", "BASE", "NEW", "STACKNEW", "ANY", "BOOL", 
		"CHAR", "I8", "U8", "I16", "U16", "I32", "U32", "I64", "U64", "FLOAT", 
		"DOUBLE", "STRING", "NULL", "IDENTIFIER", "INT", "DECIMAL", "HEX", "LITERAL", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LumaSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LumaSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LumaSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LumaSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext[] importElement() {
			return GetRuleContexts<ImportElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext importElement(int i) {
			return GetRuleContext<ImportElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext[] rootElement() {
			return GetRuleContexts<RootElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext rootElement(int i) {
			return GetRuleContext<RootElementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 138;
				importElement();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2243003720663168L) != 0)) {
				{
				{
				State = 144;
				rootElement();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext importAlias() {
			return GetRuleContext<ImportAliasContext>(0);
		}
		public ImportElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportElementContext importElement() {
		ImportElementContext _localctx = new ImportElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importElement);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				importStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				importAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember() {
			return GetRuleContext<RootMemberContext>(0);
		}
		public RootElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootElementContext rootElement() {
		RootElementContext _localctx = new RootElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_rootElement);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				namespaceDeclaration();
				}
				break;
			case T__6:
			case TYPE:
			case CONTRACT:
			case ENUM:
			case GLOBAL:
			case EXPORT:
			case INTERNAL:
			case SPECIALHIDDEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				rootMember();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(IMPORT);
			State = 159;
			namespaceName();
			State = 160;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(LumaSharpParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ImportAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasContext importAlias() {
		ImportAliasContext _localctx = new ImportAliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_importAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(IMPORT);
			State = 163;
			Match(IDENTIFIER);
			State = 164;
			Match(AS);
			State = 165;
			namespaceName();
			State = 166;
			Match(T__1);
			State = 167;
			typeReference();
			State = 168;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(LumaSharpParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberBlockContext rootMemberBlock() {
			return GetRuleContext<RootMemberBlockContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(NAMESPACE);
			State = 171;
			namespaceName();
			State = 172;
			rootMemberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(IDENTIFIER);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 175;
				Match(T__2);
				State = 176;
				Match(IDENTIFIER);
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 182;
				attributeDeclaration();
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 188;
				accessModifier();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			Match(TYPE);
			State = 195;
			Match(IDENTIFIER);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 196;
				genericParameterList();
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 199;
				inheritParameters();
				}
			}

			State = 202;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(LumaSharpParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public ContractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDeclarationContext contractDeclaration() {
		ContractDeclarationContext _localctx = new ContractDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_contractDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 204;
				attributeDeclaration();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 210;
				accessModifier();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(CONTRACT);
			State = 217;
			Match(IDENTIFIER);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 218;
				genericParameterList();
				}
			}

			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 221;
				inheritParameters();
				}
			}

			State = 224;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(LumaSharpParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 226;
				attributeDeclaration();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 232;
				accessModifier();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 238;
			Match(ENUM);
			State = 239;
			Match(IDENTIFIER);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 240;
				Match(T__2);
				State = 241;
				primitiveType();
				}
			}

			State = 244;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		public IToken lblock;
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_localctx.lblock = Match(T__3);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==IDENTIFIER) {
				{
				State = 247;
				enumField();
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 248;
					Match(T__4);
					State = 249;
					enumField();
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 257;
			_localctx.lblock = Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 259;
				attributeDeclaration();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 265;
			Match(IDENTIFIER);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 266;
				fieldAssignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public RootMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberContext rootMember() {
		RootMemberContext _localctx = new RootMemberContext(Context, State);
		EnterRule(_localctx, 24, RULE_rootMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 269;
				typeDeclaration();
				}
				break;
			case 2:
				{
				State = 270;
				contractDeclaration();
				}
				break;
			case 3:
				{
				State = 271;
				enumDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext[] rootMember() {
			return GetRuleContexts<RootMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember(int i) {
			return GetRuleContext<RootMemberContext>(i);
		}
		public RootMemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMemberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberBlockContext rootMemberBlock() {
		RootMemberBlockContext _localctx = new RootMemberBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_rootMemberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(T__3);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640960L) != 0)) {
				{
				{
				State = 275;
				rootMember();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 281;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public MemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberBlockContext memberBlock() {
		MemberBlockContext _localctx = new MemberBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_memberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__3);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640960L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				{
				State = 284;
				memberDeclaration();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 290;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDeclarationContext accessorDeclaration() {
			return GetRuleContext<AccessorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberDeclaration);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				typeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				contractDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				enumDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 295;
				fieldDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 296;
				accessorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 297;
				methodDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_attributeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(T__6);
			State = 301;
			typeReference();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 302;
				Match(T__7);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
					{
					State = 303;
					expression(0);
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 304;
						Match(T__4);
						State = 305;
						expression(0);
						}
						}
						State = 310;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 313;
				Match(T__8);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 316;
				attributeDeclaration();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 322;
				accessModifier();
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 328;
			typeReference();
			State = 329;
			Match(IDENTIFIER);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 330;
				fieldAssignment();
				}
			}

			State = 333;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAssignmentContext : ParserRuleContext {
		public IToken assign;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAssignmentContext fieldAssignment() {
		FieldAssignmentContext _localctx = new FieldAssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_localctx.assign = Match(T__9);
			State = 336;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		public AccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDeclarationContext accessorDeclaration() {
		AccessorDeclarationContext _localctx = new AccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_accessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 338;
				attributeDeclaration();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 344;
				accessModifier();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 350;
			typeReference();
			State = 351;
			Match(IDENTIFIER);
			State = 352;
			accessorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorWriteContext accessorWrite() {
			return GetRuleContext<AccessorWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorReadContext accessorRead() {
			return GetRuleContext<AccessorReadContext>(0);
		}
		public AccessorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorBodyContext accessorBody() {
		AccessorBodyContext _localctx = new AccessorBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_accessorBody);
		int _la;
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				Match(T__10);
				State = 355;
				expression(0);
				State = 356;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				accessorWrite();
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 359;
					accessorRead();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 362;
				accessorRead();
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 363;
					accessorWrite();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LumaSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorRead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorReadContext accessorRead() {
		AccessorReadContext _localctx = new AccessorReadContext(Context, State);
		EnterRule(_localctx, 42, RULE_accessorRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(T__10);
			State = 369;
			Match(READ);
			State = 370;
			Match(T__2);
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 371;
				statement();
				}
				break;
			case 2:
				{
				State = 372;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LumaSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorWriteContext accessorWrite() {
		AccessorWriteContext _localctx = new AccessorWriteContext(Context, State);
		EnterRule(_localctx, 44, RULE_accessorWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(T__10);
			State = 376;
			Match(WRITE);
			State = 377;
			Match(T__2);
			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 378;
				statement();
				}
				break;
			case 2:
				{
				State = 379;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public InitializerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerDeclarationContext initializerDeclaration() {
		InitializerDeclarationContext _localctx = new InitializerDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_initializerDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 382;
				attributeDeclaration();
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 388;
				accessModifier();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394;
			Match(THIS);
			State = 395;
			Match(T__7);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 396;
				methodParameterList();
				}
			}

			State = 399;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 401;
				attributeDeclaration();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 407;
				accessModifier();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 413;
			typeReference();
			State = 414;
			Match(IDENTIFIER);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 415;
				genericParameterList();
				}
			}

			State = 418;
			Match(T__7);
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 419;
				methodParameterList();
				}
			}

			State = 422;
			Match(T__8);
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 423;
				Match(T__0);
				}
				break;
			case T__3:
				{
				State = 424;
				statementBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext[] methodParameter() {
			return GetRuleContexts<MethodParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext methodParameter(int i) {
			return GetRuleContext<MethodParameterContext>(i);
		}
		public MethodParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterListContext methodParameterList() {
		MethodParameterListContext _localctx = new MethodParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			methodParameter();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 428;
				Match(T__4);
				State = 429;
				methodParameter();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public MethodParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterContext methodParameter() {
		MethodParameterContext _localctx = new MethodParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			typeReference();
			State = 436;
			Match(IDENTIFIER);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 437;
				Match(T__11);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(LumaSharpParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(LumaSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIALHIDDEN() { return GetToken(LumaSharpParser.SPECIALHIDDEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(LumaSharpParser.GLOBAL, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext[] genericParameter() {
			return GetRuleContexts<GenericParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext genericParameter(int i) {
			return GetRuleContext<GenericParameterContext>(i);
		}
		public GenericParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterListContext genericParameterList() {
		GenericParameterListContext _localctx = new GenericParameterListContext(Context, State);
		EnterRule(_localctx, 56, RULE_genericParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(T__12);
			State = 443;
			genericParameter();
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 444;
				Match(T__4);
				State = 445;
				genericParameter();
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 451;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public GenericParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterContext genericParameter() {
		GenericParameterContext _localctx = new GenericParameterContext(Context, State);
		EnterRule(_localctx, 58, RULE_genericParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(IDENTIFIER);
			{
			State = 454;
			Match(T__2);
			State = 455;
			typeReference();
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 456;
					Match(T__4);
					State = 457;
					typeReference();
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentsContext : ParserRuleContext {
		public IToken lgen;
		public IToken rgen;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public GenericArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentsContext genericArguments() {
		GenericArgumentsContext _localctx = new GenericArgumentsContext(Context, State);
		EnterRule(_localctx, 60, RULE_genericArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_localctx.lgen = Match(T__12);
			State = 464;
			typeReference();
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 465;
				Match(T__4);
				State = 466;
				typeReference();
				}
				}
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 472;
			_localctx.rgen = Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayParametersContext : ParserRuleContext {
		public ArrayParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayParametersContext arrayParameters() {
		ArrayParametersContext _localctx = new ArrayParametersContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrayParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(T__14);
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 475;
				Match(T__4);
				}
				break;
			}
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 478;
				Match(T__4);
				}
			}

			State = 481;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public InheritParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritParametersContext inheritParameters() {
		InheritParametersContext _localctx = new InheritParametersContext(Context, State);
		EnterRule(_localctx, 64, RULE_inheritParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(T__2);
			State = 484;
			typeReference();
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 485;
				Match(T__4);
				State = 486;
				typeReference();
				}
				}
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentTypeReferenceContext parentTypeReference() {
			return GetRuleContext<ParentTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case FLOAT:
			case DOUBLE:
			case STRING:
				{
				State = 492;
				primitiveType();
				}
				break;
			case IDENTIFIER:
				{
				{
				State = 497;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 493;
						Match(IDENTIFIER);
						State = 494;
						Match(T__2);
						}
						} 
					}
					State = 499;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				State = 501;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 500;
					parentTypeReference();
					}
					break;
				}
				State = 503;
				Match(IDENTIFIER);
				State = 505;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 504;
					genericArguments();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 509;
				arrayParameters();
				}
				break;
			}
			State = 513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 512;
				Match(T__16);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		public ShortTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterShortTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitShortTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortTypeReferenceContext shortTypeReference() {
		ShortTypeReferenceContext _localctx = new ShortTypeReferenceContext(Context, State);
		EnterRule(_localctx, 68, RULE_shortTypeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(IDENTIFIER);
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 516;
				genericArguments();
				}
			}

			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 519;
				arrayParameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShortTypeReferenceContext[] shortTypeReference() {
			return GetRuleContexts<ShortTypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortTypeReferenceContext shortTypeReference(int i) {
			return GetRuleContext<ShortTypeReferenceContext>(i);
		}
		public ParentTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterParentTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitParentTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentTypeReferenceContext parentTypeReference() {
		ParentTypeReferenceContext _localctx = new ParentTypeReferenceContext(Context, State);
		EnterRule(_localctx, 70, RULE_parentTypeReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 522;
					shortTypeReference();
					State = 523;
					Match(T__1);
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(LumaSharpParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LumaSharpParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LumaSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(LumaSharpParser.I8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(LumaSharpParser.U8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(LumaSharpParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(LumaSharpParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(LumaSharpParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(LumaSharpParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(LumaSharpParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(LumaSharpParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LumaSharpParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LumaSharpParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LumaSharpParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 16383L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(T__3);
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
				{
				{
				State = 533;
				statement();
				}
				}
				State = 538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 539;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeStatementContext methodInvokeStatement() {
			return GetRuleContext<MethodInvokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixStatementContext postfixStatement() {
			return GetRuleContext<PostfixStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableStatementContext localVariableStatement() {
			return GetRuleContext<LocalVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LumaSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(LumaSharpParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 541;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				methodInvokeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 543;
				postfixStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 544;
				statementBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 545;
				localVariableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 546;
				assignStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 547;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 548;
				foreachStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 549;
				forStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 550;
				whileStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 551;
				selectStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 552;
				tryStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 553;
				Match(BREAK);
				State = 554;
				Match(T__0);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 555;
				Match(CONTINUE);
				State = 556;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LumaSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(RETURN);
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 560;
				expression(0);
				}
			}

			State = 563;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodInvokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeStatementContext methodInvokeStatement() {
		MethodInvokeStatementContext _localctx = new MethodInvokeStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_methodInvokeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 565;
				expression(0);
				}
				break;
			}
			State = 568;
			methodInvokeExpression();
			State = 569;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixStatementContext postfixStatement() {
		PostfixStatementContext _localctx = new PostfixStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_postfixStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			expression(0);
			State = 572;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 573;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableAssignmentContext localVariableAssignment() {
			return GetRuleContext<LocalVariableAssignmentContext>(0);
		}
		public LocalVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableStatementContext localVariableStatement() {
		LocalVariableStatementContext _localctx = new LocalVariableStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_localVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			typeReference();
			State = 576;
			Match(IDENTIFIER);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 577;
				Match(T__4);
				State = 578;
				Match(IDENTIFIER);
				}
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 584;
				localVariableAssignment();
				}
			}

			State = 587;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableAssignmentContext : ParserRuleContext {
		public IToken assign;
		public IToken lblock;
		public IToken rblock;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LocalVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableAssignmentContext localVariableAssignment() {
		LocalVariableAssignmentContext _localctx = new LocalVariableAssignmentContext(Context, State);
		EnterRule(_localctx, 86, RULE_localVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			_localctx.assign = Match(T__9);
			State = 602;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__23:
			case T__24:
			case TYPE:
			case TRUE:
			case FALSE:
			case SIZE:
			case THIS:
			case BASE:
			case NEW:
			case STACKNEW:
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case FLOAT:
			case DOUBLE:
			case STRING:
			case NULL:
			case IDENTIFIER:
			case INT:
			case DECIMAL:
			case HEX:
			case LITERAL:
				{
				State = 590;
				expression(0);
				}
				break;
			case T__3:
				{
				State = 591;
				_localctx.lblock = Match(T__3);
				State = 592;
				expression(0);
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 593;
					Match(T__4);
					State = 594;
					expression(0);
					}
					}
					State = 599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 600;
				_localctx.rblock = Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public IToken assign;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			expression(0);
			State = 605;
			_localctx.assign = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15729664L) != 0)) ) {
				_localctx.assign = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 606;
			expression(0);
			State = 607;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LumaSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext[] elseifStatement() {
			return GetRuleContexts<ElseifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement(int i) {
			return GetRuleContext<ElseifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(IF);
			State = 610;
			_localctx.lparen = Match(T__7);
			State = 611;
			expression(0);
			State = 612;
			_localctx.rparen = Match(T__8);
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 613;
				statement();
				}
				break;
			case 2:
				{
				State = 614;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 615;
				statementBlock();
				}
				break;
			}
			State = 621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 618;
					elseifStatement();
					}
					} 
				}
				State = 623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			State = 625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 624;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(LumaSharpParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStatementContext elseifStatement() {
		ElseifStatementContext _localctx = new ElseifStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_elseifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(ELSEIF);
			State = 628;
			_localctx.lparen = Match(T__7);
			State = 629;
			expression(0);
			State = 630;
			_localctx.rparen = Match(T__8);
			State = 634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 631;
				statement();
				}
				break;
			case 2:
				{
				State = 632;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 633;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LumaSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(ELSE);
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 637;
				statement();
				}
				break;
			case 2:
				{
				State = 638;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 639;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(LumaSharpParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(LumaSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			Match(FOREACH);
			State = 643;
			_localctx.lparen = Match(T__7);
			State = 644;
			typeReference();
			State = 645;
			Match(IDENTIFIER);
			State = 646;
			Match(IN);
			State = 647;
			expression(0);
			State = 648;
			_localctx.rparen = Match(T__8);
			State = 654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					State = 649;
					statement();
					}
				}

				State = 652;
				_localctx.semi = Match(T__0);
				}
				break;
			case 2:
				{
				State = 653;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken semi;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LumaSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForVariableStatementContext[] forVariableStatement() {
			return GetRuleContexts<ForVariableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForVariableStatementContext forVariableStatement(int i) {
			return GetRuleContext<ForVariableStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIncrementStatementContext[] forIncrementStatement() {
			return GetRuleContexts<ForIncrementStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIncrementStatementContext forIncrementStatement(int i) {
			return GetRuleContext<ForIncrementStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(FOR);
			State = 657;
			_localctx.lparen = Match(T__7);
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 658;
				forVariableStatement();
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 659;
					Match(T__4);
					State = 660;
					forVariableStatement();
					}
					}
					State = 665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 668;
			_localctx.semi = Match(T__0);
			State = 670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 669;
				expression(0);
				}
			}

			State = 672;
			_localctx.semi = Match(T__0);
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 673;
				forIncrementStatement();
				State = 678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 674;
					Match(T__4);
					State = 675;
					forIncrementStatement();
					}
					}
					State = 680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 683;
			_localctx.rparen = Match(T__8);
			State = 689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					State = 684;
					statement();
					}
				}

				State = 687;
				_localctx.semi = Match(T__0);
				}
				break;
			case 2:
				{
				State = 688;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForVariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForVariableStatementContext forVariableStatement() {
		ForVariableStatementContext _localctx = new ForVariableStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_forVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			typeReference();
			State = 692;
			Match(IDENTIFIER);
			State = 695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 693;
				Match(T__9);
				State = 694;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIncrementStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIncrementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIncrementStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIncrementStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIncrementStatementContext forIncrementStatement() {
		ForIncrementStatementContext _localctx = new ForIncrementStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_forIncrementStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LumaSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(WHILE);
			State = 700;
			Match(T__7);
			State = 701;
			expression(0);
			State = 702;
			Match(T__8);
			State = 713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 703;
				statement();
				}
				break;
			case 2:
				{
				State = 704;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 705;
				Match(T__3);
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 706;
					statement();
					}
					}
					State = 711;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 712;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(LumaSharpParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext[] defaultStatement() {
			return GetRuleContexts<DefaultStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext defaultStatement(int i) {
			return GetRuleContext<DefaultStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext[] matchStatement() {
			return GetRuleContexts<MatchStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext matchStatement(int i) {
			return GetRuleContext<MatchStatementContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			Match(SELECT);
			State = 716;
			Match(T__7);
			State = 717;
			expression(0);
			State = 718;
			Match(T__8);
			State = 719;
			Match(T__3);
			State = 724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH || _la==DEFAULT) {
				{
				State = 722;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 720;
					defaultStatement();
					}
					break;
				case MATCH:
					{
					State = 721;
					matchStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 727;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LumaSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStatementContext defaultStatement() {
		DefaultStatementContext _localctx = new DefaultStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_defaultStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			Match(DEFAULT);
			State = 730;
			Match(T__2);
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 731;
				statement();
				}
				break;
			case 2:
				{
				State = 732;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 733;
				Match(T__3);
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 734;
					statement();
					}
					}
					State = 739;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 740;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(LumaSharpParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchStatementContext matchStatement() {
		MatchStatementContext _localctx = new MatchStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_matchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			Match(MATCH);
			State = 744;
			expression(0);
			State = 745;
			Match(T__2);
			State = 756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 746;
				statement();
				}
				break;
			case 2:
				{
				State = 747;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 748;
				Match(T__3);
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 749;
					statement();
					}
					}
					State = 754;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 755;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(LumaSharpParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchStatementContext catchStatement() {
			return GetRuleContext<CatchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyStatementContext finallyStatement() {
			return GetRuleContext<FinallyStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			Match(TRY);
			State = 768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 759;
				statement();
				}
				break;
			case 2:
				{
				State = 760;
				Match(T__3);
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 761;
					statement();
					}
					}
					State = 766;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 767;
				Match(T__5);
				}
				break;
			}
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 770;
				catchStatement();
				}
				break;
			}
			State = 774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 773;
				finallyStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(LumaSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public CatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchStatementContext catchStatement() {
		CatchStatementContext _localctx = new CatchStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_catchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(CATCH);
			State = 781;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 777;
				Match(T__7);
				State = 778;
				typeReference();
				State = 779;
				Match(T__8);
				}
				break;
			}
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 783;
				statement();
				}
				break;
			case 2:
				{
				State = 784;
				Match(T__3);
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 785;
					statement();
					}
					}
					State = 790;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 791;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(LumaSharpParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FinallyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyStatementContext finallyStatement() {
		FinallyStatementContext _localctx = new FinallyStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_finallyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(FINALLY);
			State = 804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 795;
				statement();
				}
				break;
			case 2:
				{
				State = 796;
				Match(T__3);
				State = 800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 797;
					statement();
					}
					}
					State = 802;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 803;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken unary;
		public IToken lparen;
		public IToken binary;
		public IToken ternary;
		public IToken alternate;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext[] indexExpression() {
			return GetRuleContexts<IndexExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression(int i) {
			return GetRuleContext<IndexExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExpressionContext endExpression() {
			return GetRuleContext<EndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessExpressionContext fieldAccessExpression() {
			return GetRuleContext<FieldAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionContext typeExpression() {
			return GetRuleContext<TypeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeExpressionContext sizeExpression() {
			return GetRuleContext<SizeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerInvokeExpressionContext initializerInvokeExpression() {
			return GetRuleContext<InitializerInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(LumaSharpParser.BASE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 807;
				_localctx.unary = Match(T__23);
				State = 808;
				expression(23);
				}
				break;
			case 2:
				{
				State = 809;
				_localctx.unary = Match(T__24);
				State = 810;
				expression(22);
				}
				break;
			case 3:
				{
				State = 811;
				Match(IDENTIFIER);
				State = 815;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 812;
						indexExpression();
						}
						} 
					}
					State = 817;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				}
				}
				break;
			case 4:
				{
				State = 818;
				endExpression();
				State = 822;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 819;
						indexExpression();
						}
						} 
					}
					State = 824;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				}
				}
				break;
			case 5:
				{
				State = 825;
				typeReference();
				State = 826;
				methodInvokeExpression();
				State = 830;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 827;
						indexExpression();
						}
						} 
					}
					State = 832;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				}
				}
				break;
			case 6:
				{
				State = 833;
				typeReference();
				State = 834;
				fieldAccessExpression();
				State = 838;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 835;
						indexExpression();
						}
						} 
					}
					State = 840;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				}
				}
				break;
			case 7:
				{
				State = 841;
				_localctx.lparen = Match(T__7);
				State = 842;
				expression(0);
				State = 843;
				_localctx.lparen = Match(T__8);
				State = 847;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 844;
						indexExpression();
						}
						} 
					}
					State = 849;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				}
				}
				break;
			case 8:
				{
				State = 850;
				typeExpression();
				}
				break;
			case 9:
				{
				State = 851;
				sizeExpression();
				}
				break;
			case 10:
				{
				State = 852;
				newExpression();
				State = 856;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 853;
						indexExpression();
						}
						} 
					}
					State = 858;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				}
				}
				break;
			case 11:
				{
				State = 859;
				initializerInvokeExpression();
				State = 863;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 860;
						indexExpression();
						}
						} 
					}
					State = 865;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				}
				}
				break;
			case 12:
				{
				State = 866;
				Match(THIS);
				State = 870;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 867;
						indexExpression();
						}
						} 
					}
					State = 872;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				}
				}
				break;
			case 13:
				{
				State = 873;
				Match(BASE);
				State = 877;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 874;
						indexExpression();
						}
						} 
					}
					State = 879;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				}
				}
				break;
			case 14:
				{
				State = 880;
				typeReference();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 925;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 923;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 883;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 884;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 885;
						expression(22);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 886;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 887;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__28) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 888;
						expression(21);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 889;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 890;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3221250048L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 891;
						expression(20);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 892;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 893;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 894;
						expression(19);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 895;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 896;
						_localctx.binary = Match(T__33);
						State = 897;
						expression(18);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 898;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 899;
						_localctx.binary = Match(T__34);
						State = 900;
						expression(17);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 901;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 902;
						_localctx.ternary = Match(T__35);
						State = 903;
						expression(0);
						State = 904;
						_localctx.alternate = Match(T__2);
						State = 905;
						expression(16);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 907;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 908;
						methodInvokeExpression();
						State = 912;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 909;
								indexExpression();
								}
								} 
							}
							State = 914;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
						}
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 915;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 916;
						fieldAccessExpression();
						State = 920;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 917;
								indexExpression();
								}
								} 
							}
							State = 922;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
						}
						}
						break;
					}
					} 
				}
				State = 927;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EndExpressionContext : ParserRuleContext {
		public IToken decorator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(LumaSharpParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LumaSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LumaSharpParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(LumaSharpParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(LumaSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(LumaSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(LumaSharpParser.NULL, 0); }
		public EndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExpressionContext endExpression() {
		EndExpressionContext _localctx = new EndExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_endExpression);
		int _la;
		try {
			State = 941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 928;
				Match(HEX);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 929;
				Match(INT);
				State = 931;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
				case 1:
					{
					State = 930;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 933;
				Match(DECIMAL);
				State = 935;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 934;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__39 || _la==T__40) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 937;
				Match(LITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 938;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 939;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 940;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExpressionContext typeExpression() {
		TypeExpressionContext _localctx = new TypeExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_typeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			Match(TYPE);
			State = 944;
			_localctx.lparen = Match(T__7);
			State = 945;
			typeReference();
			State = 946;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(LumaSharpParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public SizeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeExpressionContext sizeExpression() {
		SizeExpressionContext _localctx = new SizeExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_sizeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			Match(SIZE);
			State = 949;
			_localctx.lparen = Match(T__7);
			State = 950;
			typeReference();
			State = 951;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerInvokeExpressionContext initializerInvokeExpression() {
			return GetRuleContext<InitializerInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(LumaSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKNEW() { return GetToken(LumaSharpParser.STACKNEW, 0); }
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_newExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==STACKNEW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 954;
			initializerInvokeExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		public IToken larray;
		public IToken rarray;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_indexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			_localctx.larray = Match(T__14);
			State = 957;
			expression(0);
			State = 962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 958;
				Match(T__4);
				State = 959;
				expression(0);
				}
				}
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 965;
			_localctx.rarray = Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessExpressionContext : ParserRuleContext {
		public IToken dot;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public FieldAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessExpressionContext fieldAccessExpression() {
		FieldAccessExpressionContext _localctx = new FieldAccessExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_fieldAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			_localctx.dot = Match(T__1);
			State = 968;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeExpressionContext : ParserRuleContext {
		public IToken dot;
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext[] methodArgument() {
			return GetRuleContexts<MethodArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext methodArgument(int i) {
			return GetRuleContext<MethodArgumentContext>(i);
		}
		public MethodInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeExpressionContext methodInvokeExpression() {
		MethodInvokeExpressionContext _localctx = new MethodInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_methodInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 970;
				_localctx.dot = Match(T__1);
				}
			}

			State = 973;
			Match(IDENTIFIER);
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 974;
				genericArguments();
				}
			}

			State = 977;
			_localctx.lparen = Match(T__7);
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691642624L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 978;
				methodArgument();
				}
			}

			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 981;
				Match(T__4);
				State = 982;
				methodArgument();
				}
				}
				State = 987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 988;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 134, RULE_methodArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 990;
				Match(T__16);
				}
			}

			State = 993;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerInvokeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InitializerInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerInvokeExpressionContext initializerInvokeExpression() {
		InitializerInvokeExpressionContext _localctx = new InitializerInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_initializerInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			typeReference();
			State = 996;
			_localctx.lparen = Match(T__7);
			State = 1005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 997;
				expression(0);
				State = 1002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 998;
					Match(T__4);
					State = 999;
					expression(0);
					}
					}
					State = 1004;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1007;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 59: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 21);
		case 1: return Precpred(Context, 20);
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,98,1010,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,5,0,140,8,0,10,0,
		12,0,143,9,0,1,0,5,0,146,8,0,10,0,12,0,149,9,0,1,1,1,1,3,1,153,8,1,1,2,
		1,2,3,2,157,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,5,6,178,8,6,10,6,12,6,181,9,6,1,7,5,7,184,8,7,10,
		7,12,7,187,9,7,1,7,5,7,190,8,7,10,7,12,7,193,9,7,1,7,1,7,1,7,3,7,198,8,
		7,1,7,3,7,201,8,7,1,7,1,7,1,8,5,8,206,8,8,10,8,12,8,209,9,8,1,8,5,8,212,
		8,8,10,8,12,8,215,9,8,1,8,1,8,1,8,3,8,220,8,8,1,8,3,8,223,8,8,1,8,1,8,
		1,9,5,9,228,8,9,10,9,12,9,231,9,9,1,9,5,9,234,8,9,10,9,12,9,237,9,9,1,
		9,1,9,1,9,1,9,3,9,243,8,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,251,8,10,10,
		10,12,10,254,9,10,3,10,256,8,10,1,10,1,10,1,11,5,11,261,8,11,10,11,12,
		11,264,9,11,1,11,1,11,3,11,268,8,11,1,12,1,12,1,12,3,12,273,8,12,1,13,
		1,13,5,13,277,8,13,10,13,12,13,280,9,13,1,13,1,13,1,14,1,14,5,14,286,8,
		14,10,14,12,14,289,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,299,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,307,8,16,10,16,12,16,310,9,16,
		3,16,312,8,16,1,16,3,16,315,8,16,1,17,5,17,318,8,17,10,17,12,17,321,9,
		17,1,17,5,17,324,8,17,10,17,12,17,327,9,17,1,17,1,17,1,17,3,17,332,8,17,
		1,17,1,17,1,18,1,18,1,18,1,19,5,19,340,8,19,10,19,12,19,343,9,19,1,19,
		5,19,346,8,19,10,19,12,19,349,9,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,361,8,20,1,20,1,20,3,20,365,8,20,3,20,367,8,20,1,21,
		1,21,1,21,1,21,1,21,3,21,374,8,21,1,22,1,22,1,22,1,22,1,22,3,22,381,8,
		22,1,23,5,23,384,8,23,10,23,12,23,387,9,23,1,23,5,23,390,8,23,10,23,12,
		23,393,9,23,1,23,1,23,1,23,3,23,398,8,23,1,23,1,23,1,24,5,24,403,8,24,
		10,24,12,24,406,9,24,1,24,5,24,409,8,24,10,24,12,24,412,9,24,1,24,1,24,
		1,24,3,24,417,8,24,1,24,1,24,3,24,421,8,24,1,24,1,24,1,24,3,24,426,8,24,
		1,25,1,25,1,25,5,25,431,8,25,10,25,12,25,434,9,25,1,26,1,26,1,26,3,26,
		439,8,26,1,27,1,27,1,28,1,28,1,28,1,28,5,28,447,8,28,10,28,12,28,450,9,
		28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,5,29,459,8,29,10,29,12,29,462,9,
		29,1,30,1,30,1,30,1,30,5,30,468,8,30,10,30,12,30,471,9,30,1,30,1,30,1,
		31,1,31,3,31,477,8,31,1,31,3,31,480,8,31,1,31,1,31,1,32,1,32,1,32,1,32,
		5,32,488,8,32,10,32,12,32,491,9,32,1,33,1,33,1,33,5,33,496,8,33,10,33,
		12,33,499,9,33,1,33,3,33,502,8,33,1,33,1,33,3,33,506,8,33,3,33,508,8,33,
		1,33,3,33,511,8,33,1,33,3,33,514,8,33,1,34,1,34,3,34,518,8,34,1,34,3,34,
		521,8,34,1,35,1,35,1,35,5,35,526,8,35,10,35,12,35,529,9,35,1,36,1,36,1,
		37,1,37,5,37,535,8,37,10,37,12,37,538,9,37,1,37,1,37,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,558,
		8,38,1,39,1,39,3,39,562,8,39,1,39,1,39,1,40,3,40,567,8,40,1,40,1,40,1,
		40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,580,8,42,10,42,12,42,583,
		9,42,1,42,3,42,586,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,596,
		8,43,10,43,12,43,599,9,43,1,43,1,43,3,43,603,8,43,1,44,1,44,1,44,1,44,
		1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,617,8,45,1,45,5,45,620,8,
		45,10,45,12,45,623,9,45,1,45,3,45,626,8,45,1,46,1,46,1,46,1,46,1,46,1,
		46,1,46,3,46,635,8,46,1,47,1,47,1,47,1,47,3,47,641,8,47,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,3,48,651,8,48,1,48,1,48,3,48,655,8,48,1,49,1,
		49,1,49,1,49,1,49,5,49,662,8,49,10,49,12,49,665,9,49,3,49,667,8,49,1,49,
		1,49,3,49,671,8,49,1,49,1,49,1,49,1,49,5,49,677,8,49,10,49,12,49,680,9,
		49,3,49,682,8,49,1,49,1,49,3,49,686,8,49,1,49,1,49,3,49,690,8,49,1,50,
		1,50,1,50,1,50,3,50,696,8,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,
		52,1,52,5,52,708,8,52,10,52,12,52,711,9,52,1,52,3,52,714,8,52,1,53,1,53,
		1,53,1,53,1,53,1,53,1,53,5,53,723,8,53,10,53,12,53,726,9,53,1,53,1,53,
		1,54,1,54,1,54,1,54,1,54,1,54,5,54,736,8,54,10,54,12,54,739,9,54,1,54,
		3,54,742,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,751,8,55,10,55,12,
		55,754,9,55,1,55,3,55,757,8,55,1,56,1,56,1,56,1,56,5,56,763,8,56,10,56,
		12,56,766,9,56,1,56,3,56,769,8,56,1,56,3,56,772,8,56,1,56,3,56,775,8,56,
		1,57,1,57,1,57,1,57,1,57,3,57,782,8,57,1,57,1,57,1,57,5,57,787,8,57,10,
		57,12,57,790,9,57,1,57,3,57,793,8,57,1,58,1,58,1,58,1,58,5,58,799,8,58,
		10,58,12,58,802,9,58,1,58,3,58,805,8,58,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,5,59,814,8,59,10,59,12,59,817,9,59,1,59,1,59,5,59,821,8,59,10,59,
		12,59,824,9,59,1,59,1,59,1,59,5,59,829,8,59,10,59,12,59,832,9,59,1,59,
		1,59,1,59,5,59,837,8,59,10,59,12,59,840,9,59,1,59,1,59,1,59,1,59,5,59,
		846,8,59,10,59,12,59,849,9,59,1,59,1,59,1,59,1,59,5,59,855,8,59,10,59,
		12,59,858,9,59,1,59,1,59,5,59,862,8,59,10,59,12,59,865,9,59,1,59,1,59,
		5,59,869,8,59,10,59,12,59,872,9,59,1,59,1,59,5,59,876,8,59,10,59,12,59,
		879,9,59,1,59,3,59,882,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
		59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
		59,1,59,1,59,1,59,1,59,5,59,911,8,59,10,59,12,59,914,9,59,1,59,1,59,1,
		59,5,59,919,8,59,10,59,12,59,922,9,59,5,59,924,8,59,10,59,12,59,927,9,
		59,1,60,1,60,1,60,3,60,932,8,60,1,60,1,60,3,60,936,8,60,1,60,1,60,1,60,
		1,60,3,60,942,8,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,
		63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,961,8,64,10,64,12,64,964,9,64,1,
		64,1,64,1,65,1,65,1,65,1,66,3,66,972,8,66,1,66,1,66,3,66,976,8,66,1,66,
		1,66,3,66,980,8,66,1,66,1,66,5,66,984,8,66,10,66,12,66,987,9,66,1,66,1,
		66,1,67,3,67,992,8,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,1001,8,68,
		10,68,12,68,1004,9,68,3,68,1006,8,68,1,68,1,68,1,68,0,1,118,69,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		0,11,1,0,47,50,1,0,77,90,1,0,18,19,2,0,10,10,20,23,1,0,26,28,2,0,24,24,
		29,29,2,0,13,14,30,31,1,0,32,33,1,0,37,39,1,0,40,41,1,0,75,76,1115,0,141,
		1,0,0,0,2,152,1,0,0,0,4,156,1,0,0,0,6,158,1,0,0,0,8,162,1,0,0,0,10,170,
		1,0,0,0,12,174,1,0,0,0,14,185,1,0,0,0,16,207,1,0,0,0,18,229,1,0,0,0,20,
		246,1,0,0,0,22,262,1,0,0,0,24,272,1,0,0,0,26,274,1,0,0,0,28,283,1,0,0,
		0,30,298,1,0,0,0,32,300,1,0,0,0,34,319,1,0,0,0,36,335,1,0,0,0,38,341,1,
		0,0,0,40,366,1,0,0,0,42,368,1,0,0,0,44,375,1,0,0,0,46,385,1,0,0,0,48,404,
		1,0,0,0,50,427,1,0,0,0,52,435,1,0,0,0,54,440,1,0,0,0,56,442,1,0,0,0,58,
		453,1,0,0,0,60,463,1,0,0,0,62,474,1,0,0,0,64,483,1,0,0,0,66,507,1,0,0,
		0,68,515,1,0,0,0,70,527,1,0,0,0,72,530,1,0,0,0,74,532,1,0,0,0,76,557,1,
		0,0,0,78,559,1,0,0,0,80,566,1,0,0,0,82,571,1,0,0,0,84,575,1,0,0,0,86,589,
		1,0,0,0,88,604,1,0,0,0,90,609,1,0,0,0,92,627,1,0,0,0,94,636,1,0,0,0,96,
		642,1,0,0,0,98,656,1,0,0,0,100,691,1,0,0,0,102,697,1,0,0,0,104,699,1,0,
		0,0,106,715,1,0,0,0,108,729,1,0,0,0,110,743,1,0,0,0,112,758,1,0,0,0,114,
		776,1,0,0,0,116,794,1,0,0,0,118,881,1,0,0,0,120,941,1,0,0,0,122,943,1,
		0,0,0,124,948,1,0,0,0,126,953,1,0,0,0,128,956,1,0,0,0,130,967,1,0,0,0,
		132,971,1,0,0,0,134,991,1,0,0,0,136,995,1,0,0,0,138,140,3,2,1,0,139,138,
		1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,147,1,0,0,
		0,143,141,1,0,0,0,144,146,3,4,2,0,145,144,1,0,0,0,146,149,1,0,0,0,147,
		145,1,0,0,0,147,148,1,0,0,0,148,1,1,0,0,0,149,147,1,0,0,0,150,153,3,6,
		3,0,151,153,3,8,4,0,152,150,1,0,0,0,152,151,1,0,0,0,153,3,1,0,0,0,154,
		157,3,10,5,0,155,157,3,24,12,0,156,154,1,0,0,0,156,155,1,0,0,0,157,5,1,
		0,0,0,158,159,5,42,0,0,159,160,3,12,6,0,160,161,5,1,0,0,161,7,1,0,0,0,
		162,163,5,42,0,0,163,164,5,92,0,0,164,165,5,51,0,0,165,166,3,12,6,0,166,
		167,5,2,0,0,167,168,3,66,33,0,168,169,5,1,0,0,169,9,1,0,0,0,170,171,5,
		43,0,0,171,172,3,12,6,0,172,173,3,26,13,0,173,11,1,0,0,0,174,179,5,92,
		0,0,175,176,5,3,0,0,176,178,5,92,0,0,177,175,1,0,0,0,178,181,1,0,0,0,179,
		177,1,0,0,0,179,180,1,0,0,0,180,13,1,0,0,0,181,179,1,0,0,0,182,184,3,32,
		16,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,
		191,1,0,0,0,187,185,1,0,0,0,188,190,3,54,27,0,189,188,1,0,0,0,190,193,
		1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,
		0,194,195,5,44,0,0,195,197,5,92,0,0,196,198,3,56,28,0,197,196,1,0,0,0,
		197,198,1,0,0,0,198,200,1,0,0,0,199,201,3,64,32,0,200,199,1,0,0,0,200,
		201,1,0,0,0,201,202,1,0,0,0,202,203,3,28,14,0,203,15,1,0,0,0,204,206,3,
		32,16,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,
		0,208,213,1,0,0,0,209,207,1,0,0,0,210,212,3,54,27,0,211,210,1,0,0,0,212,
		215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,
		0,0,0,216,217,5,45,0,0,217,219,5,92,0,0,218,220,3,56,28,0,219,218,1,0,
		0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,223,3,64,32,0,222,221,1,0,0,0,
		222,223,1,0,0,0,223,224,1,0,0,0,224,225,3,28,14,0,225,17,1,0,0,0,226,228,
		3,32,16,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,
		0,0,230,235,1,0,0,0,231,229,1,0,0,0,232,234,3,54,27,0,233,232,1,0,0,0,
		234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,
		1,0,0,0,238,239,5,46,0,0,239,242,5,92,0,0,240,241,5,3,0,0,241,243,3,72,
		36,0,242,240,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,245,3,20,10,0,
		245,19,1,0,0,0,246,255,5,4,0,0,247,252,3,22,11,0,248,249,5,5,0,0,249,251,
		3,22,11,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,
		0,0,253,256,1,0,0,0,254,252,1,0,0,0,255,247,1,0,0,0,255,256,1,0,0,0,256,
		257,1,0,0,0,257,258,5,6,0,0,258,21,1,0,0,0,259,261,3,32,16,0,260,259,1,
		0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,
		264,262,1,0,0,0,265,267,5,92,0,0,266,268,3,36,18,0,267,266,1,0,0,0,267,
		268,1,0,0,0,268,23,1,0,0,0,269,273,3,14,7,0,270,273,3,16,8,0,271,273,3,
		18,9,0,272,269,1,0,0,0,272,270,1,0,0,0,272,271,1,0,0,0,273,25,1,0,0,0,
		274,278,5,4,0,0,275,277,3,24,12,0,276,275,1,0,0,0,277,280,1,0,0,0,278,
		276,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,282,5,
		6,0,0,282,27,1,0,0,0,283,287,5,4,0,0,284,286,3,30,15,0,285,284,1,0,0,0,
		286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,
		1,0,0,0,290,291,5,6,0,0,291,29,1,0,0,0,292,299,3,14,7,0,293,299,3,16,8,
		0,294,299,3,18,9,0,295,299,3,34,17,0,296,299,3,38,19,0,297,299,3,48,24,
		0,298,292,1,0,0,0,298,293,1,0,0,0,298,294,1,0,0,0,298,295,1,0,0,0,298,
		296,1,0,0,0,298,297,1,0,0,0,299,31,1,0,0,0,300,301,5,7,0,0,301,314,3,66,
		33,0,302,311,5,8,0,0,303,308,3,118,59,0,304,305,5,5,0,0,305,307,3,118,
		59,0,306,304,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,
		312,1,0,0,0,310,308,1,0,0,0,311,303,1,0,0,0,311,312,1,0,0,0,312,313,1,
		0,0,0,313,315,5,9,0,0,314,302,1,0,0,0,314,315,1,0,0,0,315,33,1,0,0,0,316,
		318,3,32,16,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,
		1,0,0,0,320,325,1,0,0,0,321,319,1,0,0,0,322,324,3,54,27,0,323,322,1,0,
		0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,
		325,1,0,0,0,328,329,3,66,33,0,329,331,5,92,0,0,330,332,3,36,18,0,331,330,
		1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,5,1,0,0,334,35,1,0,0,0,
		335,336,5,10,0,0,336,337,3,118,59,0,337,37,1,0,0,0,338,340,3,32,16,0,339,
		338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,347,1,
		0,0,0,343,341,1,0,0,0,344,346,3,54,27,0,345,344,1,0,0,0,346,349,1,0,0,
		0,347,345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,0,350,
		351,3,66,33,0,351,352,5,92,0,0,352,353,3,40,20,0,353,39,1,0,0,0,354,355,
		5,11,0,0,355,356,3,118,59,0,356,357,5,1,0,0,357,367,1,0,0,0,358,360,3,
		44,22,0,359,361,3,42,21,0,360,359,1,0,0,0,360,361,1,0,0,0,361,367,1,0,
		0,0,362,364,3,42,21,0,363,365,3,44,22,0,364,363,1,0,0,0,364,365,1,0,0,
		0,365,367,1,0,0,0,366,354,1,0,0,0,366,358,1,0,0,0,366,362,1,0,0,0,367,
		41,1,0,0,0,368,369,5,11,0,0,369,370,5,71,0,0,370,373,5,3,0,0,371,374,3,
		76,38,0,372,374,3,74,37,0,373,371,1,0,0,0,373,372,1,0,0,0,374,43,1,0,0,
		0,375,376,5,11,0,0,376,377,5,72,0,0,377,380,5,3,0,0,378,381,3,76,38,0,
		379,381,3,74,37,0,380,378,1,0,0,0,380,379,1,0,0,0,381,45,1,0,0,0,382,384,
		3,32,16,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,
		0,0,386,391,1,0,0,0,387,385,1,0,0,0,388,390,3,54,27,0,389,388,1,0,0,0,
		390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,
		1,0,0,0,394,395,5,73,0,0,395,397,5,8,0,0,396,398,3,50,25,0,397,396,1,0,
		0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,9,0,0,400,47,1,0,0,0,401,
		403,3,32,16,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,
		1,0,0,0,405,410,1,0,0,0,406,404,1,0,0,0,407,409,3,54,27,0,408,407,1,0,
		0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,
		410,1,0,0,0,413,414,3,66,33,0,414,416,5,92,0,0,415,417,3,56,28,0,416,415,
		1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,420,5,8,0,0,419,421,3,50,25,
		0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,425,5,9,0,0,423,
		426,5,1,0,0,424,426,3,74,37,0,425,423,1,0,0,0,425,424,1,0,0,0,426,49,1,
		0,0,0,427,432,3,52,26,0,428,429,5,5,0,0,429,431,3,52,26,0,430,428,1,0,
		0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,51,1,0,0,0,434,
		432,1,0,0,0,435,436,3,66,33,0,436,438,5,92,0,0,437,439,5,12,0,0,438,437,
		1,0,0,0,438,439,1,0,0,0,439,53,1,0,0,0,440,441,7,0,0,0,441,55,1,0,0,0,
		442,443,5,13,0,0,443,448,3,58,29,0,444,445,5,5,0,0,445,447,3,58,29,0,446,
		444,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,1,
		0,0,0,450,448,1,0,0,0,451,452,5,14,0,0,452,57,1,0,0,0,453,454,5,92,0,0,
		454,455,5,3,0,0,455,460,3,66,33,0,456,457,5,5,0,0,457,459,3,66,33,0,458,
		456,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,59,1,0,
		0,0,462,460,1,0,0,0,463,464,5,13,0,0,464,469,3,66,33,0,465,466,5,5,0,0,
		466,468,3,66,33,0,467,465,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,
		470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,0,0,472,473,5,14,0,0,473,61,1,
		0,0,0,474,476,5,15,0,0,475,477,5,5,0,0,476,475,1,0,0,0,476,477,1,0,0,0,
		477,479,1,0,0,0,478,480,5,5,0,0,479,478,1,0,0,0,479,480,1,0,0,0,480,481,
		1,0,0,0,481,482,5,16,0,0,482,63,1,0,0,0,483,484,5,3,0,0,484,489,3,66,33,
		0,485,486,5,5,0,0,486,488,3,66,33,0,487,485,1,0,0,0,488,491,1,0,0,0,489,
		487,1,0,0,0,489,490,1,0,0,0,490,65,1,0,0,0,491,489,1,0,0,0,492,508,3,72,
		36,0,493,494,5,92,0,0,494,496,5,3,0,0,495,493,1,0,0,0,496,499,1,0,0,0,
		497,495,1,0,0,0,497,498,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,500,502,
		3,70,35,0,501,500,1,0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,505,5,92,
		0,0,504,506,3,60,30,0,505,504,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,
		507,492,1,0,0,0,507,497,1,0,0,0,508,510,1,0,0,0,509,511,3,62,31,0,510,
		509,1,0,0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,514,5,17,0,0,513,512,1,
		0,0,0,513,514,1,0,0,0,514,67,1,0,0,0,515,517,5,92,0,0,516,518,3,60,30,
		0,517,516,1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,521,3,62,31,0,520,
		519,1,0,0,0,520,521,1,0,0,0,521,69,1,0,0,0,522,523,3,68,34,0,523,524,5,
		2,0,0,524,526,1,0,0,0,525,522,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,
		527,528,1,0,0,0,528,71,1,0,0,0,529,527,1,0,0,0,530,531,7,1,0,0,531,73,
		1,0,0,0,532,536,5,4,0,0,533,535,3,76,38,0,534,533,1,0,0,0,535,538,1,0,
		0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,0,539,
		540,5,6,0,0,540,75,1,0,0,0,541,558,3,78,39,0,542,558,3,80,40,0,543,558,
		3,82,41,0,544,558,3,74,37,0,545,558,3,84,42,0,546,558,3,88,44,0,547,558,
		3,90,45,0,548,558,3,96,48,0,549,558,3,98,49,0,550,558,3,104,52,0,551,558,
		3,106,53,0,552,558,3,112,56,0,553,554,5,53,0,0,554,558,5,1,0,0,555,556,
		5,52,0,0,556,558,5,1,0,0,557,541,1,0,0,0,557,542,1,0,0,0,557,543,1,0,0,
		0,557,544,1,0,0,0,557,545,1,0,0,0,557,546,1,0,0,0,557,547,1,0,0,0,557,
		548,1,0,0,0,557,549,1,0,0,0,557,550,1,0,0,0,557,551,1,0,0,0,557,552,1,
		0,0,0,557,553,1,0,0,0,557,555,1,0,0,0,558,77,1,0,0,0,559,561,5,54,0,0,
		560,562,3,118,59,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,
		564,5,1,0,0,564,79,1,0,0,0,565,567,3,118,59,0,566,565,1,0,0,0,566,567,
		1,0,0,0,567,568,1,0,0,0,568,569,3,132,66,0,569,570,5,1,0,0,570,81,1,0,
		0,0,571,572,3,118,59,0,572,573,7,2,0,0,573,574,5,1,0,0,574,83,1,0,0,0,
		575,576,3,66,33,0,576,581,5,92,0,0,577,578,5,5,0,0,578,580,5,92,0,0,579,
		577,1,0,0,0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,585,1,
		0,0,0,583,581,1,0,0,0,584,586,3,86,43,0,585,584,1,0,0,0,585,586,1,0,0,
		0,586,587,1,0,0,0,587,588,5,1,0,0,588,85,1,0,0,0,589,602,5,10,0,0,590,
		603,3,118,59,0,591,592,5,4,0,0,592,597,3,118,59,0,593,594,5,5,0,0,594,
		596,3,118,59,0,595,593,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,
		1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,600,601,5,6,0,0,601,603,1,0,0,
		0,602,590,1,0,0,0,602,591,1,0,0,0,603,87,1,0,0,0,604,605,3,118,59,0,605,
		606,7,3,0,0,606,607,3,118,59,0,607,608,5,1,0,0,608,89,1,0,0,0,609,610,
		5,55,0,0,610,611,5,8,0,0,611,612,3,118,59,0,612,616,5,9,0,0,613,617,3,
		76,38,0,614,617,5,1,0,0,615,617,3,74,37,0,616,613,1,0,0,0,616,614,1,0,
		0,0,616,615,1,0,0,0,617,621,1,0,0,0,618,620,3,92,46,0,619,618,1,0,0,0,
		620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,625,1,0,0,0,623,621,
		1,0,0,0,624,626,3,94,47,0,625,624,1,0,0,0,625,626,1,0,0,0,626,91,1,0,0,
		0,627,628,5,57,0,0,628,629,5,8,0,0,629,630,3,118,59,0,630,634,5,9,0,0,
		631,635,3,76,38,0,632,635,5,1,0,0,633,635,3,74,37,0,634,631,1,0,0,0,634,
		632,1,0,0,0,634,633,1,0,0,0,635,93,1,0,0,0,636,640,5,56,0,0,637,641,3,
		76,38,0,638,641,5,1,0,0,639,641,3,74,37,0,640,637,1,0,0,0,640,638,1,0,
		0,0,640,639,1,0,0,0,641,95,1,0,0,0,642,643,5,60,0,0,643,644,5,8,0,0,644,
		645,3,66,33,0,645,646,5,92,0,0,646,647,5,61,0,0,647,648,3,118,59,0,648,
		654,5,9,0,0,649,651,3,76,38,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,
		1,0,0,0,652,655,5,1,0,0,653,655,3,74,37,0,654,650,1,0,0,0,654,653,1,0,
		0,0,655,97,1,0,0,0,656,657,5,62,0,0,657,666,5,8,0,0,658,663,3,100,50,0,
		659,660,5,5,0,0,660,662,3,100,50,0,661,659,1,0,0,0,662,665,1,0,0,0,663,
		661,1,0,0,0,663,664,1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,666,658,1,
		0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,670,5,1,0,0,669,671,3,118,59,
		0,670,669,1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,681,5,1,0,0,673,
		678,3,102,51,0,674,675,5,5,0,0,675,677,3,102,51,0,676,674,1,0,0,0,677,
		680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,682,1,0,0,0,680,678,1,
		0,0,0,681,673,1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,689,5,9,0,0,
		684,686,3,76,38,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,
		690,5,1,0,0,688,690,3,74,37,0,689,685,1,0,0,0,689,688,1,0,0,0,690,99,1,
		0,0,0,691,692,3,66,33,0,692,695,5,92,0,0,693,694,5,10,0,0,694,696,3,118,
		59,0,695,693,1,0,0,0,695,696,1,0,0,0,696,101,1,0,0,0,697,698,3,118,59,
		0,698,103,1,0,0,0,699,700,5,63,0,0,700,701,5,8,0,0,701,702,3,118,59,0,
		702,713,5,9,0,0,703,714,3,76,38,0,704,714,5,1,0,0,705,709,5,4,0,0,706,
		708,3,76,38,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,
		1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,712,714,5,6,0,0,713,703,1,0,0,
		0,713,704,1,0,0,0,713,705,1,0,0,0,714,105,1,0,0,0,715,716,5,64,0,0,716,
		717,5,8,0,0,717,718,3,118,59,0,718,719,5,9,0,0,719,724,5,4,0,0,720,723,
		3,108,54,0,721,723,3,110,55,0,722,720,1,0,0,0,722,721,1,0,0,0,723,726,
		1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,727,1,0,0,0,726,724,1,0,0,
		0,727,728,5,6,0,0,728,107,1,0,0,0,729,730,5,66,0,0,730,741,5,3,0,0,731,
		742,3,76,38,0,732,742,5,1,0,0,733,737,5,4,0,0,734,736,3,76,38,0,735,734,
		1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,
		0,739,737,1,0,0,0,740,742,5,6,0,0,741,731,1,0,0,0,741,732,1,0,0,0,741,
		733,1,0,0,0,742,109,1,0,0,0,743,744,5,65,0,0,744,745,3,118,59,0,745,756,
		5,3,0,0,746,757,3,76,38,0,747,757,5,1,0,0,748,752,5,4,0,0,749,751,3,76,
		38,0,750,749,1,0,0,0,751,754,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,
		755,1,0,0,0,754,752,1,0,0,0,755,757,5,6,0,0,756,746,1,0,0,0,756,747,1,
		0,0,0,756,748,1,0,0,0,757,111,1,0,0,0,758,768,5,67,0,0,759,769,3,76,38,
		0,760,764,5,4,0,0,761,763,3,76,38,0,762,761,1,0,0,0,763,766,1,0,0,0,764,
		762,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,769,5,
		6,0,0,768,759,1,0,0,0,768,760,1,0,0,0,769,771,1,0,0,0,770,772,3,114,57,
		0,771,770,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,775,3,116,58,0,774,
		773,1,0,0,0,774,775,1,0,0,0,775,113,1,0,0,0,776,781,5,68,0,0,777,778,5,
		8,0,0,778,779,3,66,33,0,779,780,5,9,0,0,780,782,1,0,0,0,781,777,1,0,0,
		0,781,782,1,0,0,0,782,792,1,0,0,0,783,793,3,76,38,0,784,788,5,4,0,0,785,
		787,3,76,38,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,
		1,0,0,0,789,791,1,0,0,0,790,788,1,0,0,0,791,793,5,6,0,0,792,783,1,0,0,
		0,792,784,1,0,0,0,793,115,1,0,0,0,794,804,5,69,0,0,795,805,3,76,38,0,796,
		800,5,4,0,0,797,799,3,76,38,0,798,797,1,0,0,0,799,802,1,0,0,0,800,798,
		1,0,0,0,800,801,1,0,0,0,801,803,1,0,0,0,802,800,1,0,0,0,803,805,5,6,0,
		0,804,795,1,0,0,0,804,796,1,0,0,0,805,117,1,0,0,0,806,807,6,59,-1,0,807,
		808,5,24,0,0,808,882,3,118,59,23,809,810,5,25,0,0,810,882,3,118,59,22,
		811,815,5,92,0,0,812,814,3,128,64,0,813,812,1,0,0,0,814,817,1,0,0,0,815,
		813,1,0,0,0,815,816,1,0,0,0,816,882,1,0,0,0,817,815,1,0,0,0,818,822,3,
		120,60,0,819,821,3,128,64,0,820,819,1,0,0,0,821,824,1,0,0,0,822,820,1,
		0,0,0,822,823,1,0,0,0,823,882,1,0,0,0,824,822,1,0,0,0,825,826,3,66,33,
		0,826,830,3,132,66,0,827,829,3,128,64,0,828,827,1,0,0,0,829,832,1,0,0,
		0,830,828,1,0,0,0,830,831,1,0,0,0,831,882,1,0,0,0,832,830,1,0,0,0,833,
		834,3,66,33,0,834,838,3,130,65,0,835,837,3,128,64,0,836,835,1,0,0,0,837,
		840,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,882,1,0,0,0,840,838,1,
		0,0,0,841,842,5,8,0,0,842,843,3,118,59,0,843,847,5,9,0,0,844,846,3,128,
		64,0,845,844,1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,
		882,1,0,0,0,849,847,1,0,0,0,850,882,3,122,61,0,851,882,3,124,62,0,852,
		856,3,126,63,0,853,855,3,128,64,0,854,853,1,0,0,0,855,858,1,0,0,0,856,
		854,1,0,0,0,856,857,1,0,0,0,857,882,1,0,0,0,858,856,1,0,0,0,859,863,3,
		136,68,0,860,862,3,128,64,0,861,860,1,0,0,0,862,865,1,0,0,0,863,861,1,
		0,0,0,863,864,1,0,0,0,864,882,1,0,0,0,865,863,1,0,0,0,866,870,5,73,0,0,
		867,869,3,128,64,0,868,867,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,870,
		871,1,0,0,0,871,882,1,0,0,0,872,870,1,0,0,0,873,877,5,74,0,0,874,876,3,
		128,64,0,875,874,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,
		0,878,882,1,0,0,0,879,877,1,0,0,0,880,882,3,66,33,0,881,806,1,0,0,0,881,
		809,1,0,0,0,881,811,1,0,0,0,881,818,1,0,0,0,881,825,1,0,0,0,881,833,1,
		0,0,0,881,841,1,0,0,0,881,850,1,0,0,0,881,851,1,0,0,0,881,852,1,0,0,0,
		881,859,1,0,0,0,881,866,1,0,0,0,881,873,1,0,0,0,881,880,1,0,0,0,882,925,
		1,0,0,0,883,884,10,21,0,0,884,885,7,4,0,0,885,924,3,118,59,22,886,887,
		10,20,0,0,887,888,7,5,0,0,888,924,3,118,59,21,889,890,10,19,0,0,890,891,
		7,6,0,0,891,924,3,118,59,20,892,893,10,18,0,0,893,894,7,7,0,0,894,924,
		3,118,59,19,895,896,10,17,0,0,896,897,5,34,0,0,897,924,3,118,59,18,898,
		899,10,16,0,0,899,900,5,35,0,0,900,924,3,118,59,17,901,902,10,15,0,0,902,
		903,5,36,0,0,903,904,3,118,59,0,904,905,5,3,0,0,905,906,3,118,59,16,906,
		924,1,0,0,0,907,908,10,12,0,0,908,912,3,132,66,0,909,911,3,128,64,0,910,
		909,1,0,0,0,911,914,1,0,0,0,912,910,1,0,0,0,912,913,1,0,0,0,913,924,1,
		0,0,0,914,912,1,0,0,0,915,916,10,10,0,0,916,920,3,130,65,0,917,919,3,128,
		64,0,918,917,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,
		924,1,0,0,0,922,920,1,0,0,0,923,883,1,0,0,0,923,886,1,0,0,0,923,889,1,
		0,0,0,923,892,1,0,0,0,923,895,1,0,0,0,923,898,1,0,0,0,923,901,1,0,0,0,
		923,907,1,0,0,0,923,915,1,0,0,0,924,927,1,0,0,0,925,923,1,0,0,0,925,926,
		1,0,0,0,926,119,1,0,0,0,927,925,1,0,0,0,928,942,5,95,0,0,929,931,5,93,
		0,0,930,932,7,8,0,0,931,930,1,0,0,0,931,932,1,0,0,0,932,942,1,0,0,0,933,
		935,5,94,0,0,934,936,7,9,0,0,935,934,1,0,0,0,935,936,1,0,0,0,936,942,1,
		0,0,0,937,942,5,96,0,0,938,942,5,58,0,0,939,942,5,59,0,0,940,942,5,91,
		0,0,941,928,1,0,0,0,941,929,1,0,0,0,941,933,1,0,0,0,941,937,1,0,0,0,941,
		938,1,0,0,0,941,939,1,0,0,0,941,940,1,0,0,0,942,121,1,0,0,0,943,944,5,
		44,0,0,944,945,5,8,0,0,945,946,3,66,33,0,946,947,5,9,0,0,947,123,1,0,0,
		0,948,949,5,70,0,0,949,950,5,8,0,0,950,951,3,66,33,0,951,952,5,9,0,0,952,
		125,1,0,0,0,953,954,7,10,0,0,954,955,3,136,68,0,955,127,1,0,0,0,956,957,
		5,15,0,0,957,962,3,118,59,0,958,959,5,5,0,0,959,961,3,118,59,0,960,958,
		1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,965,1,0,0,
		0,964,962,1,0,0,0,965,966,5,16,0,0,966,129,1,0,0,0,967,968,5,2,0,0,968,
		969,5,92,0,0,969,131,1,0,0,0,970,972,5,2,0,0,971,970,1,0,0,0,971,972,1,
		0,0,0,972,973,1,0,0,0,973,975,5,92,0,0,974,976,3,60,30,0,975,974,1,0,0,
		0,975,976,1,0,0,0,976,977,1,0,0,0,977,979,5,8,0,0,978,980,3,134,67,0,979,
		978,1,0,0,0,979,980,1,0,0,0,980,985,1,0,0,0,981,982,5,5,0,0,982,984,3,
		134,67,0,983,981,1,0,0,0,984,987,1,0,0,0,985,983,1,0,0,0,985,986,1,0,0,
		0,986,988,1,0,0,0,987,985,1,0,0,0,988,989,5,9,0,0,989,133,1,0,0,0,990,
		992,5,17,0,0,991,990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,994,3,
		118,59,0,994,135,1,0,0,0,995,996,3,66,33,0,996,1005,5,8,0,0,997,1002,3,
		118,59,0,998,999,5,5,0,0,999,1001,3,118,59,0,1000,998,1,0,0,0,1001,1004,
		1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1006,1,0,0,0,1004,1002,
		1,0,0,0,1005,997,1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,1008,
		5,9,0,0,1008,137,1,0,0,0,127,141,147,152,156,179,185,191,197,200,207,213,
		219,222,229,235,242,252,255,262,267,272,278,287,298,308,311,314,319,325,
		331,341,347,360,364,366,373,380,385,391,397,404,410,416,420,425,432,438,
		448,460,469,476,479,489,497,501,505,507,510,513,517,520,527,536,557,561,
		566,581,585,597,602,616,621,625,634,640,650,654,663,666,670,678,681,685,
		689,695,709,713,722,724,737,741,752,756,764,768,771,774,781,788,792,800,
		804,815,822,830,838,847,856,863,870,877,881,912,920,923,925,931,935,941,
		962,971,975,979,985,991,1002,1005
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
