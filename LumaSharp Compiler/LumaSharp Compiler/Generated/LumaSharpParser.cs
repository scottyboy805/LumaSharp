//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/LumaSharp.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LumaSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, IMPORT=42, NAMESPACE=43, TYPE=44, CONTRACT=45, 
		ENUM=46, GLOBAL=47, EXPORT=48, INTERNAL=49, SPECIALHIDDEN=50, AS=51, CONTINUE=52, 
		BREAK=53, RETURN=54, IF=55, ELSE=56, ELSEIF=57, TRUE=58, FALSE=59, FOREACH=60, 
		IN=61, FOR=62, WHILE=63, SELECT=64, MATCH=65, DEFAULT=66, TRY=67, CATCH=68, 
		FINALLY=69, SIZE=70, READ=71, WRITE=72, THIS=73, BASE=74, NEW=75, STACKNEW=76, 
		ANY=77, BOOL=78, CHAR=79, I8=80, U8=81, I16=82, U16=83, I32=84, U32=85, 
		I64=86, U64=87, FLOAT=88, DOUBLE=89, STRING=90, NULL=91, IDENTIFIER=92, 
		INT=93, DECIMAL=94, HEX=95, LITERAL=96, WS=97, COMMENT=98;
	public const int
		RULE_compilationUnit = 0, RULE_importElement = 1, RULE_rootElement = 2, 
		RULE_importStatement = 3, RULE_importAlias = 4, RULE_namespaceDeclaration = 5, 
		RULE_namespaceName = 6, RULE_typeDeclaration = 7, RULE_contractDeclaration = 8, 
		RULE_enumDeclaration = 9, RULE_enumBlock = 10, RULE_enumField = 11, RULE_rootMember = 12, 
		RULE_rootMemberBlock = 13, RULE_memberBlock = 14, RULE_memberDeclaration = 15, 
		RULE_attributeDeclaration = 16, RULE_fieldDeclaration = 17, RULE_fieldAssignment = 18, 
		RULE_accessorDeclaration = 19, RULE_accessorBody = 20, RULE_accessorRead = 21, 
		RULE_accessorWrite = 22, RULE_initializerDeclaration = 23, RULE_methodDeclaration = 24, 
		RULE_methodParameterList = 25, RULE_methodParameter = 26, RULE_accessModifier = 27, 
		RULE_genericParameterList = 28, RULE_genericParameter = 29, RULE_genericArguments = 30, 
		RULE_arrayParameters = 31, RULE_inheritParameters = 32, RULE_typeReference = 33, 
		RULE_primitiveType = 34, RULE_statementBlock = 35, RULE_statement = 36, 
		RULE_returnStatement = 37, RULE_methodInvokeStatement = 38, RULE_postfixStatement = 39, 
		RULE_localVariableStatement = 40, RULE_localVariableAssignment = 41, RULE_assignStatement = 42, 
		RULE_ifStatement = 43, RULE_elseifStatement = 44, RULE_elseStatement = 45, 
		RULE_foreachStatement = 46, RULE_forStatement = 47, RULE_forVariableStatement = 48, 
		RULE_forIncrementStatement = 49, RULE_whileStatement = 50, RULE_selectStatement = 51, 
		RULE_defaultStatement = 52, RULE_matchStatement = 53, RULE_tryStatement = 54, 
		RULE_catchStatement = 55, RULE_finallyStatement = 56, RULE_expression = 57, 
		RULE_endExpression = 58, RULE_typeExpression = 59, RULE_sizeExpression = 60, 
		RULE_newExpression = 61, RULE_indexExpression = 62, RULE_fieldAccessExpression = 63, 
		RULE_methodInvokeExpression = 64, RULE_methodArgument = 65, RULE_initializerInvokeExpression = 66;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importElement", "rootElement", "importStatement", 
		"importAlias", "namespaceDeclaration", "namespaceName", "typeDeclaration", 
		"contractDeclaration", "enumDeclaration", "enumBlock", "enumField", "rootMember", 
		"rootMemberBlock", "memberBlock", "memberDeclaration", "attributeDeclaration", 
		"fieldDeclaration", "fieldAssignment", "accessorDeclaration", "accessorBody", 
		"accessorRead", "accessorWrite", "initializerDeclaration", "methodDeclaration", 
		"methodParameterList", "methodParameter", "accessModifier", "genericParameterList", 
		"genericParameter", "genericArguments", "arrayParameters", "inheritParameters", 
		"typeReference", "primitiveType", "statementBlock", "statement", "returnStatement", 
		"methodInvokeStatement", "postfixStatement", "localVariableStatement", 
		"localVariableAssignment", "assignStatement", "ifStatement", "elseifStatement", 
		"elseStatement", "foreachStatement", "forStatement", "forVariableStatement", 
		"forIncrementStatement", "whileStatement", "selectStatement", "defaultStatement", 
		"matchStatement", "tryStatement", "catchStatement", "finallyStatement", 
		"expression", "endExpression", "typeExpression", "sizeExpression", "newExpression", 
		"indexExpression", "fieldAccessExpression", "methodInvokeExpression", 
		"methodArgument", "initializerInvokeExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "':'", "'{'", "','", "'}'", "'#'", "'('", "')'", "'='", 
		"'=>'", "'...'", "'<'", "'>'", "'['", "']'", "'&'", "'++'", "'--'", "'+='", 
		"'-='", "'/='", "'*='", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'>='", 
		"'<='", "'=='", "'!='", "'&&'", "'||'", "'?'", "'U'", "'L'", "'UL'", "'F'", 
		"'D'", "'import'", "'namespace'", "'type'", "'contract'", "'enum'", "'global'", 
		"'export'", "'internal'", "'hidden'", "'as'", "'continue'", "'break'", 
		"'return'", "'if'", "'else'", "'elseif'", "'true'", "'false'", "'foreach'", 
		"'in'", "'for'", "'while'", "'select'", "'match'", "'default'", "'try'", 
		"'catch'", "'finally'", "'size'", "'read'", "'write'", "'this'", "'base'", 
		"'new'", "'stacknew'", "'any'", "'bool'", "'char'", "'i8'", "'u8'", "'i16'", 
		"'u16'", "'i32'", "'u32'", "'i64'", "'u64'", "'float'", "'double'", "'string'", 
		"'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IMPORT", "NAMESPACE", "TYPE", "CONTRACT", 
		"ENUM", "GLOBAL", "EXPORT", "INTERNAL", "SPECIALHIDDEN", "AS", "CONTINUE", 
		"BREAK", "RETURN", "IF", "ELSE", "ELSEIF", "TRUE", "FALSE", "FOREACH", 
		"IN", "FOR", "WHILE", "SELECT", "MATCH", "DEFAULT", "TRY", "CATCH", "FINALLY", 
		"SIZE", "READ", "WRITE", "THIS", "BASE", "NEW", "STACKNEW", "ANY", "BOOL", 
		"CHAR", "I8", "U8", "I16", "U16", "I32", "U32", "I64", "U64", "FLOAT", 
		"DOUBLE", "STRING", "NULL", "IDENTIFIER", "INT", "DECIMAL", "HEX", "LITERAL", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LumaSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LumaSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LumaSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LumaSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext[] importElement() {
			return GetRuleContexts<ImportElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext importElement(int i) {
			return GetRuleContext<ImportElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext[] rootElement() {
			return GetRuleContexts<RootElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext rootElement(int i) {
			return GetRuleContext<RootElementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 134;
				importElement();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2243003720663168L) != 0)) {
				{
				{
				State = 140;
				rootElement();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext importAlias() {
			return GetRuleContext<ImportAliasContext>(0);
		}
		public ImportElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportElementContext importElement() {
		ImportElementContext _localctx = new ImportElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importElement);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				importStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				importAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember() {
			return GetRuleContext<RootMemberContext>(0);
		}
		public RootElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootElementContext rootElement() {
		RootElementContext _localctx = new RootElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_rootElement);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				namespaceDeclaration();
				}
				break;
			case T__6:
			case TYPE:
			case CONTRACT:
			case ENUM:
			case GLOBAL:
			case EXPORT:
			case INTERNAL:
			case SPECIALHIDDEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				rootMember();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(IMPORT);
			State = 155;
			namespaceName();
			State = 156;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(LumaSharpParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ImportAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasContext importAlias() {
		ImportAliasContext _localctx = new ImportAliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_importAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(IMPORT);
			State = 159;
			Match(IDENTIFIER);
			State = 160;
			Match(AS);
			State = 161;
			namespaceName();
			State = 162;
			Match(T__1);
			State = 163;
			typeReference();
			State = 164;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(LumaSharpParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberBlockContext rootMemberBlock() {
			return GetRuleContext<RootMemberBlockContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(NAMESPACE);
			State = 167;
			namespaceName();
			State = 168;
			rootMemberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(IDENTIFIER);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 171;
				Match(T__2);
				State = 172;
				Match(IDENTIFIER);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 178;
				attributeDeclaration();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 184;
				accessModifier();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(TYPE);
			State = 191;
			Match(IDENTIFIER);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 192;
				genericParameterList();
				}
			}

			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 195;
				inheritParameters();
				}
			}

			State = 198;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(LumaSharpParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public ContractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDeclarationContext contractDeclaration() {
		ContractDeclarationContext _localctx = new ContractDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_contractDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 200;
				attributeDeclaration();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 206;
				accessModifier();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212;
			Match(CONTRACT);
			State = 213;
			Match(IDENTIFIER);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 214;
				genericParameterList();
				}
			}

			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 217;
				inheritParameters();
				}
			}

			State = 220;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(LumaSharpParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 222;
				attributeDeclaration();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 228;
				accessModifier();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 234;
			Match(ENUM);
			State = 235;
			Match(IDENTIFIER);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 236;
				Match(T__2);
				State = 237;
				primitiveType();
				}
			}

			State = 240;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		public IToken lblock;
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_localctx.lblock = Match(T__3);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==IDENTIFIER) {
				{
				State = 243;
				enumField();
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 244;
					Match(T__4);
					State = 245;
					enumField();
					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 253;
			_localctx.lblock = Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 255;
				attributeDeclaration();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			Match(IDENTIFIER);
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 262;
				fieldAssignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public RootMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberContext rootMember() {
		RootMemberContext _localctx = new RootMemberContext(Context, State);
		EnterRule(_localctx, 24, RULE_rootMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 265;
				typeDeclaration();
				}
				break;
			case 2:
				{
				State = 266;
				contractDeclaration();
				}
				break;
			case 3:
				{
				State = 267;
				enumDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext[] rootMember() {
			return GetRuleContexts<RootMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember(int i) {
			return GetRuleContext<RootMemberContext>(i);
		}
		public RootMemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMemberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberBlockContext rootMemberBlock() {
		RootMemberBlockContext _localctx = new RootMemberBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_rootMemberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(T__3);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640960L) != 0)) {
				{
				{
				State = 271;
				rootMember();
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 277;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public MemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberBlockContext memberBlock() {
		MemberBlockContext _localctx = new MemberBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_memberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__3);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640960L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				{
				State = 280;
				memberDeclaration();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 286;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDeclarationContext accessorDeclaration() {
			return GetRuleContext<AccessorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberDeclaration);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288;
				typeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				contractDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 290;
				enumDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 291;
				fieldDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 292;
				accessorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 293;
				methodDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_attributeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__6);
			State = 297;
			typeReference();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 298;
				Match(T__7);
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
					{
					State = 299;
					expression(0);
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 300;
						Match(T__4);
						State = 301;
						expression(0);
						}
						}
						State = 306;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 309;
				Match(T__8);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 312;
				attributeDeclaration();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 318;
				accessModifier();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 324;
			typeReference();
			State = 325;
			Match(IDENTIFIER);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 326;
				fieldAssignment();
				}
			}

			State = 329;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAssignmentContext : ParserRuleContext {
		public IToken assign;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAssignmentContext fieldAssignment() {
		FieldAssignmentContext _localctx = new FieldAssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_localctx.assign = Match(T__9);
			State = 332;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		public AccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDeclarationContext accessorDeclaration() {
		AccessorDeclarationContext _localctx = new AccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_accessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 334;
				attributeDeclaration();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 340;
				accessModifier();
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 346;
			typeReference();
			State = 347;
			Match(IDENTIFIER);
			State = 348;
			accessorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorWriteContext accessorWrite() {
			return GetRuleContext<AccessorWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorReadContext accessorRead() {
			return GetRuleContext<AccessorReadContext>(0);
		}
		public AccessorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorBodyContext accessorBody() {
		AccessorBodyContext _localctx = new AccessorBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_accessorBody);
		int _la;
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				Match(T__10);
				State = 351;
				expression(0);
				State = 352;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 354;
				accessorWrite();
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 355;
					accessorRead();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358;
				accessorRead();
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 359;
					accessorWrite();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LumaSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorRead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorReadContext accessorRead() {
		AccessorReadContext _localctx = new AccessorReadContext(Context, State);
		EnterRule(_localctx, 42, RULE_accessorRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(T__10);
			State = 365;
			Match(READ);
			State = 366;
			Match(T__2);
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 367;
				statement();
				}
				break;
			case 2:
				{
				State = 368;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LumaSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorWriteContext accessorWrite() {
		AccessorWriteContext _localctx = new AccessorWriteContext(Context, State);
		EnterRule(_localctx, 44, RULE_accessorWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(T__10);
			State = 372;
			Match(WRITE);
			State = 373;
			Match(T__2);
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 374;
				statement();
				}
				break;
			case 2:
				{
				State = 375;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public InitializerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerDeclarationContext initializerDeclaration() {
		InitializerDeclarationContext _localctx = new InitializerDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_initializerDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 378;
				attributeDeclaration();
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 384;
				accessModifier();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 390;
			Match(THIS);
			State = 391;
			Match(T__7);
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 392;
				methodParameterList();
				}
			}

			State = 395;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 397;
				attributeDeclaration();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 403;
				accessModifier();
				}
				}
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 409;
			typeReference();
			State = 410;
			Match(IDENTIFIER);
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 411;
				genericParameterList();
				}
			}

			State = 414;
			Match(T__7);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 415;
				methodParameterList();
				}
			}

			State = 418;
			Match(T__8);
			State = 421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 419;
				Match(T__0);
				}
				break;
			case T__3:
				{
				State = 420;
				statementBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext[] methodParameter() {
			return GetRuleContexts<MethodParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext methodParameter(int i) {
			return GetRuleContext<MethodParameterContext>(i);
		}
		public MethodParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterListContext methodParameterList() {
		MethodParameterListContext _localctx = new MethodParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			methodParameter();
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 424;
				Match(T__4);
				State = 425;
				methodParameter();
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public MethodParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterContext methodParameter() {
		MethodParameterContext _localctx = new MethodParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			typeReference();
			State = 432;
			Match(IDENTIFIER);
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 433;
				Match(T__11);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(LumaSharpParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(LumaSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIALHIDDEN() { return GetToken(LumaSharpParser.SPECIALHIDDEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(LumaSharpParser.GLOBAL, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext[] genericParameter() {
			return GetRuleContexts<GenericParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext genericParameter(int i) {
			return GetRuleContext<GenericParameterContext>(i);
		}
		public GenericParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterListContext genericParameterList() {
		GenericParameterListContext _localctx = new GenericParameterListContext(Context, State);
		EnterRule(_localctx, 56, RULE_genericParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(T__12);
			State = 439;
			genericParameter();
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 440;
				Match(T__4);
				State = 441;
				genericParameter();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 447;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public GenericParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterContext genericParameter() {
		GenericParameterContext _localctx = new GenericParameterContext(Context, State);
		EnterRule(_localctx, 58, RULE_genericParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(IDENTIFIER);
			{
			State = 450;
			Match(T__2);
			State = 451;
			typeReference();
			State = 456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 452;
					Match(T__4);
					State = 453;
					typeReference();
					}
					} 
				}
				State = 458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentsContext : ParserRuleContext {
		public IToken lgen;
		public IToken rgen;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public GenericArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentsContext genericArguments() {
		GenericArgumentsContext _localctx = new GenericArgumentsContext(Context, State);
		EnterRule(_localctx, 60, RULE_genericArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			_localctx.lgen = Match(T__12);
			State = 460;
			typeReference();
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 461;
				Match(T__4);
				State = 462;
				typeReference();
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 468;
			_localctx.rgen = Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayParametersContext : ParserRuleContext {
		public ArrayParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayParametersContext arrayParameters() {
		ArrayParametersContext _localctx = new ArrayParametersContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrayParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(T__14);
			State = 472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 471;
				Match(T__4);
				}
				break;
			}
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 474;
				Match(T__4);
				}
			}

			State = 477;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public InheritParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritParametersContext inheritParameters() {
		InheritParametersContext _localctx = new InheritParametersContext(Context, State);
		EnterRule(_localctx, 64, RULE_inheritParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(T__2);
			State = 480;
			typeReference();
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 481;
				Match(T__4);
				State = 482;
				typeReference();
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case FLOAT:
			case DOUBLE:
			case STRING:
				{
				State = 488;
				primitiveType();
				}
				break;
			case IDENTIFIER:
				{
				{
				State = 489;
				Match(IDENTIFIER);
				State = 494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 490;
						Match(T__1);
						State = 491;
						Match(IDENTIFIER);
						}
						} 
					}
					State = 496;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				State = 498;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 497;
					genericArguments();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 502;
				arrayParameters();
				}
				break;
			}
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 505;
				Match(T__16);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(LumaSharpParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LumaSharpParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LumaSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(LumaSharpParser.I8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(LumaSharpParser.U8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(LumaSharpParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(LumaSharpParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(LumaSharpParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(LumaSharpParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(LumaSharpParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(LumaSharpParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LumaSharpParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LumaSharpParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LumaSharpParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 16383L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(T__3);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
				{
				{
				State = 511;
				statement();
				}
				}
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 517;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeStatementContext methodInvokeStatement() {
			return GetRuleContext<MethodInvokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixStatementContext postfixStatement() {
			return GetRuleContext<PostfixStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableStatementContext localVariableStatement() {
			return GetRuleContext<LocalVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LumaSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(LumaSharpParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_statement);
		try {
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 519;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520;
				methodInvokeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 521;
				postfixStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 522;
				statementBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 523;
				localVariableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 524;
				assignStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 525;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 526;
				foreachStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 527;
				forStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 528;
				whileStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 529;
				selectStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 530;
				tryStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 531;
				Match(BREAK);
				State = 532;
				Match(T__0);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 533;
				Match(CONTINUE);
				State = 534;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LumaSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(RETURN);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 538;
				expression(0);
				}
			}

			State = 541;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodInvokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeStatementContext methodInvokeStatement() {
		MethodInvokeStatementContext _localctx = new MethodInvokeStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_methodInvokeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 543;
				expression(0);
				}
				break;
			}
			State = 546;
			methodInvokeExpression();
			State = 547;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixStatementContext postfixStatement() {
		PostfixStatementContext _localctx = new PostfixStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_postfixStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			expression(0);
			State = 550;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 551;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableAssignmentContext localVariableAssignment() {
			return GetRuleContext<LocalVariableAssignmentContext>(0);
		}
		public LocalVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableStatementContext localVariableStatement() {
		LocalVariableStatementContext _localctx = new LocalVariableStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_localVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			typeReference();
			State = 554;
			Match(IDENTIFIER);
			State = 559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 555;
				Match(T__4);
				State = 556;
				Match(IDENTIFIER);
				}
				}
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 562;
				localVariableAssignment();
				}
			}

			State = 565;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableAssignmentContext : ParserRuleContext {
		public IToken assign;
		public IToken lblock;
		public IToken rblock;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LocalVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableAssignmentContext localVariableAssignment() {
		LocalVariableAssignmentContext _localctx = new LocalVariableAssignmentContext(Context, State);
		EnterRule(_localctx, 82, RULE_localVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			_localctx.assign = Match(T__9);
			State = 580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__23:
			case T__24:
			case TYPE:
			case TRUE:
			case FALSE:
			case SIZE:
			case THIS:
			case BASE:
			case NEW:
			case STACKNEW:
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case FLOAT:
			case DOUBLE:
			case STRING:
			case NULL:
			case IDENTIFIER:
			case INT:
			case DECIMAL:
			case HEX:
			case LITERAL:
				{
				State = 568;
				expression(0);
				}
				break;
			case T__3:
				{
				State = 569;
				_localctx.lblock = Match(T__3);
				State = 570;
				expression(0);
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 571;
					Match(T__4);
					State = 572;
					expression(0);
					}
					}
					State = 577;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 578;
				_localctx.rblock = Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public IToken assign;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_assignStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			expression(0);
			State = 583;
			_localctx.assign = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15729664L) != 0)) ) {
				_localctx.assign = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 584;
			expression(0);
			State = 585;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LumaSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext[] elseifStatement() {
			return GetRuleContexts<ElseifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement(int i) {
			return GetRuleContext<ElseifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			Match(IF);
			State = 588;
			_localctx.lparen = Match(T__7);
			State = 589;
			expression(0);
			State = 590;
			_localctx.rparen = Match(T__8);
			State = 594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 591;
				statement();
				}
				break;
			case 2:
				{
				State = 592;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 593;
				statementBlock();
				}
				break;
			}
			State = 599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 596;
					elseifStatement();
					}
					} 
				}
				State = 601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 602;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(LumaSharpParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStatementContext elseifStatement() {
		ElseifStatementContext _localctx = new ElseifStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_elseifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(ELSEIF);
			State = 606;
			_localctx.lparen = Match(T__7);
			State = 607;
			expression(0);
			State = 608;
			_localctx.rparen = Match(T__8);
			State = 612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 609;
				statement();
				}
				break;
			case 2:
				{
				State = 610;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 611;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LumaSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			Match(ELSE);
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 615;
				statement();
				}
				break;
			case 2:
				{
				State = 616;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 617;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(LumaSharpParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(LumaSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(FOREACH);
			State = 621;
			_localctx.lparen = Match(T__7);
			State = 622;
			typeReference();
			State = 623;
			Match(IDENTIFIER);
			State = 624;
			Match(IN);
			State = 625;
			expression(0);
			State = 626;
			_localctx.rparen = Match(T__8);
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					State = 627;
					statement();
					}
				}

				State = 630;
				_localctx.semi = Match(T__0);
				}
				break;
			case 2:
				{
				State = 631;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken semi;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LumaSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForVariableStatementContext[] forVariableStatement() {
			return GetRuleContexts<ForVariableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForVariableStatementContext forVariableStatement(int i) {
			return GetRuleContext<ForVariableStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIncrementStatementContext[] forIncrementStatement() {
			return GetRuleContexts<ForIncrementStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIncrementStatementContext forIncrementStatement(int i) {
			return GetRuleContext<ForIncrementStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(FOR);
			State = 635;
			_localctx.lparen = Match(T__7);
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 636;
				forVariableStatement();
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 637;
					Match(T__4);
					State = 638;
					forVariableStatement();
					}
					}
					State = 643;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 646;
			_localctx.semi = Match(T__0);
			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 647;
				expression(0);
				}
			}

			State = 650;
			_localctx.semi = Match(T__0);
			State = 659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 651;
				forIncrementStatement();
				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 652;
					Match(T__4);
					State = 653;
					forIncrementStatement();
					}
					}
					State = 658;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 661;
			_localctx.rparen = Match(T__8);
			State = 667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					State = 662;
					statement();
					}
				}

				State = 665;
				_localctx.semi = Match(T__0);
				}
				break;
			case 2:
				{
				State = 666;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForVariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForVariableStatementContext forVariableStatement() {
		ForVariableStatementContext _localctx = new ForVariableStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_forVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			typeReference();
			State = 670;
			Match(IDENTIFIER);
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 671;
				Match(T__9);
				State = 672;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIncrementStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIncrementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIncrementStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIncrementStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIncrementStatementContext forIncrementStatement() {
		ForIncrementStatementContext _localctx = new ForIncrementStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_forIncrementStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LumaSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(WHILE);
			State = 678;
			Match(T__7);
			State = 679;
			expression(0);
			State = 680;
			Match(T__8);
			State = 691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 681;
				statement();
				}
				break;
			case 2:
				{
				State = 682;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 683;
				Match(T__3);
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 684;
					statement();
					}
					}
					State = 689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 690;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(LumaSharpParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext[] defaultStatement() {
			return GetRuleContexts<DefaultStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext defaultStatement(int i) {
			return GetRuleContext<DefaultStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext[] matchStatement() {
			return GetRuleContexts<MatchStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext matchStatement(int i) {
			return GetRuleContext<MatchStatementContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			Match(SELECT);
			State = 694;
			Match(T__7);
			State = 695;
			expression(0);
			State = 696;
			Match(T__8);
			State = 697;
			Match(T__3);
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH || _la==DEFAULT) {
				{
				State = 700;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 698;
					defaultStatement();
					}
					break;
				case MATCH:
					{
					State = 699;
					matchStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 705;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LumaSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStatementContext defaultStatement() {
		DefaultStatementContext _localctx = new DefaultStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_defaultStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			Match(DEFAULT);
			State = 708;
			Match(T__2);
			State = 719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 709;
				statement();
				}
				break;
			case 2:
				{
				State = 710;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 711;
				Match(T__3);
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 712;
					statement();
					}
					}
					State = 717;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 718;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(LumaSharpParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchStatementContext matchStatement() {
		MatchStatementContext _localctx = new MatchStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_matchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(MATCH);
			State = 722;
			expression(0);
			State = 723;
			Match(T__2);
			State = 734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 724;
				statement();
				}
				break;
			case 2:
				{
				State = 725;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 726;
				Match(T__3);
				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 727;
					statement();
					}
					}
					State = 732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 733;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(LumaSharpParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchStatementContext catchStatement() {
			return GetRuleContext<CatchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyStatementContext finallyStatement() {
			return GetRuleContext<FinallyStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			Match(TRY);
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 737;
				statement();
				}
				break;
			case 2:
				{
				State = 738;
				Match(T__3);
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 739;
					statement();
					}
					}
					State = 744;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 745;
				Match(T__5);
				}
				break;
			}
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 748;
				catchStatement();
				}
				break;
			}
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 751;
				finallyStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(LumaSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public CatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchStatementContext catchStatement() {
		CatchStatementContext _localctx = new CatchStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_catchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(CATCH);
			State = 759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 755;
				Match(T__7);
				State = 756;
				typeReference();
				State = 757;
				Match(T__8);
				}
				break;
			}
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 761;
				statement();
				}
				break;
			case 2:
				{
				State = 762;
				Match(T__3);
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 763;
					statement();
					}
					}
					State = 768;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 769;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(LumaSharpParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FinallyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyStatementContext finallyStatement() {
		FinallyStatementContext _localctx = new FinallyStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_finallyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(FINALLY);
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 773;
				statement();
				}
				break;
			case 2:
				{
				State = 774;
				Match(T__3);
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718471916L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 775;
					statement();
					}
					}
					State = 780;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 781;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken unary;
		public IToken lparen;
		public IToken binary;
		public IToken ternary;
		public IToken alternate;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext[] indexExpression() {
			return GetRuleContexts<IndexExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression(int i) {
			return GetRuleContext<IndexExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExpressionContext endExpression() {
			return GetRuleContext<EndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessExpressionContext fieldAccessExpression() {
			return GetRuleContext<FieldAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionContext typeExpression() {
			return GetRuleContext<TypeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeExpressionContext sizeExpression() {
			return GetRuleContext<SizeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerInvokeExpressionContext initializerInvokeExpression() {
			return GetRuleContext<InitializerInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(LumaSharpParser.BASE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 785;
				_localctx.unary = Match(T__23);
				State = 786;
				expression(23);
				}
				break;
			case 2:
				{
				State = 787;
				_localctx.unary = Match(T__24);
				State = 788;
				expression(22);
				}
				break;
			case 3:
				{
				State = 789;
				Match(IDENTIFIER);
				State = 793;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 790;
						indexExpression();
						}
						} 
					}
					State = 795;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
				}
				}
				break;
			case 4:
				{
				State = 796;
				endExpression();
				State = 800;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 797;
						indexExpression();
						}
						} 
					}
					State = 802;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
				}
				}
				break;
			case 5:
				{
				State = 803;
				typeReference();
				State = 804;
				methodInvokeExpression();
				State = 808;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 805;
						indexExpression();
						}
						} 
					}
					State = 810;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
				}
				}
				break;
			case 6:
				{
				State = 811;
				typeReference();
				State = 812;
				fieldAccessExpression();
				State = 816;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 813;
						indexExpression();
						}
						} 
					}
					State = 818;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				}
				}
				break;
			case 7:
				{
				State = 819;
				_localctx.lparen = Match(T__7);
				State = 820;
				expression(0);
				State = 821;
				_localctx.lparen = Match(T__8);
				State = 825;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 822;
						indexExpression();
						}
						} 
					}
					State = 827;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				}
				}
				break;
			case 8:
				{
				State = 828;
				typeExpression();
				}
				break;
			case 9:
				{
				State = 829;
				sizeExpression();
				}
				break;
			case 10:
				{
				State = 830;
				newExpression();
				State = 834;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 831;
						indexExpression();
						}
						} 
					}
					State = 836;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				}
				}
				break;
			case 11:
				{
				State = 837;
				initializerInvokeExpression();
				State = 841;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 838;
						indexExpression();
						}
						} 
					}
					State = 843;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				}
				}
				break;
			case 12:
				{
				State = 844;
				Match(THIS);
				State = 848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 845;
						indexExpression();
						}
						} 
					}
					State = 850;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				}
				}
				break;
			case 13:
				{
				State = 851;
				Match(BASE);
				State = 855;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 852;
						indexExpression();
						}
						} 
					}
					State = 857;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				}
				}
				break;
			case 14:
				{
				State = 858;
				typeReference();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 903;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 901;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 861;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 862;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 863;
						expression(22);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 864;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 865;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__28) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 866;
						expression(21);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 867;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 868;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3221250048L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 869;
						expression(20);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 870;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 871;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 872;
						expression(19);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 873;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 874;
						_localctx.binary = Match(T__33);
						State = 875;
						expression(18);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 876;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 877;
						_localctx.binary = Match(T__34);
						State = 878;
						expression(17);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 879;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 880;
						_localctx.ternary = Match(T__35);
						State = 881;
						expression(0);
						State = 882;
						_localctx.alternate = Match(T__2);
						State = 883;
						expression(16);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 885;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 886;
						methodInvokeExpression();
						State = 890;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 887;
								indexExpression();
								}
								} 
							}
							State = 892;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
						}
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 893;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 894;
						fieldAccessExpression();
						State = 898;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 895;
								indexExpression();
								}
								} 
							}
							State = 900;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
						}
						}
						break;
					}
					} 
				}
				State = 905;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EndExpressionContext : ParserRuleContext {
		public IToken decorator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(LumaSharpParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LumaSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LumaSharpParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(LumaSharpParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(LumaSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(LumaSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(LumaSharpParser.NULL, 0); }
		public EndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExpressionContext endExpression() {
		EndExpressionContext _localctx = new EndExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_endExpression);
		int _la;
		try {
			State = 919;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 906;
				Match(HEX);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 907;
				Match(INT);
				State = 909;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 908;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 911;
				Match(DECIMAL);
				State = 913;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 912;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__39 || _la==T__40) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 915;
				Match(LITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 916;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 917;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 918;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExpressionContext typeExpression() {
		TypeExpressionContext _localctx = new TypeExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_typeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			Match(TYPE);
			State = 922;
			_localctx.lparen = Match(T__7);
			State = 923;
			typeReference();
			State = 924;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(LumaSharpParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public SizeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeExpressionContext sizeExpression() {
		SizeExpressionContext _localctx = new SizeExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_sizeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926;
			Match(SIZE);
			State = 927;
			_localctx.lparen = Match(T__7);
			State = 928;
			typeReference();
			State = 929;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerInvokeExpressionContext initializerInvokeExpression() {
			return GetRuleContext<InitializerInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(LumaSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKNEW() { return GetToken(LumaSharpParser.STACKNEW, 0); }
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_newExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==STACKNEW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 932;
			initializerInvokeExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		public IToken larray;
		public IToken rarray;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_indexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			_localctx.larray = Match(T__14);
			State = 935;
			expression(0);
			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 936;
				Match(T__4);
				State = 937;
				expression(0);
				}
				}
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 943;
			_localctx.rarray = Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessExpressionContext : ParserRuleContext {
		public IToken dot;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public FieldAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessExpressionContext fieldAccessExpression() {
		FieldAccessExpressionContext _localctx = new FieldAccessExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_fieldAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			_localctx.dot = Match(T__1);
			State = 946;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeExpressionContext : ParserRuleContext {
		public IToken dot;
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext[] methodArgument() {
			return GetRuleContexts<MethodArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext methodArgument(int i) {
			return GetRuleContext<MethodArgumentContext>(i);
		}
		public MethodInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeExpressionContext methodInvokeExpression() {
		MethodInvokeExpressionContext _localctx = new MethodInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_methodInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 948;
				_localctx.dot = Match(T__1);
				}
			}

			State = 951;
			Match(IDENTIFIER);
			State = 953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 952;
				genericArguments();
				}
			}

			State = 955;
			_localctx.lparen = Match(T__7);
			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691642624L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 956;
				methodArgument();
				}
			}

			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 959;
				Match(T__4);
				State = 960;
				methodArgument();
				}
				}
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 966;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 130, RULE_methodArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 968;
				Match(T__16);
				}
			}

			State = 971;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerInvokeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InitializerInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerInvokeExpressionContext initializerInvokeExpression() {
		InitializerInvokeExpressionContext _localctx = new InitializerInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_initializerInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			typeReference();
			State = 974;
			_localctx.lparen = Match(T__7);
			State = 983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511552L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 975;
				expression(0);
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 976;
					Match(T__4);
					State = 977;
					expression(0);
					}
					}
					State = 982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 985;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 57: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 21);
		case 1: return Precpred(Context, 20);
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,98,988,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,1,0,5,0,136,8,0,10,0,12,0,139,9,0,1,0,5,
		0,142,8,0,10,0,12,0,145,9,0,1,1,1,1,3,1,149,8,1,1,2,1,2,3,2,153,8,2,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,
		1,6,5,6,174,8,6,10,6,12,6,177,9,6,1,7,5,7,180,8,7,10,7,12,7,183,9,7,1,
		7,5,7,186,8,7,10,7,12,7,189,9,7,1,7,1,7,1,7,3,7,194,8,7,1,7,3,7,197,8,
		7,1,7,1,7,1,8,5,8,202,8,8,10,8,12,8,205,9,8,1,8,5,8,208,8,8,10,8,12,8,
		211,9,8,1,8,1,8,1,8,3,8,216,8,8,1,8,3,8,219,8,8,1,8,1,8,1,9,5,9,224,8,
		9,10,9,12,9,227,9,9,1,9,5,9,230,8,9,10,9,12,9,233,9,9,1,9,1,9,1,9,1,9,
		3,9,239,8,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,247,8,10,10,10,12,10,250,
		9,10,3,10,252,8,10,1,10,1,10,1,11,5,11,257,8,11,10,11,12,11,260,9,11,1,
		11,1,11,3,11,264,8,11,1,12,1,12,1,12,3,12,269,8,12,1,13,1,13,5,13,273,
		8,13,10,13,12,13,276,9,13,1,13,1,13,1,14,1,14,5,14,282,8,14,10,14,12,14,
		285,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,295,8,15,1,16,1,
		16,1,16,1,16,1,16,1,16,5,16,303,8,16,10,16,12,16,306,9,16,3,16,308,8,16,
		1,16,3,16,311,8,16,1,17,5,17,314,8,17,10,17,12,17,317,9,17,1,17,5,17,320,
		8,17,10,17,12,17,323,9,17,1,17,1,17,1,17,3,17,328,8,17,1,17,1,17,1,18,
		1,18,1,18,1,19,5,19,336,8,19,10,19,12,19,339,9,19,1,19,5,19,342,8,19,10,
		19,12,19,345,9,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,
		20,357,8,20,1,20,1,20,3,20,361,8,20,3,20,363,8,20,1,21,1,21,1,21,1,21,
		1,21,3,21,370,8,21,1,22,1,22,1,22,1,22,1,22,3,22,377,8,22,1,23,5,23,380,
		8,23,10,23,12,23,383,9,23,1,23,5,23,386,8,23,10,23,12,23,389,9,23,1,23,
		1,23,1,23,3,23,394,8,23,1,23,1,23,1,24,5,24,399,8,24,10,24,12,24,402,9,
		24,1,24,5,24,405,8,24,10,24,12,24,408,9,24,1,24,1,24,1,24,3,24,413,8,24,
		1,24,1,24,3,24,417,8,24,1,24,1,24,1,24,3,24,422,8,24,1,25,1,25,1,25,5,
		25,427,8,25,10,25,12,25,430,9,25,1,26,1,26,1,26,3,26,435,8,26,1,27,1,27,
		1,28,1,28,1,28,1,28,5,28,443,8,28,10,28,12,28,446,9,28,1,28,1,28,1,29,
		1,29,1,29,1,29,1,29,5,29,455,8,29,10,29,12,29,458,9,29,1,30,1,30,1,30,
		1,30,5,30,464,8,30,10,30,12,30,467,9,30,1,30,1,30,1,31,1,31,3,31,473,8,
		31,1,31,3,31,476,8,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,484,8,32,10,32,
		12,32,487,9,32,1,33,1,33,1,33,1,33,5,33,493,8,33,10,33,12,33,496,9,33,
		1,33,3,33,499,8,33,3,33,501,8,33,1,33,3,33,504,8,33,1,33,3,33,507,8,33,
		1,34,1,34,1,35,1,35,5,35,513,8,35,10,35,12,35,516,9,35,1,35,1,35,1,36,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		1,36,3,36,536,8,36,1,37,1,37,3,37,540,8,37,1,37,1,37,1,38,3,38,545,8,38,
		1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,558,8,40,10,
		40,12,40,561,9,40,1,40,3,40,564,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
		1,41,5,41,574,8,41,10,41,12,41,577,9,41,1,41,1,41,3,41,581,8,41,1,42,1,
		42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,595,8,43,1,43,
		5,43,598,8,43,10,43,12,43,601,9,43,1,43,3,43,604,8,43,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,3,44,613,8,44,1,45,1,45,1,45,1,45,3,45,619,8,45,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,629,8,46,1,46,1,46,3,46,633,8,
		46,1,47,1,47,1,47,1,47,1,47,5,47,640,8,47,10,47,12,47,643,9,47,3,47,645,
		8,47,1,47,1,47,3,47,649,8,47,1,47,1,47,1,47,1,47,5,47,655,8,47,10,47,12,
		47,658,9,47,3,47,660,8,47,1,47,1,47,3,47,664,8,47,1,47,1,47,3,47,668,8,
		47,1,48,1,48,1,48,1,48,3,48,674,8,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,5,50,686,8,50,10,50,12,50,689,9,50,1,50,3,50,692,8,50,1,
		51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,701,8,51,10,51,12,51,704,9,51,1,
		51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,5,52,714,8,52,10,52,12,52,717,9,
		52,1,52,3,52,720,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,729,8,53,
		10,53,12,53,732,9,53,1,53,3,53,735,8,53,1,54,1,54,1,54,1,54,5,54,741,8,
		54,10,54,12,54,744,9,54,1,54,3,54,747,8,54,1,54,3,54,750,8,54,1,54,3,54,
		753,8,54,1,55,1,55,1,55,1,55,1,55,3,55,760,8,55,1,55,1,55,1,55,5,55,765,
		8,55,10,55,12,55,768,9,55,1,55,3,55,771,8,55,1,56,1,56,1,56,1,56,5,56,
		777,8,56,10,56,12,56,780,9,56,1,56,3,56,783,8,56,1,57,1,57,1,57,1,57,1,
		57,1,57,1,57,5,57,792,8,57,10,57,12,57,795,9,57,1,57,1,57,5,57,799,8,57,
		10,57,12,57,802,9,57,1,57,1,57,1,57,5,57,807,8,57,10,57,12,57,810,9,57,
		1,57,1,57,1,57,5,57,815,8,57,10,57,12,57,818,9,57,1,57,1,57,1,57,1,57,
		5,57,824,8,57,10,57,12,57,827,9,57,1,57,1,57,1,57,1,57,5,57,833,8,57,10,
		57,12,57,836,9,57,1,57,1,57,5,57,840,8,57,10,57,12,57,843,9,57,1,57,1,
		57,5,57,847,8,57,10,57,12,57,850,9,57,1,57,1,57,5,57,854,8,57,10,57,12,
		57,857,9,57,1,57,3,57,860,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,1,57,5,57,889,8,57,10,57,12,57,892,9,57,1,57,1,57,
		1,57,5,57,897,8,57,10,57,12,57,900,9,57,5,57,902,8,57,10,57,12,57,905,
		9,57,1,58,1,58,1,58,3,58,910,8,58,1,58,1,58,3,58,914,8,58,1,58,1,58,1,
		58,1,58,3,58,920,8,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,
		1,61,1,61,1,61,1,62,1,62,1,62,1,62,5,62,939,8,62,10,62,12,62,942,9,62,
		1,62,1,62,1,63,1,63,1,63,1,64,3,64,950,8,64,1,64,1,64,3,64,954,8,64,1,
		64,1,64,3,64,958,8,64,1,64,1,64,5,64,962,8,64,10,64,12,64,965,9,64,1,64,
		1,64,1,65,3,65,970,8,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,979,8,
		66,10,66,12,66,982,9,66,3,66,984,8,66,1,66,1,66,1,66,0,1,114,67,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,0,11,1,
		0,47,50,1,0,77,90,1,0,18,19,2,0,10,10,20,23,1,0,26,28,2,0,24,24,29,29,
		2,0,13,14,30,31,1,0,32,33,1,0,37,39,1,0,40,41,1,0,75,76,1091,0,137,1,0,
		0,0,2,148,1,0,0,0,4,152,1,0,0,0,6,154,1,0,0,0,8,158,1,0,0,0,10,166,1,0,
		0,0,12,170,1,0,0,0,14,181,1,0,0,0,16,203,1,0,0,0,18,225,1,0,0,0,20,242,
		1,0,0,0,22,258,1,0,0,0,24,268,1,0,0,0,26,270,1,0,0,0,28,279,1,0,0,0,30,
		294,1,0,0,0,32,296,1,0,0,0,34,315,1,0,0,0,36,331,1,0,0,0,38,337,1,0,0,
		0,40,362,1,0,0,0,42,364,1,0,0,0,44,371,1,0,0,0,46,381,1,0,0,0,48,400,1,
		0,0,0,50,423,1,0,0,0,52,431,1,0,0,0,54,436,1,0,0,0,56,438,1,0,0,0,58,449,
		1,0,0,0,60,459,1,0,0,0,62,470,1,0,0,0,64,479,1,0,0,0,66,500,1,0,0,0,68,
		508,1,0,0,0,70,510,1,0,0,0,72,535,1,0,0,0,74,537,1,0,0,0,76,544,1,0,0,
		0,78,549,1,0,0,0,80,553,1,0,0,0,82,567,1,0,0,0,84,582,1,0,0,0,86,587,1,
		0,0,0,88,605,1,0,0,0,90,614,1,0,0,0,92,620,1,0,0,0,94,634,1,0,0,0,96,669,
		1,0,0,0,98,675,1,0,0,0,100,677,1,0,0,0,102,693,1,0,0,0,104,707,1,0,0,0,
		106,721,1,0,0,0,108,736,1,0,0,0,110,754,1,0,0,0,112,772,1,0,0,0,114,859,
		1,0,0,0,116,919,1,0,0,0,118,921,1,0,0,0,120,926,1,0,0,0,122,931,1,0,0,
		0,124,934,1,0,0,0,126,945,1,0,0,0,128,949,1,0,0,0,130,969,1,0,0,0,132,
		973,1,0,0,0,134,136,3,2,1,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,
		0,0,0,137,138,1,0,0,0,138,143,1,0,0,0,139,137,1,0,0,0,140,142,3,4,2,0,
		141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,1,
		1,0,0,0,145,143,1,0,0,0,146,149,3,6,3,0,147,149,3,8,4,0,148,146,1,0,0,
		0,148,147,1,0,0,0,149,3,1,0,0,0,150,153,3,10,5,0,151,153,3,24,12,0,152,
		150,1,0,0,0,152,151,1,0,0,0,153,5,1,0,0,0,154,155,5,42,0,0,155,156,3,12,
		6,0,156,157,5,1,0,0,157,7,1,0,0,0,158,159,5,42,0,0,159,160,5,92,0,0,160,
		161,5,51,0,0,161,162,3,12,6,0,162,163,5,2,0,0,163,164,3,66,33,0,164,165,
		5,1,0,0,165,9,1,0,0,0,166,167,5,43,0,0,167,168,3,12,6,0,168,169,3,26,13,
		0,169,11,1,0,0,0,170,175,5,92,0,0,171,172,5,3,0,0,172,174,5,92,0,0,173,
		171,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,13,1,0,
		0,0,177,175,1,0,0,0,178,180,3,32,16,0,179,178,1,0,0,0,180,183,1,0,0,0,
		181,179,1,0,0,0,181,182,1,0,0,0,182,187,1,0,0,0,183,181,1,0,0,0,184,186,
		3,54,27,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,
		0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,191,5,44,0,0,191,193,5,92,0,0,
		192,194,3,56,28,0,193,192,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,
		197,3,64,32,0,196,195,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,199,
		3,28,14,0,199,15,1,0,0,0,200,202,3,32,16,0,201,200,1,0,0,0,202,205,1,0,
		0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,209,1,0,0,0,205,203,1,0,0,0,206,
		208,3,54,27,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,
		1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,5,45,0,0,213,215,5,92,
		0,0,214,216,3,56,28,0,215,214,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,
		217,219,3,64,32,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,
		221,3,28,14,0,221,17,1,0,0,0,222,224,3,32,16,0,223,222,1,0,0,0,224,227,
		1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,231,1,0,0,0,227,225,1,0,0,
		0,228,230,3,54,27,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,
		232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,46,0,0,235,238,5,
		92,0,0,236,237,5,3,0,0,237,239,3,68,34,0,238,236,1,0,0,0,238,239,1,0,0,
		0,239,240,1,0,0,0,240,241,3,20,10,0,241,19,1,0,0,0,242,251,5,4,0,0,243,
		248,3,22,11,0,244,245,5,5,0,0,245,247,3,22,11,0,246,244,1,0,0,0,247,250,
		1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,
		0,251,243,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,5,6,0,0,254,
		21,1,0,0,0,255,257,3,32,16,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,
		0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,263,5,92,0,0,
		262,264,3,36,18,0,263,262,1,0,0,0,263,264,1,0,0,0,264,23,1,0,0,0,265,269,
		3,14,7,0,266,269,3,16,8,0,267,269,3,18,9,0,268,265,1,0,0,0,268,266,1,0,
		0,0,268,267,1,0,0,0,269,25,1,0,0,0,270,274,5,4,0,0,271,273,3,24,12,0,272,
		271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,
		0,0,0,276,274,1,0,0,0,277,278,5,6,0,0,278,27,1,0,0,0,279,283,5,4,0,0,280,
		282,3,30,15,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,
		1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,5,6,0,0,287,29,1,0,0,0,
		288,295,3,14,7,0,289,295,3,16,8,0,290,295,3,18,9,0,291,295,3,34,17,0,292,
		295,3,38,19,0,293,295,3,48,24,0,294,288,1,0,0,0,294,289,1,0,0,0,294,290,
		1,0,0,0,294,291,1,0,0,0,294,292,1,0,0,0,294,293,1,0,0,0,295,31,1,0,0,0,
		296,297,5,7,0,0,297,310,3,66,33,0,298,307,5,8,0,0,299,304,3,114,57,0,300,
		301,5,5,0,0,301,303,3,114,57,0,302,300,1,0,0,0,303,306,1,0,0,0,304,302,
		1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,307,299,1,0,0,
		0,307,308,1,0,0,0,308,309,1,0,0,0,309,311,5,9,0,0,310,298,1,0,0,0,310,
		311,1,0,0,0,311,33,1,0,0,0,312,314,3,32,16,0,313,312,1,0,0,0,314,317,1,
		0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,321,1,0,0,0,317,315,1,0,0,0,
		318,320,3,54,27,0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,
		322,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,3,66,33,0,325,327,
		5,92,0,0,326,328,3,36,18,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,
		0,0,329,330,5,1,0,0,330,35,1,0,0,0,331,332,5,10,0,0,332,333,3,114,57,0,
		333,37,1,0,0,0,334,336,3,32,16,0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,
		1,0,0,0,337,338,1,0,0,0,338,343,1,0,0,0,339,337,1,0,0,0,340,342,3,54,27,
		0,341,340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
		346,1,0,0,0,345,343,1,0,0,0,346,347,3,66,33,0,347,348,5,92,0,0,348,349,
		3,40,20,0,349,39,1,0,0,0,350,351,5,11,0,0,351,352,3,114,57,0,352,353,5,
		1,0,0,353,363,1,0,0,0,354,356,3,44,22,0,355,357,3,42,21,0,356,355,1,0,
		0,0,356,357,1,0,0,0,357,363,1,0,0,0,358,360,3,42,21,0,359,361,3,44,22,
		0,360,359,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,350,1,0,0,0,362,
		354,1,0,0,0,362,358,1,0,0,0,363,41,1,0,0,0,364,365,5,11,0,0,365,366,5,
		71,0,0,366,369,5,3,0,0,367,370,3,72,36,0,368,370,3,70,35,0,369,367,1,0,
		0,0,369,368,1,0,0,0,370,43,1,0,0,0,371,372,5,11,0,0,372,373,5,72,0,0,373,
		376,5,3,0,0,374,377,3,72,36,0,375,377,3,70,35,0,376,374,1,0,0,0,376,375,
		1,0,0,0,377,45,1,0,0,0,378,380,3,32,16,0,379,378,1,0,0,0,380,383,1,0,0,
		0,381,379,1,0,0,0,381,382,1,0,0,0,382,387,1,0,0,0,383,381,1,0,0,0,384,
		386,3,54,27,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,
		1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,391,5,73,0,0,391,393,5,8,0,
		0,392,394,3,50,25,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,
		396,5,9,0,0,396,47,1,0,0,0,397,399,3,32,16,0,398,397,1,0,0,0,399,402,1,
		0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,406,1,0,0,0,402,400,1,0,0,0,
		403,405,3,54,27,0,404,403,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,
		407,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,410,3,66,33,0,410,412,
		5,92,0,0,411,413,3,56,28,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,
		0,0,414,416,5,8,0,0,415,417,3,50,25,0,416,415,1,0,0,0,416,417,1,0,0,0,
		417,418,1,0,0,0,418,421,5,9,0,0,419,422,5,1,0,0,420,422,3,70,35,0,421,
		419,1,0,0,0,421,420,1,0,0,0,422,49,1,0,0,0,423,428,3,52,26,0,424,425,5,
		5,0,0,425,427,3,52,26,0,426,424,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,
		0,428,429,1,0,0,0,429,51,1,0,0,0,430,428,1,0,0,0,431,432,3,66,33,0,432,
		434,5,92,0,0,433,435,5,12,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,53,1,
		0,0,0,436,437,7,0,0,0,437,55,1,0,0,0,438,439,5,13,0,0,439,444,3,58,29,
		0,440,441,5,5,0,0,441,443,3,58,29,0,442,440,1,0,0,0,443,446,1,0,0,0,444,
		442,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,448,5,
		14,0,0,448,57,1,0,0,0,449,450,5,92,0,0,450,451,5,3,0,0,451,456,3,66,33,
		0,452,453,5,5,0,0,453,455,3,66,33,0,454,452,1,0,0,0,455,458,1,0,0,0,456,
		454,1,0,0,0,456,457,1,0,0,0,457,59,1,0,0,0,458,456,1,0,0,0,459,460,5,13,
		0,0,460,465,3,66,33,0,461,462,5,5,0,0,462,464,3,66,33,0,463,461,1,0,0,
		0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,
		465,1,0,0,0,468,469,5,14,0,0,469,61,1,0,0,0,470,472,5,15,0,0,471,473,5,
		5,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,476,5,5,0,0,
		475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,478,5,16,0,0,478,63,
		1,0,0,0,479,480,5,3,0,0,480,485,3,66,33,0,481,482,5,5,0,0,482,484,3,66,
		33,0,483,481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,
		65,1,0,0,0,487,485,1,0,0,0,488,501,3,68,34,0,489,494,5,92,0,0,490,491,
		5,2,0,0,491,493,5,92,0,0,492,490,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,
		0,494,495,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,497,499,3,60,30,0,498,
		497,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,488,1,0,0,0,500,489,1,
		0,0,0,501,503,1,0,0,0,502,504,3,62,31,0,503,502,1,0,0,0,503,504,1,0,0,
		0,504,506,1,0,0,0,505,507,5,17,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,
		67,1,0,0,0,508,509,7,1,0,0,509,69,1,0,0,0,510,514,5,4,0,0,511,513,3,72,
		36,0,512,511,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,
		517,1,0,0,0,516,514,1,0,0,0,517,518,5,6,0,0,518,71,1,0,0,0,519,536,3,74,
		37,0,520,536,3,76,38,0,521,536,3,78,39,0,522,536,3,70,35,0,523,536,3,80,
		40,0,524,536,3,84,42,0,525,536,3,86,43,0,526,536,3,92,46,0,527,536,3,94,
		47,0,528,536,3,100,50,0,529,536,3,102,51,0,530,536,3,108,54,0,531,532,
		5,53,0,0,532,536,5,1,0,0,533,534,5,52,0,0,534,536,5,1,0,0,535,519,1,0,
		0,0,535,520,1,0,0,0,535,521,1,0,0,0,535,522,1,0,0,0,535,523,1,0,0,0,535,
		524,1,0,0,0,535,525,1,0,0,0,535,526,1,0,0,0,535,527,1,0,0,0,535,528,1,
		0,0,0,535,529,1,0,0,0,535,530,1,0,0,0,535,531,1,0,0,0,535,533,1,0,0,0,
		536,73,1,0,0,0,537,539,5,54,0,0,538,540,3,114,57,0,539,538,1,0,0,0,539,
		540,1,0,0,0,540,541,1,0,0,0,541,542,5,1,0,0,542,75,1,0,0,0,543,545,3,114,
		57,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,547,3,128,64,
		0,547,548,5,1,0,0,548,77,1,0,0,0,549,550,3,114,57,0,550,551,7,2,0,0,551,
		552,5,1,0,0,552,79,1,0,0,0,553,554,3,66,33,0,554,559,5,92,0,0,555,556,
		5,5,0,0,556,558,5,92,0,0,557,555,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,
		0,559,560,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,562,564,3,82,41,0,563,
		562,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,566,5,1,0,0,566,81,1,0,
		0,0,567,580,5,10,0,0,568,581,3,114,57,0,569,570,5,4,0,0,570,575,3,114,
		57,0,571,572,5,5,0,0,572,574,3,114,57,0,573,571,1,0,0,0,574,577,1,0,0,
		0,575,573,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,
		579,5,6,0,0,579,581,1,0,0,0,580,568,1,0,0,0,580,569,1,0,0,0,581,83,1,0,
		0,0,582,583,3,114,57,0,583,584,7,3,0,0,584,585,3,114,57,0,585,586,5,1,
		0,0,586,85,1,0,0,0,587,588,5,55,0,0,588,589,5,8,0,0,589,590,3,114,57,0,
		590,594,5,9,0,0,591,595,3,72,36,0,592,595,5,1,0,0,593,595,3,70,35,0,594,
		591,1,0,0,0,594,592,1,0,0,0,594,593,1,0,0,0,595,599,1,0,0,0,596,598,3,
		88,44,0,597,596,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,
		0,600,603,1,0,0,0,601,599,1,0,0,0,602,604,3,90,45,0,603,602,1,0,0,0,603,
		604,1,0,0,0,604,87,1,0,0,0,605,606,5,57,0,0,606,607,5,8,0,0,607,608,3,
		114,57,0,608,612,5,9,0,0,609,613,3,72,36,0,610,613,5,1,0,0,611,613,3,70,
		35,0,612,609,1,0,0,0,612,610,1,0,0,0,612,611,1,0,0,0,613,89,1,0,0,0,614,
		618,5,56,0,0,615,619,3,72,36,0,616,619,5,1,0,0,617,619,3,70,35,0,618,615,
		1,0,0,0,618,616,1,0,0,0,618,617,1,0,0,0,619,91,1,0,0,0,620,621,5,60,0,
		0,621,622,5,8,0,0,622,623,3,66,33,0,623,624,5,92,0,0,624,625,5,61,0,0,
		625,626,3,114,57,0,626,632,5,9,0,0,627,629,3,72,36,0,628,627,1,0,0,0,628,
		629,1,0,0,0,629,630,1,0,0,0,630,633,5,1,0,0,631,633,3,70,35,0,632,628,
		1,0,0,0,632,631,1,0,0,0,633,93,1,0,0,0,634,635,5,62,0,0,635,644,5,8,0,
		0,636,641,3,96,48,0,637,638,5,5,0,0,638,640,3,96,48,0,639,637,1,0,0,0,
		640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,645,1,0,0,0,643,641,
		1,0,0,0,644,636,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,648,5,1,0,
		0,647,649,3,114,57,0,648,647,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,
		659,5,1,0,0,651,656,3,98,49,0,652,653,5,5,0,0,653,655,3,98,49,0,654,652,
		1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,660,1,0,0,
		0,658,656,1,0,0,0,659,651,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,
		667,5,9,0,0,662,664,3,72,36,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,
		1,0,0,0,665,668,5,1,0,0,666,668,3,70,35,0,667,663,1,0,0,0,667,666,1,0,
		0,0,668,95,1,0,0,0,669,670,3,66,33,0,670,673,5,92,0,0,671,672,5,10,0,0,
		672,674,3,114,57,0,673,671,1,0,0,0,673,674,1,0,0,0,674,97,1,0,0,0,675,
		676,3,114,57,0,676,99,1,0,0,0,677,678,5,63,0,0,678,679,5,8,0,0,679,680,
		3,114,57,0,680,691,5,9,0,0,681,692,3,72,36,0,682,692,5,1,0,0,683,687,5,
		4,0,0,684,686,3,72,36,0,685,684,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,
		0,687,688,1,0,0,0,688,690,1,0,0,0,689,687,1,0,0,0,690,692,5,6,0,0,691,
		681,1,0,0,0,691,682,1,0,0,0,691,683,1,0,0,0,692,101,1,0,0,0,693,694,5,
		64,0,0,694,695,5,8,0,0,695,696,3,114,57,0,696,697,5,9,0,0,697,702,5,4,
		0,0,698,701,3,104,52,0,699,701,3,106,53,0,700,698,1,0,0,0,700,699,1,0,
		0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,
		702,1,0,0,0,705,706,5,6,0,0,706,103,1,0,0,0,707,708,5,66,0,0,708,719,5,
		3,0,0,709,720,3,72,36,0,710,720,5,1,0,0,711,715,5,4,0,0,712,714,3,72,36,
		0,713,712,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,
		718,1,0,0,0,717,715,1,0,0,0,718,720,5,6,0,0,719,709,1,0,0,0,719,710,1,
		0,0,0,719,711,1,0,0,0,720,105,1,0,0,0,721,722,5,65,0,0,722,723,3,114,57,
		0,723,734,5,3,0,0,724,735,3,72,36,0,725,735,5,1,0,0,726,730,5,4,0,0,727,
		729,3,72,36,0,728,727,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,
		1,0,0,0,731,733,1,0,0,0,732,730,1,0,0,0,733,735,5,6,0,0,734,724,1,0,0,
		0,734,725,1,0,0,0,734,726,1,0,0,0,735,107,1,0,0,0,736,746,5,67,0,0,737,
		747,3,72,36,0,738,742,5,4,0,0,739,741,3,72,36,0,740,739,1,0,0,0,741,744,
		1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,742,1,0,0,
		0,745,747,5,6,0,0,746,737,1,0,0,0,746,738,1,0,0,0,747,749,1,0,0,0,748,
		750,3,110,55,0,749,748,1,0,0,0,749,750,1,0,0,0,750,752,1,0,0,0,751,753,
		3,112,56,0,752,751,1,0,0,0,752,753,1,0,0,0,753,109,1,0,0,0,754,759,5,68,
		0,0,755,756,5,8,0,0,756,757,3,66,33,0,757,758,5,9,0,0,758,760,1,0,0,0,
		759,755,1,0,0,0,759,760,1,0,0,0,760,770,1,0,0,0,761,771,3,72,36,0,762,
		766,5,4,0,0,763,765,3,72,36,0,764,763,1,0,0,0,765,768,1,0,0,0,766,764,
		1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,766,1,0,0,0,769,771,5,6,0,
		0,770,761,1,0,0,0,770,762,1,0,0,0,771,111,1,0,0,0,772,782,5,69,0,0,773,
		783,3,72,36,0,774,778,5,4,0,0,775,777,3,72,36,0,776,775,1,0,0,0,777,780,
		1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,778,1,0,0,
		0,781,783,5,6,0,0,782,773,1,0,0,0,782,774,1,0,0,0,783,113,1,0,0,0,784,
		785,6,57,-1,0,785,786,5,24,0,0,786,860,3,114,57,23,787,788,5,25,0,0,788,
		860,3,114,57,22,789,793,5,92,0,0,790,792,3,124,62,0,791,790,1,0,0,0,792,
		795,1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,0,794,860,1,0,0,0,795,793,1,
		0,0,0,796,800,3,116,58,0,797,799,3,124,62,0,798,797,1,0,0,0,799,802,1,
		0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,860,1,0,0,0,802,800,1,0,0,0,
		803,804,3,66,33,0,804,808,3,128,64,0,805,807,3,124,62,0,806,805,1,0,0,
		0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,860,1,0,0,0,810,
		808,1,0,0,0,811,812,3,66,33,0,812,816,3,126,63,0,813,815,3,124,62,0,814,
		813,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,860,1,
		0,0,0,818,816,1,0,0,0,819,820,5,8,0,0,820,821,3,114,57,0,821,825,5,9,0,
		0,822,824,3,124,62,0,823,822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,
		826,1,0,0,0,826,860,1,0,0,0,827,825,1,0,0,0,828,860,3,118,59,0,829,860,
		3,120,60,0,830,834,3,122,61,0,831,833,3,124,62,0,832,831,1,0,0,0,833,836,
		1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,860,1,0,0,0,836,834,1,0,0,
		0,837,841,3,132,66,0,838,840,3,124,62,0,839,838,1,0,0,0,840,843,1,0,0,
		0,841,839,1,0,0,0,841,842,1,0,0,0,842,860,1,0,0,0,843,841,1,0,0,0,844,
		848,5,73,0,0,845,847,3,124,62,0,846,845,1,0,0,0,847,850,1,0,0,0,848,846,
		1,0,0,0,848,849,1,0,0,0,849,860,1,0,0,0,850,848,1,0,0,0,851,855,5,74,0,
		0,852,854,3,124,62,0,853,852,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,
		856,1,0,0,0,856,860,1,0,0,0,857,855,1,0,0,0,858,860,3,66,33,0,859,784,
		1,0,0,0,859,787,1,0,0,0,859,789,1,0,0,0,859,796,1,0,0,0,859,803,1,0,0,
		0,859,811,1,0,0,0,859,819,1,0,0,0,859,828,1,0,0,0,859,829,1,0,0,0,859,
		830,1,0,0,0,859,837,1,0,0,0,859,844,1,0,0,0,859,851,1,0,0,0,859,858,1,
		0,0,0,860,903,1,0,0,0,861,862,10,21,0,0,862,863,7,4,0,0,863,902,3,114,
		57,22,864,865,10,20,0,0,865,866,7,5,0,0,866,902,3,114,57,21,867,868,10,
		19,0,0,868,869,7,6,0,0,869,902,3,114,57,20,870,871,10,18,0,0,871,872,7,
		7,0,0,872,902,3,114,57,19,873,874,10,17,0,0,874,875,5,34,0,0,875,902,3,
		114,57,18,876,877,10,16,0,0,877,878,5,35,0,0,878,902,3,114,57,17,879,880,
		10,15,0,0,880,881,5,36,0,0,881,882,3,114,57,0,882,883,5,3,0,0,883,884,
		3,114,57,16,884,902,1,0,0,0,885,886,10,12,0,0,886,890,3,128,64,0,887,889,
		3,124,62,0,888,887,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,
		0,0,891,902,1,0,0,0,892,890,1,0,0,0,893,894,10,10,0,0,894,898,3,126,63,
		0,895,897,3,124,62,0,896,895,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,
		899,1,0,0,0,899,902,1,0,0,0,900,898,1,0,0,0,901,861,1,0,0,0,901,864,1,
		0,0,0,901,867,1,0,0,0,901,870,1,0,0,0,901,873,1,0,0,0,901,876,1,0,0,0,
		901,879,1,0,0,0,901,885,1,0,0,0,901,893,1,0,0,0,902,905,1,0,0,0,903,901,
		1,0,0,0,903,904,1,0,0,0,904,115,1,0,0,0,905,903,1,0,0,0,906,920,5,95,0,
		0,907,909,5,93,0,0,908,910,7,8,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,
		920,1,0,0,0,911,913,5,94,0,0,912,914,7,9,0,0,913,912,1,0,0,0,913,914,1,
		0,0,0,914,920,1,0,0,0,915,920,5,96,0,0,916,920,5,58,0,0,917,920,5,59,0,
		0,918,920,5,91,0,0,919,906,1,0,0,0,919,907,1,0,0,0,919,911,1,0,0,0,919,
		915,1,0,0,0,919,916,1,0,0,0,919,917,1,0,0,0,919,918,1,0,0,0,920,117,1,
		0,0,0,921,922,5,44,0,0,922,923,5,8,0,0,923,924,3,66,33,0,924,925,5,9,0,
		0,925,119,1,0,0,0,926,927,5,70,0,0,927,928,5,8,0,0,928,929,3,66,33,0,929,
		930,5,9,0,0,930,121,1,0,0,0,931,932,7,10,0,0,932,933,3,132,66,0,933,123,
		1,0,0,0,934,935,5,15,0,0,935,940,3,114,57,0,936,937,5,5,0,0,937,939,3,
		114,57,0,938,936,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,
		0,941,943,1,0,0,0,942,940,1,0,0,0,943,944,5,16,0,0,944,125,1,0,0,0,945,
		946,5,2,0,0,946,947,5,92,0,0,947,127,1,0,0,0,948,950,5,2,0,0,949,948,1,
		0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,953,5,92,0,0,952,954,3,60,30,
		0,953,952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,957,5,8,0,0,956,
		958,3,130,65,0,957,956,1,0,0,0,957,958,1,0,0,0,958,963,1,0,0,0,959,960,
		5,5,0,0,960,962,3,130,65,0,961,959,1,0,0,0,962,965,1,0,0,0,963,961,1,0,
		0,0,963,964,1,0,0,0,964,966,1,0,0,0,965,963,1,0,0,0,966,967,5,9,0,0,967,
		129,1,0,0,0,968,970,5,17,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,
		0,0,0,971,972,3,114,57,0,972,131,1,0,0,0,973,974,3,66,33,0,974,983,5,8,
		0,0,975,980,3,114,57,0,976,977,5,5,0,0,977,979,3,114,57,0,978,976,1,0,
		0,0,979,982,1,0,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,984,1,0,0,0,982,
		980,1,0,0,0,983,975,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,986,5,
		9,0,0,986,133,1,0,0,0,123,137,143,148,152,175,181,187,193,196,203,209,
		215,218,225,231,238,248,251,258,263,268,274,283,294,304,307,310,315,321,
		327,337,343,356,360,362,369,376,381,387,393,400,406,412,416,421,428,434,
		444,456,465,472,475,485,494,498,500,503,506,514,535,539,544,559,563,575,
		580,594,599,603,612,618,628,632,641,644,648,656,659,663,667,673,687,691,
		700,702,715,719,730,734,742,746,749,752,759,766,770,778,782,793,800,808,
		816,825,834,841,848,855,859,890,898,901,903,909,913,919,940,949,953,957,
		963,969,980,983
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
