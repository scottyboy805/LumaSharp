//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/LumaSharp.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LumaSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, IMPORT=24, 
		NAMESPACE=25, TYPE=26, CONTRACT=27, ATTRIBUTE=28, ENUM=29, GLOBAL=30, 
		EXPORT=31, INTERNAL=32, SPECIALHIDDEN=33, AS=34, CONTINUE=35, BREAK=36, 
		RETURN=37, OVERRIDE=38, IF=39, ELSE=40, ELSEIF=41, TRUE=42, FALSE=43, 
		IN=44, FOR=45, SELECT=46, MATCH=47, DEFAULT=48, TRY=49, CATCH=50, FINALLY=51, 
		SIZE=52, READ=53, WRITE=54, THIS=55, BASE=56, NEW=57, ANY=58, BOOL=59, 
		CHAR=60, I8=61, U8=62, I16=63, U16=64, I32=65, U32=66, I64=67, U64=68, 
		F32=69, F64=70, STRING=71, NULL=72, VOID=73, LGENERIC=74, RGENERIC=75, 
		LARRAY=76, RARRAY=77, LBLOCK=78, RBLOCK=79, LPAREN=80, RPAREN=81, DOT=82, 
		COMMA=83, COLON=84, HASH=85, ASSIGN=86, LAMBDA=87, ENUMERABLE=88, TERNARY=89, 
		RANGEINCLUSIVE=90, RANGEEXCLUSIVE=91, IDENTIFIER=92, INT=93, DECIMAL=94, 
		HEX=95, LITERAL=96, WS=97, COMMENT=98, Dot=99;
	public const int
		RULE_compilationUnit = 0, RULE_importElement = 1, RULE_rootElement = 2, 
		RULE_importStatement = 3, RULE_importAlias = 4, RULE_namespaceDeclaration = 5, 
		RULE_namespaceName = 6, RULE_namespaceNameSecondary = 7, RULE_typeDeclaration = 8, 
		RULE_contractDeclaration = 9, RULE_enumDeclaration = 10, RULE_enumBlock = 11, 
		RULE_enumField = 12, RULE_rootMember = 13, RULE_rootMemberBlock = 14, 
		RULE_memberBlock = 15, RULE_memberDeclaration = 16, RULE_attributeReference = 17, 
		RULE_fieldDeclaration = 18, RULE_accessorDeclaration = 19, RULE_accessorBody = 20, 
		RULE_accessorReadWrite = 21, RULE_initializerDeclaration = 22, RULE_initializerBaseExpression = 23, 
		RULE_methodDeclaration = 24, RULE_methodReturnList = 25, RULE_methodParameterList = 26, 
		RULE_methodParameter = 27, RULE_methodParameterSecondary = 28, RULE_accessModifier = 29, 
		RULE_genericParameterList = 30, RULE_genericParameter = 31, RULE_genericParameterSecondary = 32, 
		RULE_genericConstraintList = 33, RULE_genericConstraint = 34, RULE_genericConstraintSecondary = 35, 
		RULE_genericArgumentList = 36, RULE_arrayParameters = 37, RULE_inheritParameters = 38, 
		RULE_typeReferenceList = 39, RULE_typeReference = 40, RULE_typeReferenceSecondary = 41, 
		RULE_shortTypeReference = 42, RULE_parentTypeReference = 43, RULE_primitiveType = 44, 
		RULE_statementBlock = 45, RULE_statementLambda = 46, RULE_statement = 47, 
		RULE_returnStatement = 48, RULE_methodInvokeStatement = 49, RULE_postfixStatement = 50, 
		RULE_localVariableStatement = 51, RULE_localVariableSecondary = 52, RULE_variableAssignment = 53, 
		RULE_assignStatement = 54, RULE_ifStatement = 55, RULE_elseifStatement = 56, 
		RULE_elseStatement = 57, RULE_forStatement = 58, RULE_foreachStatement = 59, 
		RULE_selectStatement = 60, RULE_defaultStatement = 61, RULE_matchStatement = 62, 
		RULE_tryStatement = 63, RULE_catchStatement = 64, RULE_finallyStatement = 65, 
		RULE_expressionList = 66, RULE_expressionLambda = 67, RULE_expression = 68, 
		RULE_parenExpression = 69, RULE_expressionSecondary = 70, RULE_literalExpression = 71, 
		RULE_typeExpression = 72, RULE_sizeExpression = 73, RULE_newExpression = 74, 
		RULE_indexExpression = 75, RULE_fieldAccessExpression = 76, RULE_methodInvokeExpression = 77, 
		RULE_argumentList = 78, RULE_rangeExpression = 79;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importElement", "rootElement", "importStatement", 
		"importAlias", "namespaceDeclaration", "namespaceName", "namespaceNameSecondary", 
		"typeDeclaration", "contractDeclaration", "enumDeclaration", "enumBlock", 
		"enumField", "rootMember", "rootMemberBlock", "memberBlock", "memberDeclaration", 
		"attributeReference", "fieldDeclaration", "accessorDeclaration", "accessorBody", 
		"accessorReadWrite", "initializerDeclaration", "initializerBaseExpression", 
		"methodDeclaration", "methodReturnList", "methodParameterList", "methodParameter", 
		"methodParameterSecondary", "accessModifier", "genericParameterList", 
		"genericParameter", "genericParameterSecondary", "genericConstraintList", 
		"genericConstraint", "genericConstraintSecondary", "genericArgumentList", 
		"arrayParameters", "inheritParameters", "typeReferenceList", "typeReference", 
		"typeReferenceSecondary", "shortTypeReference", "parentTypeReference", 
		"primitiveType", "statementBlock", "statementLambda", "statement", "returnStatement", 
		"methodInvokeStatement", "postfixStatement", "localVariableStatement", 
		"localVariableSecondary", "variableAssignment", "assignStatement", "ifStatement", 
		"elseifStatement", "elseStatement", "forStatement", "foreachStatement", 
		"selectStatement", "defaultStatement", "matchStatement", "tryStatement", 
		"catchStatement", "finallyStatement", "expressionList", "expressionLambda", 
		"expression", "parenExpression", "expressionSecondary", "literalExpression", 
		"typeExpression", "sizeExpression", "newExpression", "indexExpression", 
		"fieldAccessExpression", "methodInvokeExpression", "argumentList", "rangeExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'++'", "'--'", "'+='", "'-='", "'/='", "'*='", "'-'", "'!'", "'*'", 
		"'/'", "'%'", "'+'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", "'U'", 
		"'L'", "'UL'", "'F'", "'D'", "'import'", "'namespace'", "'type'", "'contract'", 
		"'attribute'", "'enum'", "'global'", "'export'", "'internal'", "'hidden'", 
		"'as'", "'continue'", "'break'", "'return'", "'override'", "'if'", "'else'", 
		"'elseif'", "'true'", "'false'", "'in'", "'for'", "'select'", "'match'", 
		"'default'", "'try'", "'catch'", "'finally'", "'size'", "'read'", "'write'", 
		"'this'", "'base'", "'new'", "'any'", "'bool'", "'char'", "'i8'", "'u8'", 
		"'i16'", "'u16'", "'i32'", "'u32'", "'i64'", "'u64'", "'f32'", "'f64'", 
		"'string'", "'null'", "'void'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", 
		"'('", "')'", "'.'", "','", "':'", "'#'", "'='", "'=>'", "'...'", "'?'", 
		"'..='", "'..<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"IMPORT", "NAMESPACE", "TYPE", "CONTRACT", "ATTRIBUTE", "ENUM", "GLOBAL", 
		"EXPORT", "INTERNAL", "SPECIALHIDDEN", "AS", "CONTINUE", "BREAK", "RETURN", 
		"OVERRIDE", "IF", "ELSE", "ELSEIF", "TRUE", "FALSE", "IN", "FOR", "SELECT", 
		"MATCH", "DEFAULT", "TRY", "CATCH", "FINALLY", "SIZE", "READ", "WRITE", 
		"THIS", "BASE", "NEW", "ANY", "BOOL", "CHAR", "I8", "U8", "I16", "U16", 
		"I32", "U32", "I64", "U64", "F32", "F64", "STRING", "NULL", "VOID", "LGENERIC", 
		"RGENERIC", "LARRAY", "RARRAY", "LBLOCK", "RBLOCK", "LPAREN", "RPAREN", 
		"DOT", "COMMA", "COLON", "HASH", "ASSIGN", "LAMBDA", "ENUMERABLE", "TERNARY", 
		"RANGEINCLUSIVE", "RANGEEXCLUSIVE", "IDENTIFIER", "INT", "DECIMAL", "HEX", 
		"LITERAL", "WS", "COMMENT", "Dot"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LumaSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LumaSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LumaSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LumaSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext[] importElement() {
			return GetRuleContexts<ImportElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext importElement(int i) {
			return GetRuleContext<ImportElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext[] rootElement() {
			return GetRuleContexts<RootElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext rootElement(int i) {
			return GetRuleContext<RootElementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 160;
				importElement();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 1152921504606847487L) != 0)) {
				{
				{
				State = 166;
				rootElement();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext importAlias() {
			return GetRuleContext<ImportAliasContext>(0);
		}
		public ImportElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportElementContext importElement() {
		ImportElementContext _localctx = new ImportElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importElement);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				importStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				importAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember() {
			return GetRuleContext<RootMemberContext>(0);
		}
		public RootElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootElementContext rootElement() {
		RootElementContext _localctx = new RootElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_rootElement);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				namespaceDeclaration();
				}
				break;
			case TYPE:
			case CONTRACT:
			case ATTRIBUTE:
			case ENUM:
			case GLOBAL:
			case EXPORT:
			case INTERNAL:
			case SPECIALHIDDEN:
			case HASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				rootMember();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(IMPORT);
			State = 181;
			namespaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(LumaSharpParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LumaSharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ImportAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasContext importAlias() {
		ImportAliasContext _localctx = new ImportAliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_importAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(IMPORT);
			State = 184;
			Match(IDENTIFIER);
			State = 185;
			Match(AS);
			State = 186;
			namespaceName();
			State = 187;
			Match(DOT);
			State = 188;
			typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(LumaSharpParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(NAMESPACE);
			State = 191;
			namespaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameSecondaryContext[] namespaceNameSecondary() {
			return GetRuleContexts<NamespaceNameSecondaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameSecondaryContext namespaceNameSecondary(int i) {
			return GetRuleContext<NamespaceNameSecondaryContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(IDENTIFIER);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 194;
					namespaceNameSecondary();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameSecondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public NamespaceNameSecondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceNameSecondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceNameSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceNameSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceNameSecondary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameSecondaryContext namespaceNameSecondary() {
		NamespaceNameSecondaryContext _localctx = new NamespaceNameSecondaryContext(Context, State);
		EnterRule(_localctx, 14, RULE_namespaceNameSecondary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(COLON);
			State = 201;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(LumaSharpParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(LumaSharpParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 203;
				attributeReference();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) {
				{
				{
				State = 209;
				accessModifier();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 215;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE || _la==ATTRIBUTE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 216;
			Match(IDENTIFIER);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LGENERIC) {
				{
				State = 217;
				genericParameterList();
				}
			}

			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 220;
				Match(OVERRIDE);
				}
			}

			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 223;
				inheritParameters();
				}
			}

			State = 226;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(LumaSharpParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public ContractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDeclarationContext contractDeclaration() {
		ContractDeclarationContext _localctx = new ContractDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_contractDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 228;
				attributeReference();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) {
				{
				{
				State = 234;
				accessModifier();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 240;
			Match(CONTRACT);
			State = 241;
			Match(IDENTIFIER);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LGENERIC) {
				{
				State = 242;
				genericParameterList();
				}
			}

			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 245;
				inheritParameters();
				}
			}

			State = 248;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(LumaSharpParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 250;
				attributeReference();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) {
				{
				{
				State = 256;
				accessModifier();
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 262;
			Match(ENUM);
			State = 263;
			Match(IDENTIFIER);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 264;
				Match(COLON);
				State = 265;
				primitiveType();
				}
			}

			State = 268;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(LBLOCK);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH || _la==IDENTIFIER) {
				{
				{
				State = 271;
				enumField();
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 277;
			Match(RBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 279;
				attributeReference();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 285;
			Match(IDENTIFIER);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 286;
				variableAssignment();
				}
			}

			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 289;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public RootMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberContext rootMember() {
		RootMemberContext _localctx = new RootMemberContext(Context, State);
		EnterRule(_localctx, 26, RULE_rootMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 292;
				typeDeclaration();
				}
				break;
			case 2:
				{
				State = 293;
				contractDeclaration();
				}
				break;
			case 3:
				{
				State = 294;
				enumDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext[] rootMember() {
			return GetRuleContexts<RootMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember(int i) {
			return GetRuleContext<RootMemberContext>(i);
		}
		public RootMemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMemberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberBlockContext rootMemberBlock() {
		RootMemberBlockContext _localctx = new RootMemberBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_rootMemberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(LBLOCK);
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 576460752303423743L) != 0)) {
				{
				{
				State = 298;
				rootMember();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 304;
			Match(RBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public MemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberBlockContext memberBlock() {
		MemberBlockContext _localctx = new MemberBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(LBLOCK);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -288230359038951424L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 270533375L) != 0)) {
				{
				{
				State = 307;
				memberDeclaration();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 313;
			Match(RBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDeclarationContext accessorDeclaration() {
			return GetRuleContext<AccessorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_memberDeclaration);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315;
				typeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316;
				contractDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317;
				enumDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 318;
				fieldDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 319;
				accessorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 320;
				methodDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(LumaSharpParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public AttributeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAttributeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAttributeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeReferenceContext attributeReference() {
		AttributeReferenceContext _localctx = new AttributeReferenceContext(Context, State);
		EnterRule(_localctx, 34, RULE_attributeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(HASH);
			State = 324;
			typeReference();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 325;
				argumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 328;
				attributeReference();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) {
				{
				{
				State = 334;
				accessModifier();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 340;
			typeReference();
			State = 341;
			Match(IDENTIFIER);
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 342;
				variableAssignment();
				}
			}

			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 345;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(LumaSharpParser.OVERRIDE, 0); }
		public AccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDeclarationContext accessorDeclaration() {
		AccessorDeclarationContext _localctx = new AccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_accessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 348;
				attributeReference();
				}
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) {
				{
				{
				State = 354;
				accessModifier();
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 360;
			typeReference();
			State = 361;
			Match(IDENTIFIER);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 362;
				Match(OVERRIDE);
				}
			}

			State = 365;
			accessorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLambdaContext expressionLambda() {
			return GetRuleContext<ExpressionLambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorReadWriteContext[] accessorReadWrite() {
			return GetRuleContexts<AccessorReadWriteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorReadWriteContext accessorReadWrite(int i) {
			return GetRuleContext<AccessorReadWriteContext>(i);
		}
		public AccessorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorBodyContext accessorBody() {
		AccessorBodyContext _localctx = new AccessorBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_accessorBody);
		int _la;
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				expressionLambda();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				accessorReadWrite();
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LAMBDA) {
					{
					State = 369;
					accessorReadWrite();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorReadWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(LumaSharpParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LumaSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LumaSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		public AccessorReadWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorReadWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorReadWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorReadWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorReadWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorReadWriteContext accessorReadWrite() {
		AccessorReadWriteContext _localctx = new AccessorReadWriteContext(Context, State);
		EnterRule(_localctx, 42, RULE_accessorReadWrite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(LAMBDA);
			State = 375;
			_la = TokenStream.LA(1);
			if ( !(_la==READ || _la==WRITE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 376;
			Match(COLON);
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 377;
				statement();
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 378;
					Match(COMMA);
					}
				}

				}
				break;
			case 2:
				{
				State = 381;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerBaseExpressionContext initializerBaseExpression() {
			return GetRuleContext<InitializerBaseExpressionContext>(0);
		}
		public InitializerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerDeclarationContext initializerDeclaration() {
		InitializerDeclarationContext _localctx = new InitializerDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_initializerDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 384;
				attributeReference();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) {
				{
				{
				State = 390;
				accessModifier();
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 396;
			Match(THIS);
			State = 397;
			Match(LPAREN);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 398;
				methodParameterList();
				}
			}

			State = 401;
			Match(RPAREN);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 402;
				initializerBaseExpression();
				}
			}

			State = 405;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerBaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		public InitializerBaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerBaseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerBaseExpressionContext initializerBaseExpression() {
		InitializerBaseExpressionContext _localctx = new InitializerBaseExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_initializerBaseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(COLON);
			State = 408;
			Match(LPAREN);
			State = 409;
			expressionList();
			State = 410;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodReturnListContext methodReturnList() {
			return GetRuleContext<MethodReturnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(LumaSharpParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementLambdaContext statementLambda() {
			return GetRuleContext<StatementLambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 412;
				attributeReference();
				}
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) {
				{
				{
				State = 418;
				accessModifier();
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 424;
			methodReturnList();
			State = 425;
			Match(IDENTIFIER);
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LGENERIC) {
				{
				State = 426;
				genericParameterList();
				}
			}

			State = 429;
			methodParameterList();
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERRIDE) {
				{
				State = 430;
				Match(OVERRIDE);
				}
			}

			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAMBDA:
				{
				State = 433;
				statementLambda();
				}
				break;
			case LBLOCK:
				{
				State = 434;
				statementBlock();
				}
				break;
			case TYPE:
			case CONTRACT:
			case ATTRIBUTE:
			case ENUM:
			case GLOBAL:
			case EXPORT:
			case INTERNAL:
			case SPECIALHIDDEN:
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case F32:
			case F64:
			case STRING:
			case VOID:
			case RBLOCK:
			case HASH:
			case IDENTIFIER:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReturnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LumaSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public MethodReturnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReturnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodReturnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodReturnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReturnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReturnListContext methodReturnList() {
		MethodReturnListContext _localctx = new MethodReturnListContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodReturnList);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				Match(VOID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				typeReferenceList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext methodParameter() {
			return GetRuleContext<MethodParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterSecondaryContext[] methodParameterSecondary() {
			return GetRuleContexts<MethodParameterSecondaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterSecondaryContext methodParameterSecondary(int i) {
			return GetRuleContext<MethodParameterSecondaryContext>(i);
		}
		public MethodParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterListContext methodParameterList() {
		MethodParameterListContext _localctx = new MethodParameterListContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(LPAREN);
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 17314136063L) != 0)) {
				{
				State = 442;
				methodParameter();
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 443;
					methodParameterSecondary();
					}
					}
					State = 448;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 451;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext[] attributeReference() {
			return GetRuleContexts<AttributeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeReferenceContext attributeReference(int i) {
			return GetRuleContext<AttributeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERABLE() { return GetToken(LumaSharpParser.ENUMERABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LumaSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterContext methodParameter() {
		MethodParameterContext _localctx = new MethodParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_methodParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 453;
				attributeReference();
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 459;
			typeReference();
			State = 460;
			Match(IDENTIFIER);
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENUMERABLE) {
				{
				State = 461;
				Match(ENUMERABLE);
				}
			}

			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 464;
				Match(ASSIGN);
				State = 465;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterSecondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext methodParameter() {
			return GetRuleContext<MethodParameterContext>(0);
		}
		public MethodParameterSecondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterSecondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameterSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameterSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterSecondary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterSecondaryContext methodParameterSecondary() {
		MethodParameterSecondaryContext _localctx = new MethodParameterSecondaryContext(Context, State);
		EnterRule(_localctx, 56, RULE_methodParameterSecondary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(COMMA);
			State = 469;
			methodParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(LumaSharpParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(LumaSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIALHIDDEN() { return GetToken(LumaSharpParser.SPECIALHIDDEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(LumaSharpParser.GLOBAL, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LGENERIC() { return GetToken(LumaSharpParser.LGENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext genericParameter() {
			return GetRuleContext<GenericParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RGENERIC() { return GetToken(LumaSharpParser.RGENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterSecondaryContext[] genericParameterSecondary() {
			return GetRuleContexts<GenericParameterSecondaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterSecondaryContext genericParameterSecondary(int i) {
			return GetRuleContext<GenericParameterSecondaryContext>(i);
		}
		public GenericParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterListContext genericParameterList() {
		GenericParameterListContext _localctx = new GenericParameterListContext(Context, State);
		EnterRule(_localctx, 60, RULE_genericParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(LGENERIC);
			State = 474;
			genericParameter();
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 475;
				genericParameterSecondary();
				}
				}
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 481;
			Match(RGENERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericConstraintListContext genericConstraintList() {
			return GetRuleContext<GenericConstraintListContext>(0);
		}
		public GenericParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterContext genericParameter() {
		GenericParameterContext _localctx = new GenericParameterContext(Context, State);
		EnterRule(_localctx, 62, RULE_genericParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(IDENTIFIER);
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 484;
				genericConstraintList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterSecondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext genericParameter() {
			return GetRuleContext<GenericParameterContext>(0);
		}
		public GenericParameterSecondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterSecondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameterSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameterSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameterSecondary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterSecondaryContext genericParameterSecondary() {
		GenericParameterSecondaryContext _localctx = new GenericParameterSecondaryContext(Context, State);
		EnterRule(_localctx, 64, RULE_genericParameterSecondary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(COMMA);
			State = 488;
			genericParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstraintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericConstraintContext genericConstraint() {
			return GetRuleContext<GenericConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericConstraintSecondaryContext[] genericConstraintSecondary() {
			return GetRuleContexts<GenericConstraintSecondaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericConstraintSecondaryContext genericConstraintSecondary(int i) {
			return GetRuleContext<GenericConstraintSecondaryContext>(i);
		}
		public GenericConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstraintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericConstraintList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericConstraintList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstraintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstraintListContext genericConstraintList() {
		GenericConstraintListContext _localctx = new GenericConstraintListContext(Context, State);
		EnterRule(_localctx, 66, RULE_genericConstraintList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(COLON);
			State = 491;
			genericConstraint();
			State = 495;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 492;
					genericConstraintSecondary();
					}
					} 
				}
				State = 497;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GenericConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstraintContext genericConstraint() {
		GenericConstraintContext _localctx = new GenericConstraintContext(Context, State);
		EnterRule(_localctx, 68, RULE_genericConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstraintSecondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericConstraintContext genericConstraint() {
			return GetRuleContext<GenericConstraintContext>(0);
		}
		public GenericConstraintSecondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstraintSecondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericConstraintSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericConstraintSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstraintSecondary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstraintSecondaryContext genericConstraintSecondary() {
		GenericConstraintSecondaryContext _localctx = new GenericConstraintSecondaryContext(Context, State);
		EnterRule(_localctx, 70, RULE_genericConstraintSecondary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(COMMA);
			State = 501;
			genericConstraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LGENERIC() { return GetToken(LumaSharpParser.LGENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RGENERIC() { return GetToken(LumaSharpParser.RGENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public GenericArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentListContext genericArgumentList() {
		GenericArgumentListContext _localctx = new GenericArgumentListContext(Context, State);
		EnterRule(_localctx, 72, RULE_genericArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(LGENERIC);
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 17179918335L) != 0)) {
				{
				State = 504;
				typeReferenceList();
				}
			}

			State = 507;
			Match(RGENERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARRAY() { return GetToken(LumaSharpParser.LARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARRAY() { return GetToken(LumaSharpParser.RARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LumaSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LumaSharpParser.COMMA, i);
		}
		public ArrayParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayParametersContext arrayParameters() {
		ArrayParametersContext _localctx = new ArrayParametersContext(Context, State);
		EnterRule(_localctx, 74, RULE_arrayParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(LARRAY);
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 510;
				Match(COMMA);
				}
				break;
			}
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 513;
				Match(COMMA);
				}
			}

			State = 516;
			Match(RARRAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public InheritParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritParametersContext inheritParameters() {
		InheritParametersContext _localctx = new InheritParametersContext(Context, State);
		EnterRule(_localctx, 76, RULE_inheritParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(COLON);
			State = 519;
			typeReferenceList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceSecondaryContext[] typeReferenceSecondary() {
			return GetRuleContexts<TypeReferenceSecondaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceSecondaryContext typeReferenceSecondary(int i) {
			return GetRuleContext<TypeReferenceSecondaryContext>(i);
		}
		public TypeReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeReferenceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeReferenceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceListContext typeReferenceList() {
		TypeReferenceListContext _localctx = new TypeReferenceListContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			typeReference();
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 522;
				typeReferenceSecondary();
				}
				}
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParentTypeReferenceContext[] parentTypeReference() {
			return GetRuleContexts<ParentTypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentTypeReferenceContext parentTypeReference(int i) {
			return GetRuleContext<ParentTypeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case F32:
			case F64:
			case STRING:
			case VOID:
				{
				State = 528;
				primitiveType();
				}
				break;
			case IDENTIFIER:
				{
				{
				State = 532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 529;
					namespaceName();
					State = 530;
					Match(COLON);
					}
					break;
				}
				State = 537;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 534;
						parentTypeReference();
						}
						} 
					}
					State = 539;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				}
				State = 540;
				Match(IDENTIFIER);
				State = 542;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 541;
					genericArgumentList();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 546;
				arrayParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceSecondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeReferenceSecondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceSecondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeReferenceSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeReferenceSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceSecondary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceSecondaryContext typeReferenceSecondary() {
		TypeReferenceSecondaryContext _localctx = new TypeReferenceSecondaryContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeReferenceSecondary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(COMMA);
			State = 550;
			typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		public ShortTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterShortTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitShortTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortTypeReferenceContext shortTypeReference() {
		ShortTypeReferenceContext _localctx = new ShortTypeReferenceContext(Context, State);
		EnterRule(_localctx, 84, RULE_shortTypeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(IDENTIFIER);
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LGENERIC) {
				{
				State = 553;
				genericArgumentList();
				}
			}

			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARRAY) {
				{
				State = 556;
				arrayParameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LumaSharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public ParentTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterParentTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitParentTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentTypeReferenceContext parentTypeReference() {
		ParentTypeReferenceContext _localctx = new ParentTypeReferenceContext(Context, State);
		EnterRule(_localctx, 86, RULE_parentTypeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(IDENTIFIER);
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LGENERIC) {
				{
				State = 560;
				genericArgumentList();
				}
			}

			State = 563;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(LumaSharpParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LumaSharpParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LumaSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(LumaSharpParser.I8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(LumaSharpParser.U8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(LumaSharpParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(LumaSharpParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(LumaSharpParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(LumaSharpParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(LumaSharpParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(LumaSharpParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F32() { return GetToken(LumaSharpParser.F32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F64() { return GetToken(LumaSharpParser.F64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LumaSharpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LumaSharpParser.VOID, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 49151L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 90, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(LBLOCK);
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -30842709841280634L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681320447L) != 0)) {
				{
				{
				State = 568;
				statement();
				}
				}
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 574;
			Match(RBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(LumaSharpParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		public StatementLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatementLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatementLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLambdaContext statementLambda() {
		StatementLambdaContext _localctx = new StatementLambdaContext(Context, State);
		EnterRule(_localctx, 92, RULE_statementLambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(LAMBDA);
			State = 577;
			statement();
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 578;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeStatementContext methodInvokeStatement() {
			return GetRuleContext<MethodInvokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixStatementContext postfixStatement() {
			return GetRuleContext<PostfixStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableStatementContext localVariableStatement() {
			return GetRuleContext<LocalVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LumaSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(LumaSharpParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_statement);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 582;
				methodInvokeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 583;
				postfixStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 584;
				statementBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 585;
				localVariableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 586;
				assignStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 587;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 588;
				foreachStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 589;
				forStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 590;
				selectStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 591;
				tryStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 592;
				Match(BREAK);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 593;
				Match(CONTINUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LumaSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(RETURN);
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 597;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodInvokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeStatementContext methodInvokeStatement() {
		MethodInvokeStatementContext _localctx = new MethodInvokeStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_methodInvokeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 600;
				expression(0);
				}
				break;
			}
			State = 603;
			methodInvokeExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixStatementContext : ParserRuleContext {
		public IToken operand;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixStatementContext postfixStatement() {
		PostfixStatementContext _localctx = new PostfixStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_postfixStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			expression(0);
			State = 606;
			_localctx.operand = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
				_localctx.operand = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableSecondaryContext[] localVariableSecondary() {
			return GetRuleContexts<LocalVariableSecondaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableSecondaryContext localVariableSecondary(int i) {
			return GetRuleContext<LocalVariableSecondaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		public LocalVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableStatementContext localVariableStatement() {
		LocalVariableStatementContext _localctx = new LocalVariableStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_localVariableStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			typeReference();
			State = 609;
			Match(IDENTIFIER);
			State = 613;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 610;
					localVariableSecondary();
					}
					} 
				}
				State = 615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 616;
				variableAssignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableSecondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public LocalVariableSecondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableSecondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableSecondary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableSecondaryContext localVariableSecondary() {
		LocalVariableSecondaryContext _localctx = new LocalVariableSecondaryContext(Context, State);
		EnterRule(_localctx, 104, RULE_localVariableSecondary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(COMMA);
			State = 620;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LumaSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(ASSIGN);
			State = 628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__6:
			case T__7:
			case TYPE:
			case TRUE:
			case FALSE:
			case SIZE:
			case THIS:
			case BASE:
			case NEW:
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case F32:
			case F64:
			case STRING:
			case NULL:
			case VOID:
			case LPAREN:
			case IDENTIFIER:
			case INT:
			case DECIMAL:
			case HEX:
			case LITERAL:
			case Dot:
				{
				State = 623;
				expression(0);
				}
				break;
			case LBLOCK:
				{
				State = 624;
				Match(LBLOCK);
				State = 625;
				expressionList();
				State = 626;
				Match(RBLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public IToken assign;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LumaSharpParser.ASSIGN, 0); }
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_assignStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			expressionList();
			State = 631;
			_localctx.assign = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 120L) != 0) || _la==ASSIGN) ) {
				_localctx.assign = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 632;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LumaSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext[] elseifStatement() {
			return GetRuleContexts<ElseifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement(int i) {
			return GetRuleContext<ElseifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(IF);
			State = 635;
			expression(0);
			State = 638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 636;
				statement();
				}
				break;
			case 2:
				{
				State = 637;
				statementBlock();
				}
				break;
			}
			State = 643;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 640;
					elseifStatement();
					}
					} 
				}
				State = 645;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 646;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(LumaSharpParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStatementContext elseifStatement() {
		ElseifStatementContext _localctx = new ElseifStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_elseifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(ELSEIF);
			State = 650;
			expression(0);
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 651;
				statement();
				}
				break;
			case 2:
				{
				State = 652;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LumaSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(ELSE);
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 656;
				statement();
				}
				break;
			case 2:
				{
				State = 657;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LumaSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(LumaSharpParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(LumaSharpParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableStatementContext localVariableStatement() {
			return GetRuleContext<LocalVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(FOR);
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 17179918335L) != 0)) {
				{
				State = 661;
				localVariableStatement();
				}
			}

			State = 664;
			Match(COLON);
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -31512003184950906L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681304063L) != 0)) {
				{
				State = 665;
				expression(0);
				}
			}

			State = 668;
			Match(COLON);
			State = 670;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 669;
				expressionList();
				}
				break;
			}
			State = 674;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 672;
				statement();
				}
				break;
			case 2:
				{
				State = 673;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LumaSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(LumaSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeExpressionContext rangeExpression() {
			return GetRuleContext<RangeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_foreachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(FOR);
			State = 677;
			typeReference();
			State = 678;
			Match(IDENTIFIER);
			State = 679;
			Match(IN);
			State = 682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 680;
				rangeExpression();
				}
				break;
			case 2:
				{
				State = 681;
				expression(0);
				}
				break;
			}
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 684;
				statement();
				}
				break;
			case 2:
				{
				State = 685;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(LumaSharpParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext[] defaultStatement() {
			return GetRuleContexts<DefaultStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext defaultStatement(int i) {
			return GetRuleContext<DefaultStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext[] matchStatement() {
			return GetRuleContexts<MatchStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext matchStatement(int i) {
			return GetRuleContext<MatchStatementContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(SELECT);
			State = 689;
			expression(0);
			State = 690;
			Match(LBLOCK);
			State = 695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH || _la==DEFAULT) {
				{
				State = 693;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 691;
					defaultStatement();
					}
					break;
				case MATCH:
					{
					State = 692;
					matchStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 698;
			Match(RBLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LumaSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		public DefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStatementContext defaultStatement() {
		DefaultStatementContext _localctx = new DefaultStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_defaultStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			Match(DEFAULT);
			State = 701;
			Match(COLON);
			State = 711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 702;
				statement();
				}
				break;
			case 2:
				{
				State = 703;
				Match(LBLOCK);
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -30842709841280634L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681320447L) != 0)) {
					{
					{
					State = 704;
					statement();
					}
					}
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 710;
				Match(RBLOCK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(LumaSharpParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		public MatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchStatementContext matchStatement() {
		MatchStatementContext _localctx = new MatchStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_matchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(MATCH);
			State = 714;
			expression(0);
			State = 715;
			Match(COLON);
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 716;
				statement();
				}
				break;
			case 2:
				{
				State = 717;
				Match(LBLOCK);
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -30842709841280634L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681320447L) != 0)) {
					{
					{
					State = 718;
					statement();
					}
					}
					State = 723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 724;
				Match(RBLOCK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(LumaSharpParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatchStatementContext catchStatement() {
			return GetRuleContext<CatchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyStatementContext finallyStatement() {
			return GetRuleContext<FinallyStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(TRY);
			State = 737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 728;
				statement();
				}
				break;
			case 2:
				{
				State = 729;
				Match(LBLOCK);
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -30842709841280634L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681320447L) != 0)) {
					{
					{
					State = 730;
					statement();
					}
					}
					State = 735;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 736;
				Match(RBLOCK);
				}
				break;
			}
			State = 740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 739;
				catchStatement();
				}
				break;
			}
			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 742;
				finallyStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(LumaSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		public CatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchStatementContext catchStatement() {
		CatchStatementContext _localctx = new CatchStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_catchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(CATCH);
			State = 750;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 746;
				Match(LPAREN);
				State = 747;
				typeReference();
				State = 748;
				Match(RPAREN);
				}
				break;
			}
			State = 761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 752;
				statement();
				}
				break;
			case 2:
				{
				State = 753;
				Match(LBLOCK);
				State = 757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -30842709841280634L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681320447L) != 0)) {
					{
					{
					State = 754;
					statement();
					}
					}
					State = 759;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 760;
				Match(RBLOCK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(LumaSharpParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBLOCK() { return GetToken(LumaSharpParser.LBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBLOCK() { return GetToken(LumaSharpParser.RBLOCK, 0); }
		public FinallyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyStatementContext finallyStatement() {
		FinallyStatementContext _localctx = new FinallyStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_finallyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			Match(FINALLY);
			State = 773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 764;
				statement();
				}
				break;
			case 2:
				{
				State = 765;
				Match(LBLOCK);
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -30842709841280634L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681320447L) != 0)) {
					{
					{
					State = 766;
					statement();
					}
					}
					State = 771;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 772;
				Match(RBLOCK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSecondaryContext[] expressionSecondary() {
			return GetRuleContexts<ExpressionSecondaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSecondaryContext expressionSecondary(int i) {
			return GetRuleContext<ExpressionSecondaryContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 132, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			expression(0);
			State = 779;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 776;
					expressionSecondary();
					}
					} 
				}
				State = 781;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(LumaSharpParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		public ExpressionLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpressionLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpressionLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLambdaContext expressionLambda() {
		ExpressionLambdaContext _localctx = new ExpressionLambdaContext(Context, State);
		EnterRule(_localctx, 134, RULE_expressionLambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(LAMBDA);
			State = 783;
			expression(0);
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 784;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken unaryPrefix;
		public IToken binary;
		public IToken unaryPostfix;
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenExpressionContext parenExpression() {
			return GetRuleContext<ParenExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionContext typeExpression() {
			return GetRuleContext<TypeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeExpressionContext sizeExpression() {
			return GetRuleContext<SizeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(LumaSharpParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RGENERIC() { return GetToken(LumaSharpParser.RGENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LGENERIC() { return GetToken(LumaSharpParser.LGENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERNARY() { return GetToken(LumaSharpParser.TERNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LumaSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessExpressionContext fieldAccessExpression() {
			return GetRuleContext<FieldAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression() {
			return GetRuleContext<IndexExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 136;
		EnterRecursionRule(_localctx, 136, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 788;
				methodInvokeExpression();
				}
				break;
			case 2:
				{
				State = 789;
				typeReference();
				}
				break;
			case 3:
				{
				State = 790;
				_localctx.unaryPrefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 390L) != 0)) ) {
					_localctx.unaryPrefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 791;
				expression(16);
				}
				break;
			case 4:
				{
				State = 792;
				Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				State = 793;
				parenExpression();
				}
				break;
			case 6:
				{
				State = 794;
				typeExpression();
				}
				break;
			case 7:
				{
				State = 795;
				sizeExpression();
				}
				break;
			case 8:
				{
				State = 796;
				newExpression();
				}
				break;
			case 9:
				{
				State = 797;
				literalExpression();
				}
				break;
			case 10:
				{
				State = 798;
				Match(THIS);
				}
				break;
			case 11:
				{
				State = 799;
				Match(BASE);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 830;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 828;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 802;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 803;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 804;
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 805;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 806;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__11) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 807;
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 808;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 809;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 6917529027641081871L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 810;
						expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 811;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 812;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__16 || _la==T__17) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 813;
						expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 814;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 815;
						Match(TERNARY);
						State = 816;
						expression(0);
						State = 817;
						Match(COLON);
						State = 818;
						expression(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 820;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 821;
						methodInvokeExpression();
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 822;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 823;
						fieldAccessExpression();
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 824;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 825;
						_localctx.unaryPostfix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__0 || _la==T__1) ) {
							_localctx.unaryPostfix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 826;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 827;
						indexExpression();
						}
						break;
					}
					} 
				}
				State = 832;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		public ParenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenExpressionContext parenExpression() {
		ParenExpressionContext _localctx = new ParenExpressionContext(Context, State);
		EnterRule(_localctx, 138, RULE_parenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(LPAREN);
			State = 834;
			expression(0);
			State = 835;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSecondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LumaSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionSecondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSecondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpressionSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpressionSecondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSecondary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSecondaryContext expressionSecondary() {
		ExpressionSecondaryContext _localctx = new ExpressionSecondaryContext(Context, State);
		EnterRule(_localctx, 140, RULE_expressionSecondary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			Match(COMMA);
			State = 838;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public IToken decorator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(LumaSharpParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LumaSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LumaSharpParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(LumaSharpParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(LumaSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(LumaSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(LumaSharpParser.NULL, 0); }
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_literalExpression);
		int _la;
		try {
			State = 853;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 840;
				Match(HEX);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 841;
				Match(INT);
				State = 843;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 842;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 845;
				Match(DECIMAL);
				State = 847;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 846;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__21 || _la==T__22) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 849;
				Match(LITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 850;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 851;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 852;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		public TypeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExpressionContext typeExpression() {
		TypeExpressionContext _localctx = new TypeExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_typeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			Match(TYPE);
			State = 856;
			Match(LPAREN);
			State = 857;
			typeReference();
			State = 858;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(LumaSharpParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		public SizeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeExpressionContext sizeExpression() {
		SizeExpressionContext _localctx = new SizeExpressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_sizeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860;
			Match(SIZE);
			State = 861;
			Match(LPAREN);
			State = 862;
			typeReference();
			State = 863;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(LumaSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_newExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			Match(NEW);
			State = 866;
			typeReference();
			State = 868;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 867;
				argumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARRAY() { return GetToken(LumaSharpParser.LARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARRAY() { return GetToken(LumaSharpParser.RARRAY, 0); }
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			Match(LARRAY);
			State = 871;
			expressionList();
			State = 872;
			Match(RARRAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LumaSharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public FieldAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessExpressionContext fieldAccessExpression() {
		FieldAccessExpressionContext _localctx = new FieldAccessExpressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_fieldAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			Match(DOT);
			State = 875;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(LumaSharpParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public MethodInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeExpressionContext methodInvokeExpression() {
		MethodInvokeExpressionContext _localctx = new MethodInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 154, RULE_methodInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dot) {
				{
				State = 877;
				Match(Dot);
				}
			}

			State = 880;
			Match(IDENTIFIER);
			State = 882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LGENERIC) {
				{
				State = 881;
				genericArgumentList();
				}
			}

			State = 884;
			argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LumaSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LumaSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 156, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			Match(LPAREN);
			State = 888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -31512003184950906L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 42681304063L) != 0)) {
				{
				State = 887;
				expressionList();
				}
			}

			State = 890;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGEINCLUSIVE() { return GetToken(LumaSharpParser.RANGEINCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGEEXCLUSIVE() { return GetToken(LumaSharpParser.RANGEEXCLUSIVE, 0); }
		public RangeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeExpressionContext rangeExpression() {
		RangeExpressionContext _localctx = new RangeExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_rangeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			expression(0);
			State = 893;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGEINCLUSIVE || _la==RANGEEXCLUSIVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 894;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 68: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 20);
		case 6: return Precpred(Context, 19);
		case 7: return Precpred(Context, 15);
		case 8: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,99,897,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,0,5,0,168,8,0,
		10,0,12,0,171,9,0,1,1,1,1,3,1,175,8,1,1,2,1,2,3,2,179,8,2,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,5,6,196,8,6,10,6,12,6,
		199,9,6,1,7,1,7,1,7,1,8,5,8,205,8,8,10,8,12,8,208,9,8,1,8,5,8,211,8,8,
		10,8,12,8,214,9,8,1,8,1,8,1,8,3,8,219,8,8,1,8,3,8,222,8,8,1,8,3,8,225,
		8,8,1,8,1,8,1,9,5,9,230,8,9,10,9,12,9,233,9,9,1,9,5,9,236,8,9,10,9,12,
		9,239,9,9,1,9,1,9,1,9,3,9,244,8,9,1,9,3,9,247,8,9,1,9,1,9,1,10,5,10,252,
		8,10,10,10,12,10,255,9,10,1,10,5,10,258,8,10,10,10,12,10,261,9,10,1,10,
		1,10,1,10,1,10,3,10,267,8,10,1,10,1,10,1,11,1,11,5,11,273,8,11,10,11,12,
		11,276,9,11,1,11,1,11,1,12,5,12,281,8,12,10,12,12,12,284,9,12,1,12,1,12,
		3,12,288,8,12,1,12,3,12,291,8,12,1,13,1,13,1,13,3,13,296,8,13,1,14,1,14,
		5,14,300,8,14,10,14,12,14,303,9,14,1,14,1,14,1,15,1,15,5,15,309,8,15,10,
		15,12,15,312,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,322,8,16,
		1,17,1,17,1,17,3,17,327,8,17,1,18,5,18,330,8,18,10,18,12,18,333,9,18,1,
		18,5,18,336,8,18,10,18,12,18,339,9,18,1,18,1,18,1,18,3,18,344,8,18,1,18,
		3,18,347,8,18,1,19,5,19,350,8,19,10,19,12,19,353,9,19,1,19,5,19,356,8,
		19,10,19,12,19,359,9,19,1,19,1,19,1,19,3,19,364,8,19,1,19,1,19,1,20,1,
		20,1,20,3,20,371,8,20,3,20,373,8,20,1,21,1,21,1,21,1,21,1,21,3,21,380,
		8,21,1,21,3,21,383,8,21,1,22,5,22,386,8,22,10,22,12,22,389,9,22,1,22,5,
		22,392,8,22,10,22,12,22,395,9,22,1,22,1,22,1,22,3,22,400,8,22,1,22,1,22,
		3,22,404,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,5,24,414,8,24,10,
		24,12,24,417,9,24,1,24,5,24,420,8,24,10,24,12,24,423,9,24,1,24,1,24,1,
		24,3,24,428,8,24,1,24,1,24,3,24,432,8,24,1,24,1,24,3,24,436,8,24,1,25,
		1,25,3,25,440,8,25,1,26,1,26,1,26,5,26,445,8,26,10,26,12,26,448,9,26,3,
		26,450,8,26,1,26,1,26,1,27,5,27,455,8,27,10,27,12,27,458,9,27,1,27,1,27,
		1,27,3,27,463,8,27,1,27,1,27,3,27,467,8,27,1,28,1,28,1,28,1,29,1,29,1,
		30,1,30,1,30,5,30,477,8,30,10,30,12,30,480,9,30,1,30,1,30,1,31,1,31,3,
		31,486,8,31,1,32,1,32,1,32,1,33,1,33,1,33,5,33,494,8,33,10,33,12,33,497,
		9,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,3,36,506,8,36,1,36,1,36,1,37,1,
		37,3,37,512,8,37,1,37,3,37,515,8,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,
		5,39,524,8,39,10,39,12,39,527,9,39,1,40,1,40,1,40,1,40,3,40,533,8,40,1,
		40,5,40,536,8,40,10,40,12,40,539,9,40,1,40,1,40,3,40,543,8,40,3,40,545,
		8,40,1,40,3,40,548,8,40,1,41,1,41,1,41,1,42,1,42,3,42,555,8,42,1,42,3,
		42,558,8,42,1,43,1,43,3,43,562,8,43,1,43,1,43,1,44,1,44,1,45,1,45,5,45,
		570,8,45,10,45,12,45,573,9,45,1,45,1,45,1,46,1,46,1,46,3,46,580,8,46,1,
		47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,595,
		8,47,1,48,1,48,3,48,599,8,48,1,49,3,49,602,8,49,1,49,1,49,1,50,1,50,1,
		50,1,51,1,51,1,51,5,51,612,8,51,10,51,12,51,615,9,51,1,51,3,51,618,8,51,
		1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,629,8,53,1,54,1,54,1,
		54,1,54,1,55,1,55,1,55,1,55,3,55,639,8,55,1,55,5,55,642,8,55,10,55,12,
		55,645,9,55,1,55,3,55,648,8,55,1,56,1,56,1,56,1,56,3,56,654,8,56,1,57,
		1,57,1,57,3,57,659,8,57,1,58,1,58,3,58,663,8,58,1,58,1,58,3,58,667,8,58,
		1,58,1,58,3,58,671,8,58,1,58,1,58,3,58,675,8,58,1,59,1,59,1,59,1,59,1,
		59,1,59,3,59,683,8,59,1,59,1,59,3,59,687,8,59,1,60,1,60,1,60,1,60,1,60,
		5,60,694,8,60,10,60,12,60,697,9,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
		5,61,706,8,61,10,61,12,61,709,9,61,1,61,3,61,712,8,61,1,62,1,62,1,62,1,
		62,1,62,1,62,5,62,720,8,62,10,62,12,62,723,9,62,1,62,3,62,726,8,62,1,63,
		1,63,1,63,1,63,5,63,732,8,63,10,63,12,63,735,9,63,1,63,3,63,738,8,63,1,
		63,3,63,741,8,63,1,63,3,63,744,8,63,1,64,1,64,1,64,1,64,1,64,3,64,751,
		8,64,1,64,1,64,1,64,5,64,756,8,64,10,64,12,64,759,9,64,1,64,3,64,762,8,
		64,1,65,1,65,1,65,1,65,5,65,768,8,65,10,65,12,65,771,9,65,1,65,3,65,774,
		8,65,1,66,1,66,5,66,778,8,66,10,66,12,66,781,9,66,1,67,1,67,1,67,3,67,
		786,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
		68,3,68,801,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
		1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
		1,68,5,68,829,8,68,10,68,12,68,832,9,68,1,69,1,69,1,69,1,69,1,70,1,70,
		1,70,1,71,1,71,1,71,3,71,844,8,71,1,71,1,71,3,71,848,8,71,1,71,1,71,1,
		71,1,71,3,71,854,8,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,
		1,74,1,74,1,74,3,74,869,8,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,77,3,
		77,879,8,77,1,77,1,77,3,77,883,8,77,1,77,1,77,1,78,1,78,3,78,889,8,78,
		1,78,1,78,1,79,1,79,1,79,1,79,1,79,0,1,136,80,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
		112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
		148,150,152,154,156,158,0,14,2,0,26,26,28,28,1,0,53,54,1,0,30,33,2,0,58,
		71,73,73,1,0,1,2,2,0,3,6,86,86,2,0,1,2,7,8,1,0,9,11,2,0,7,7,12,12,2,0,
		13,16,74,75,1,0,17,18,1,0,19,21,1,0,22,23,1,0,90,91,967,0,163,1,0,0,0,
		2,174,1,0,0,0,4,178,1,0,0,0,6,180,1,0,0,0,8,183,1,0,0,0,10,190,1,0,0,0,
		12,193,1,0,0,0,14,200,1,0,0,0,16,206,1,0,0,0,18,231,1,0,0,0,20,253,1,0,
		0,0,22,270,1,0,0,0,24,282,1,0,0,0,26,295,1,0,0,0,28,297,1,0,0,0,30,306,
		1,0,0,0,32,321,1,0,0,0,34,323,1,0,0,0,36,331,1,0,0,0,38,351,1,0,0,0,40,
		372,1,0,0,0,42,374,1,0,0,0,44,387,1,0,0,0,46,407,1,0,0,0,48,415,1,0,0,
		0,50,439,1,0,0,0,52,441,1,0,0,0,54,456,1,0,0,0,56,468,1,0,0,0,58,471,1,
		0,0,0,60,473,1,0,0,0,62,483,1,0,0,0,64,487,1,0,0,0,66,490,1,0,0,0,68,498,
		1,0,0,0,70,500,1,0,0,0,72,503,1,0,0,0,74,509,1,0,0,0,76,518,1,0,0,0,78,
		521,1,0,0,0,80,544,1,0,0,0,82,549,1,0,0,0,84,552,1,0,0,0,86,559,1,0,0,
		0,88,565,1,0,0,0,90,567,1,0,0,0,92,576,1,0,0,0,94,594,1,0,0,0,96,596,1,
		0,0,0,98,601,1,0,0,0,100,605,1,0,0,0,102,608,1,0,0,0,104,619,1,0,0,0,106,
		622,1,0,0,0,108,630,1,0,0,0,110,634,1,0,0,0,112,649,1,0,0,0,114,655,1,
		0,0,0,116,660,1,0,0,0,118,676,1,0,0,0,120,688,1,0,0,0,122,700,1,0,0,0,
		124,713,1,0,0,0,126,727,1,0,0,0,128,745,1,0,0,0,130,763,1,0,0,0,132,775,
		1,0,0,0,134,782,1,0,0,0,136,800,1,0,0,0,138,833,1,0,0,0,140,837,1,0,0,
		0,142,853,1,0,0,0,144,855,1,0,0,0,146,860,1,0,0,0,148,865,1,0,0,0,150,
		870,1,0,0,0,152,874,1,0,0,0,154,878,1,0,0,0,156,886,1,0,0,0,158,892,1,
		0,0,0,160,162,3,2,1,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,
		163,164,1,0,0,0,164,169,1,0,0,0,165,163,1,0,0,0,166,168,3,4,2,0,167,166,
		1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,1,1,0,0,0,
		171,169,1,0,0,0,172,175,3,6,3,0,173,175,3,8,4,0,174,172,1,0,0,0,174,173,
		1,0,0,0,175,3,1,0,0,0,176,179,3,10,5,0,177,179,3,26,13,0,178,176,1,0,0,
		0,178,177,1,0,0,0,179,5,1,0,0,0,180,181,5,24,0,0,181,182,3,12,6,0,182,
		7,1,0,0,0,183,184,5,24,0,0,184,185,5,92,0,0,185,186,5,34,0,0,186,187,3,
		12,6,0,187,188,5,82,0,0,188,189,3,80,40,0,189,9,1,0,0,0,190,191,5,25,0,
		0,191,192,3,12,6,0,192,11,1,0,0,0,193,197,5,92,0,0,194,196,3,14,7,0,195,
		194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,13,1,0,
		0,0,199,197,1,0,0,0,200,201,5,84,0,0,201,202,5,92,0,0,202,15,1,0,0,0,203,
		205,3,34,17,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,
		1,0,0,0,207,212,1,0,0,0,208,206,1,0,0,0,209,211,3,58,29,0,210,209,1,0,
		0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,
		212,1,0,0,0,215,216,7,0,0,0,216,218,5,92,0,0,217,219,3,60,30,0,218,217,
		1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,222,5,38,0,0,221,220,1,0,0,
		0,221,222,1,0,0,0,222,224,1,0,0,0,223,225,3,76,38,0,224,223,1,0,0,0,224,
		225,1,0,0,0,225,226,1,0,0,0,226,227,3,30,15,0,227,17,1,0,0,0,228,230,3,
		34,17,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,
		0,232,237,1,0,0,0,233,231,1,0,0,0,234,236,3,58,29,0,235,234,1,0,0,0,236,
		239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,1,
		0,0,0,240,241,5,27,0,0,241,243,5,92,0,0,242,244,3,60,30,0,243,242,1,0,
		0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,247,3,76,38,0,246,245,1,0,0,0,
		246,247,1,0,0,0,247,248,1,0,0,0,248,249,3,30,15,0,249,19,1,0,0,0,250,252,
		3,34,17,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,
		0,0,254,259,1,0,0,0,255,253,1,0,0,0,256,258,3,58,29,0,257,256,1,0,0,0,
		258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,259,
		1,0,0,0,262,263,5,29,0,0,263,266,5,92,0,0,264,265,5,84,0,0,265,267,3,88,
		44,0,266,264,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,3,22,11,0,
		269,21,1,0,0,0,270,274,5,78,0,0,271,273,3,24,12,0,272,271,1,0,0,0,273,
		276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,1,
		0,0,0,277,278,5,79,0,0,278,23,1,0,0,0,279,281,3,34,17,0,280,279,1,0,0,
		0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,
		282,1,0,0,0,285,287,5,92,0,0,286,288,3,106,53,0,287,286,1,0,0,0,287,288,
		1,0,0,0,288,290,1,0,0,0,289,291,5,83,0,0,290,289,1,0,0,0,290,291,1,0,0,
		0,291,25,1,0,0,0,292,296,3,16,8,0,293,296,3,18,9,0,294,296,3,20,10,0,295,
		292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,0,296,27,1,0,0,0,297,301,5,78,
		0,0,298,300,3,26,13,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,
		301,302,1,0,0,0,302,304,1,0,0,0,303,301,1,0,0,0,304,305,5,79,0,0,305,29,
		1,0,0,0,306,310,5,78,0,0,307,309,3,32,16,0,308,307,1,0,0,0,309,312,1,0,
		0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,
		314,5,79,0,0,314,31,1,0,0,0,315,322,3,16,8,0,316,322,3,18,9,0,317,322,
		3,20,10,0,318,322,3,36,18,0,319,322,3,38,19,0,320,322,3,48,24,0,321,315,
		1,0,0,0,321,316,1,0,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,1,0,0,
		0,321,320,1,0,0,0,322,33,1,0,0,0,323,324,5,85,0,0,324,326,3,80,40,0,325,
		327,3,156,78,0,326,325,1,0,0,0,326,327,1,0,0,0,327,35,1,0,0,0,328,330,
		3,34,17,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,
		0,0,332,337,1,0,0,0,333,331,1,0,0,0,334,336,3,58,29,0,335,334,1,0,0,0,
		336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,337,
		1,0,0,0,340,341,3,80,40,0,341,343,5,92,0,0,342,344,3,106,53,0,343,342,
		1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,347,5,83,0,0,346,345,1,0,0,
		0,346,347,1,0,0,0,347,37,1,0,0,0,348,350,3,34,17,0,349,348,1,0,0,0,350,
		353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,357,1,0,0,0,353,351,1,
		0,0,0,354,356,3,58,29,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,
		0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,361,3,80,40,0,361,
		363,5,92,0,0,362,364,5,38,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,
		1,0,0,0,365,366,3,40,20,0,366,39,1,0,0,0,367,373,3,134,67,0,368,370,3,
		42,21,0,369,371,3,42,21,0,370,369,1,0,0,0,370,371,1,0,0,0,371,373,1,0,
		0,0,372,367,1,0,0,0,372,368,1,0,0,0,373,41,1,0,0,0,374,375,5,87,0,0,375,
		376,7,1,0,0,376,382,5,84,0,0,377,379,3,94,47,0,378,380,5,83,0,0,379,378,
		1,0,0,0,379,380,1,0,0,0,380,383,1,0,0,0,381,383,3,90,45,0,382,377,1,0,
		0,0,382,381,1,0,0,0,383,43,1,0,0,0,384,386,3,34,17,0,385,384,1,0,0,0,386,
		389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,393,1,0,0,0,389,387,1,
		0,0,0,390,392,3,58,29,0,391,390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,
		0,393,394,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,397,5,55,0,0,397,
		399,5,80,0,0,398,400,3,52,26,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,
		1,0,0,0,401,403,5,81,0,0,402,404,3,46,23,0,403,402,1,0,0,0,403,404,1,0,
		0,0,404,405,1,0,0,0,405,406,3,90,45,0,406,45,1,0,0,0,407,408,5,84,0,0,
		408,409,5,80,0,0,409,410,3,132,66,0,410,411,5,81,0,0,411,47,1,0,0,0,412,
		414,3,34,17,0,413,412,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,
		1,0,0,0,416,421,1,0,0,0,417,415,1,0,0,0,418,420,3,58,29,0,419,418,1,0,
		0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,
		421,1,0,0,0,424,425,3,50,25,0,425,427,5,92,0,0,426,428,3,60,30,0,427,426,
		1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,431,3,52,26,0,430,432,5,38,
		0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,435,1,0,0,0,433,436,3,92,46,0,
		434,436,3,90,45,0,435,433,1,0,0,0,435,434,1,0,0,0,435,436,1,0,0,0,436,
		49,1,0,0,0,437,440,5,73,0,0,438,440,3,78,39,0,439,437,1,0,0,0,439,438,
		1,0,0,0,440,51,1,0,0,0,441,449,5,80,0,0,442,446,3,54,27,0,443,445,3,56,
		28,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,
		450,1,0,0,0,448,446,1,0,0,0,449,442,1,0,0,0,449,450,1,0,0,0,450,451,1,
		0,0,0,451,452,5,81,0,0,452,53,1,0,0,0,453,455,3,34,17,0,454,453,1,0,0,
		0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,
		456,1,0,0,0,459,460,3,80,40,0,460,462,5,92,0,0,461,463,5,88,0,0,462,461,
		1,0,0,0,462,463,1,0,0,0,463,466,1,0,0,0,464,465,5,86,0,0,465,467,3,136,
		68,0,466,464,1,0,0,0,466,467,1,0,0,0,467,55,1,0,0,0,468,469,5,83,0,0,469,
		470,3,54,27,0,470,57,1,0,0,0,471,472,7,2,0,0,472,59,1,0,0,0,473,474,5,
		74,0,0,474,478,3,62,31,0,475,477,3,64,32,0,476,475,1,0,0,0,477,480,1,0,
		0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,481,1,0,0,0,480,478,1,0,0,0,481,
		482,5,75,0,0,482,61,1,0,0,0,483,485,5,92,0,0,484,486,3,66,33,0,485,484,
		1,0,0,0,485,486,1,0,0,0,486,63,1,0,0,0,487,488,5,83,0,0,488,489,3,62,31,
		0,489,65,1,0,0,0,490,491,5,84,0,0,491,495,3,68,34,0,492,494,3,70,35,0,
		493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,67,
		1,0,0,0,497,495,1,0,0,0,498,499,3,80,40,0,499,69,1,0,0,0,500,501,5,83,
		0,0,501,502,3,68,34,0,502,71,1,0,0,0,503,505,5,74,0,0,504,506,3,78,39,
		0,505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,508,5,75,0,0,508,
		73,1,0,0,0,509,511,5,76,0,0,510,512,5,83,0,0,511,510,1,0,0,0,511,512,1,
		0,0,0,512,514,1,0,0,0,513,515,5,83,0,0,514,513,1,0,0,0,514,515,1,0,0,0,
		515,516,1,0,0,0,516,517,5,77,0,0,517,75,1,0,0,0,518,519,5,84,0,0,519,520,
		3,78,39,0,520,77,1,0,0,0,521,525,3,80,40,0,522,524,3,82,41,0,523,522,1,
		0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,79,1,0,0,0,527,
		525,1,0,0,0,528,545,3,88,44,0,529,530,3,12,6,0,530,531,5,84,0,0,531,533,
		1,0,0,0,532,529,1,0,0,0,532,533,1,0,0,0,533,537,1,0,0,0,534,536,3,86,43,
		0,535,534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,
		540,1,0,0,0,539,537,1,0,0,0,540,542,5,92,0,0,541,543,3,72,36,0,542,541,
		1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,528,1,0,0,0,544,532,1,0,0,
		0,545,547,1,0,0,0,546,548,3,74,37,0,547,546,1,0,0,0,547,548,1,0,0,0,548,
		81,1,0,0,0,549,550,5,83,0,0,550,551,3,80,40,0,551,83,1,0,0,0,552,554,5,
		92,0,0,553,555,3,72,36,0,554,553,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,
		0,556,558,3,74,37,0,557,556,1,0,0,0,557,558,1,0,0,0,558,85,1,0,0,0,559,
		561,5,92,0,0,560,562,3,72,36,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,
		1,0,0,0,563,564,5,82,0,0,564,87,1,0,0,0,565,566,7,3,0,0,566,89,1,0,0,0,
		567,571,5,78,0,0,568,570,3,94,47,0,569,568,1,0,0,0,570,573,1,0,0,0,571,
		569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,575,5,
		79,0,0,575,91,1,0,0,0,576,577,5,87,0,0,577,579,3,94,47,0,578,580,5,83,
		0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,93,1,0,0,0,581,595,3,96,48,0,582,
		595,3,98,49,0,583,595,3,100,50,0,584,595,3,90,45,0,585,595,3,102,51,0,
		586,595,3,108,54,0,587,595,3,110,55,0,588,595,3,118,59,0,589,595,3,116,
		58,0,590,595,3,120,60,0,591,595,3,126,63,0,592,595,5,36,0,0,593,595,5,
		35,0,0,594,581,1,0,0,0,594,582,1,0,0,0,594,583,1,0,0,0,594,584,1,0,0,0,
		594,585,1,0,0,0,594,586,1,0,0,0,594,587,1,0,0,0,594,588,1,0,0,0,594,589,
		1,0,0,0,594,590,1,0,0,0,594,591,1,0,0,0,594,592,1,0,0,0,594,593,1,0,0,
		0,595,95,1,0,0,0,596,598,5,37,0,0,597,599,3,132,66,0,598,597,1,0,0,0,598,
		599,1,0,0,0,599,97,1,0,0,0,600,602,3,136,68,0,601,600,1,0,0,0,601,602,
		1,0,0,0,602,603,1,0,0,0,603,604,3,154,77,0,604,99,1,0,0,0,605,606,3,136,
		68,0,606,607,7,4,0,0,607,101,1,0,0,0,608,609,3,80,40,0,609,613,5,92,0,
		0,610,612,3,104,52,0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,
		614,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,616,618,3,106,53,0,617,616,
		1,0,0,0,617,618,1,0,0,0,618,103,1,0,0,0,619,620,5,83,0,0,620,621,5,92,
		0,0,621,105,1,0,0,0,622,628,5,86,0,0,623,629,3,136,68,0,624,625,5,78,0,
		0,625,626,3,132,66,0,626,627,5,79,0,0,627,629,1,0,0,0,628,623,1,0,0,0,
		628,624,1,0,0,0,629,107,1,0,0,0,630,631,3,132,66,0,631,632,7,5,0,0,632,
		633,3,132,66,0,633,109,1,0,0,0,634,635,5,39,0,0,635,638,3,136,68,0,636,
		639,3,94,47,0,637,639,3,90,45,0,638,636,1,0,0,0,638,637,1,0,0,0,639,643,
		1,0,0,0,640,642,3,112,56,0,641,640,1,0,0,0,642,645,1,0,0,0,643,641,1,0,
		0,0,643,644,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,646,648,3,114,57,0,
		647,646,1,0,0,0,647,648,1,0,0,0,648,111,1,0,0,0,649,650,5,41,0,0,650,653,
		3,136,68,0,651,654,3,94,47,0,652,654,3,90,45,0,653,651,1,0,0,0,653,652,
		1,0,0,0,654,113,1,0,0,0,655,658,5,40,0,0,656,659,3,94,47,0,657,659,3,90,
		45,0,658,656,1,0,0,0,658,657,1,0,0,0,659,115,1,0,0,0,660,662,5,45,0,0,
		661,663,3,102,51,0,662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,
		666,5,84,0,0,665,667,3,136,68,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,
		1,0,0,0,668,670,5,84,0,0,669,671,3,132,66,0,670,669,1,0,0,0,670,671,1,
		0,0,0,671,674,1,0,0,0,672,675,3,94,47,0,673,675,3,90,45,0,674,672,1,0,
		0,0,674,673,1,0,0,0,675,117,1,0,0,0,676,677,5,45,0,0,677,678,3,80,40,0,
		678,679,5,92,0,0,679,682,5,44,0,0,680,683,3,158,79,0,681,683,3,136,68,
		0,682,680,1,0,0,0,682,681,1,0,0,0,683,686,1,0,0,0,684,687,3,94,47,0,685,
		687,3,90,45,0,686,684,1,0,0,0,686,685,1,0,0,0,687,119,1,0,0,0,688,689,
		5,46,0,0,689,690,3,136,68,0,690,695,5,78,0,0,691,694,3,122,61,0,692,694,
		3,124,62,0,693,691,1,0,0,0,693,692,1,0,0,0,694,697,1,0,0,0,695,693,1,0,
		0,0,695,696,1,0,0,0,696,698,1,0,0,0,697,695,1,0,0,0,698,699,5,79,0,0,699,
		121,1,0,0,0,700,701,5,48,0,0,701,711,5,84,0,0,702,712,3,94,47,0,703,707,
		5,78,0,0,704,706,3,94,47,0,705,704,1,0,0,0,706,709,1,0,0,0,707,705,1,0,
		0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,707,1,0,0,0,710,712,5,79,0,0,711,
		702,1,0,0,0,711,703,1,0,0,0,712,123,1,0,0,0,713,714,5,47,0,0,714,715,3,
		136,68,0,715,725,5,84,0,0,716,726,3,94,47,0,717,721,5,78,0,0,718,720,3,
		94,47,0,719,718,1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,
		0,722,724,1,0,0,0,723,721,1,0,0,0,724,726,5,79,0,0,725,716,1,0,0,0,725,
		717,1,0,0,0,726,125,1,0,0,0,727,737,5,49,0,0,728,738,3,94,47,0,729,733,
		5,78,0,0,730,732,3,94,47,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,
		0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,733,1,0,0,0,736,738,5,79,0,0,737,
		728,1,0,0,0,737,729,1,0,0,0,738,740,1,0,0,0,739,741,3,128,64,0,740,739,
		1,0,0,0,740,741,1,0,0,0,741,743,1,0,0,0,742,744,3,130,65,0,743,742,1,0,
		0,0,743,744,1,0,0,0,744,127,1,0,0,0,745,750,5,50,0,0,746,747,5,80,0,0,
		747,748,3,80,40,0,748,749,5,81,0,0,749,751,1,0,0,0,750,746,1,0,0,0,750,
		751,1,0,0,0,751,761,1,0,0,0,752,762,3,94,47,0,753,757,5,78,0,0,754,756,
		3,94,47,0,755,754,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,
		0,0,758,760,1,0,0,0,759,757,1,0,0,0,760,762,5,79,0,0,761,752,1,0,0,0,761,
		753,1,0,0,0,762,129,1,0,0,0,763,773,5,51,0,0,764,774,3,94,47,0,765,769,
		5,78,0,0,766,768,3,94,47,0,767,766,1,0,0,0,768,771,1,0,0,0,769,767,1,0,
		0,0,769,770,1,0,0,0,770,772,1,0,0,0,771,769,1,0,0,0,772,774,5,79,0,0,773,
		764,1,0,0,0,773,765,1,0,0,0,774,131,1,0,0,0,775,779,3,136,68,0,776,778,
		3,140,70,0,777,776,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,
		0,0,780,133,1,0,0,0,781,779,1,0,0,0,782,783,5,87,0,0,783,785,3,136,68,
		0,784,786,5,83,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,135,1,0,0,0,787,
		788,6,68,-1,0,788,801,3,154,77,0,789,801,3,80,40,0,790,791,7,6,0,0,791,
		801,3,136,68,16,792,801,5,92,0,0,793,801,3,138,69,0,794,801,3,144,72,0,
		795,801,3,146,73,0,796,801,3,148,74,0,797,801,3,142,71,0,798,801,5,55,
		0,0,799,801,5,56,0,0,800,787,1,0,0,0,800,789,1,0,0,0,800,790,1,0,0,0,800,
		792,1,0,0,0,800,793,1,0,0,0,800,794,1,0,0,0,800,795,1,0,0,0,800,796,1,
		0,0,0,800,797,1,0,0,0,800,798,1,0,0,0,800,799,1,0,0,0,801,830,1,0,0,0,
		802,803,10,14,0,0,803,804,7,7,0,0,804,829,3,136,68,15,805,806,10,13,0,
		0,806,807,7,8,0,0,807,829,3,136,68,14,808,809,10,12,0,0,809,810,7,9,0,
		0,810,829,3,136,68,13,811,812,10,11,0,0,812,813,7,10,0,0,813,829,3,136,
		68,12,814,815,10,10,0,0,815,816,5,89,0,0,816,817,3,136,68,0,817,818,5,
		84,0,0,818,819,3,136,68,11,819,829,1,0,0,0,820,821,10,20,0,0,821,829,3,
		154,77,0,822,823,10,19,0,0,823,829,3,152,76,0,824,825,10,15,0,0,825,829,
		7,4,0,0,826,827,10,9,0,0,827,829,3,150,75,0,828,802,1,0,0,0,828,805,1,
		0,0,0,828,808,1,0,0,0,828,811,1,0,0,0,828,814,1,0,0,0,828,820,1,0,0,0,
		828,822,1,0,0,0,828,824,1,0,0,0,828,826,1,0,0,0,829,832,1,0,0,0,830,828,
		1,0,0,0,830,831,1,0,0,0,831,137,1,0,0,0,832,830,1,0,0,0,833,834,5,80,0,
		0,834,835,3,136,68,0,835,836,5,81,0,0,836,139,1,0,0,0,837,838,5,83,0,0,
		838,839,3,136,68,0,839,141,1,0,0,0,840,854,5,95,0,0,841,843,5,93,0,0,842,
		844,7,11,0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,854,1,0,0,0,845,847,5,
		94,0,0,846,848,7,12,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,854,1,0,0,
		0,849,854,5,96,0,0,850,854,5,42,0,0,851,854,5,43,0,0,852,854,5,72,0,0,
		853,840,1,0,0,0,853,841,1,0,0,0,853,845,1,0,0,0,853,849,1,0,0,0,853,850,
		1,0,0,0,853,851,1,0,0,0,853,852,1,0,0,0,854,143,1,0,0,0,855,856,5,26,0,
		0,856,857,5,80,0,0,857,858,3,80,40,0,858,859,5,81,0,0,859,145,1,0,0,0,
		860,861,5,52,0,0,861,862,5,80,0,0,862,863,3,80,40,0,863,864,5,81,0,0,864,
		147,1,0,0,0,865,866,5,57,0,0,866,868,3,80,40,0,867,869,3,156,78,0,868,
		867,1,0,0,0,868,869,1,0,0,0,869,149,1,0,0,0,870,871,5,76,0,0,871,872,3,
		132,66,0,872,873,5,77,0,0,873,151,1,0,0,0,874,875,5,82,0,0,875,876,5,92,
		0,0,876,153,1,0,0,0,877,879,5,99,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,
		880,1,0,0,0,880,882,5,92,0,0,881,883,3,72,36,0,882,881,1,0,0,0,882,883,
		1,0,0,0,883,884,1,0,0,0,884,885,3,156,78,0,885,155,1,0,0,0,886,888,5,80,
		0,0,887,889,3,132,66,0,888,887,1,0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,
		890,891,5,81,0,0,891,157,1,0,0,0,892,893,3,136,68,0,893,894,7,13,0,0,894,
		895,3,136,68,0,895,159,1,0,0,0,113,163,169,174,178,197,206,212,218,221,
		224,231,237,243,246,253,259,266,274,282,287,290,295,301,310,321,326,331,
		337,343,346,351,357,363,370,372,379,382,387,393,399,403,415,421,427,431,
		435,439,446,449,456,462,466,478,485,495,505,511,514,525,532,537,542,544,
		547,554,557,561,571,579,594,598,601,613,617,628,638,643,647,653,658,662,
		666,670,674,682,686,693,695,707,711,721,725,733,737,740,743,750,757,761,
		769,773,779,785,800,828,830,843,847,853,868,878,882,888
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
