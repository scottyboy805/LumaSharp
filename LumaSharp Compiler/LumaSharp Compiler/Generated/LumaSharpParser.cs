//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/LumaSharp.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LumaSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, IMPORT=42, NAMESPACE=43, TYPE=44, CONTRACT=45, 
		ENUM=46, GLOBAL=47, EXPORT=48, INTERNAL=49, SPECIALHIDDEN=50, AS=51, CONTINUE=52, 
		BREAK=53, RETURN=54, IF=55, ELSE=56, ELSEIF=57, TRUE=58, FALSE=59, FOREACH=60, 
		IN=61, FOR=62, WHILE=63, SELECT=64, MATCH=65, DEFAULT=66, TRY=67, CATCH=68, 
		FINALLY=69, SIZE=70, READ=71, WRITE=72, THIS=73, BASE=74, ANY=75, BOOL=76, 
		CHAR=77, I8=78, U8=79, I16=80, U16=81, I32=82, U32=83, I64=84, U64=85, 
		FLOAT=86, DOUBLE=87, STRING=88, NULL=89, IDENTIFIER=90, INT=91, DECIMAL=92, 
		HEX=93, LITERAL=94, WS=95, COMMENT=96;
	public const int
		RULE_compilationUnit = 0, RULE_importStatement = 1, RULE_importAlias = 2, 
		RULE_namespaceDeclaration = 3, RULE_typeDeclaration = 4, RULE_contractDeclaration = 5, 
		RULE_enumDeclaration = 6, RULE_rootMember = 7, RULE_rootMemberBlock = 8, 
		RULE_memberBlock = 9, RULE_fieldBlock = 10, RULE_memberDeclaration = 11, 
		RULE_attributeDeclaration = 12, RULE_fieldDeclaration = 13, RULE_fieldAssignment = 14, 
		RULE_accessorDeclaration = 15, RULE_accessorBody = 16, RULE_accessorRead = 17, 
		RULE_accessorWrite = 18, RULE_initializerDeclaration = 19, RULE_methodDeclaration = 20, 
		RULE_methodParameterList = 21, RULE_methodParameter = 22, RULE_accessModifier = 23, 
		RULE_genericParameters = 24, RULE_genericArguments = 25, RULE_arrayParameters = 26, 
		RULE_inheritParameters = 27, RULE_typeReference = 28, RULE_primitiveType = 29, 
		RULE_statementBlock = 30, RULE_statement = 31, RULE_returnStatement = 32, 
		RULE_postfixStatement = 33, RULE_localVariableStatement = 34, RULE_assignStatement = 35, 
		RULE_ifStatement = 36, RULE_elseifStatement = 37, RULE_elseStatement = 38, 
		RULE_foreachStatement = 39, RULE_forStatement = 40, RULE_forVariableStatement = 41, 
		RULE_whileStatement = 42, RULE_selectStatement = 43, RULE_defaultStatement = 44, 
		RULE_matchStatement = 45, RULE_tryStatement = 46, RULE_catchStatement = 47, 
		RULE_finallyStatement = 48, RULE_expression = 49, RULE_endExpression = 50, 
		RULE_typeExpression = 51, RULE_sizeExpression = 52, RULE_indexExpression = 53, 
		RULE_fieldAccessExpression = 54, RULE_methodInvokeExpression = 55, RULE_methodArgument = 56;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importStatement", "importAlias", "namespaceDeclaration", 
		"typeDeclaration", "contractDeclaration", "enumDeclaration", "rootMember", 
		"rootMemberBlock", "memberBlock", "fieldBlock", "memberDeclaration", "attributeDeclaration", 
		"fieldDeclaration", "fieldAssignment", "accessorDeclaration", "accessorBody", 
		"accessorRead", "accessorWrite", "initializerDeclaration", "methodDeclaration", 
		"methodParameterList", "methodParameter", "accessModifier", "genericParameters", 
		"genericArguments", "arrayParameters", "inheritParameters", "typeReference", 
		"primitiveType", "statementBlock", "statement", "returnStatement", "postfixStatement", 
		"localVariableStatement", "assignStatement", "ifStatement", "elseifStatement", 
		"elseStatement", "foreachStatement", "forStatement", "forVariableStatement", 
		"whileStatement", "selectStatement", "defaultStatement", "matchStatement", 
		"tryStatement", "catchStatement", "finallyStatement", "expression", "endExpression", 
		"typeExpression", "sizeExpression", "indexExpression", "fieldAccessExpression", 
		"methodInvokeExpression", "methodArgument"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "';'", "':'", "'{'", "'}'", "'#'", "'('", "','", "')'", "'='", 
		"'=>'", "'...'", "'<'", "'>'", "'['", "']'", "'&'", "'++'", "'--'", "'+='", 
		"'-='", "'/='", "'*='", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'>='", 
		"'<='", "'=='", "'!='", "'&&'", "'||'", "'?'", "'U'", "'L'", "'UL'", "'F'", 
		"'D'", "'import'", "'namespace'", "'type'", "'contract'", "'enum'", "'global'", 
		"'export'", "'internal'", "'hidden'", "'as'", "'continue'", "'break'", 
		"'return'", "'if'", "'else'", "'elseif'", "'true'", "'false'", "'foreach'", 
		"'in'", "'for'", "'while'", "'select'", "'match'", "'default'", "'try'", 
		"'catch'", "'finally'", "'size'", "'read'", "'write'", "'this'", "'base'", 
		"'any'", "'bool'", "'char'", "'i8'", "'u8'", "'i16'", "'u16'", "'i32'", 
		"'u32'", "'i64'", "'u64'", "'float'", "'double'", "'string'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IMPORT", "NAMESPACE", "TYPE", "CONTRACT", 
		"ENUM", "GLOBAL", "EXPORT", "INTERNAL", "SPECIALHIDDEN", "AS", "CONTINUE", 
		"BREAK", "RETURN", "IF", "ELSE", "ELSEIF", "TRUE", "FALSE", "FOREACH", 
		"IN", "FOR", "WHILE", "SELECT", "MATCH", "DEFAULT", "TRY", "CATCH", "FINALLY", 
		"SIZE", "READ", "WRITE", "THIS", "BASE", "ANY", "BOOL", "CHAR", "I8", 
		"U8", "I16", "U16", "I32", "U32", "I64", "U64", "FLOAT", "DOUBLE", "STRING", 
		"NULL", "IDENTIFIER", "INT", "DECIMAL", "HEX", "LITERAL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LumaSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LumaSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LumaSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LumaSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext[] importAlias() {
			return GetRuleContexts<ImportAliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext importAlias(int i) {
			return GetRuleContext<ImportAliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext[] rootMember() {
			return GetRuleContexts<RootMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember(int i) {
			return GetRuleContext<RootMemberContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				State = 116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 114;
					importStatement();
					}
					break;
				case 2:
					{
					State = 115;
					importAlias();
					}
					break;
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2243003720663104L) != 0)) {
				{
				State = 123;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAMESPACE:
					{
					State = 121;
					namespaceDeclaration();
					}
					break;
				case T__5:
				case TYPE:
				case CONTRACT:
				case ENUM:
				case GLOBAL:
				case EXPORT:
				case INTERNAL:
				case SPECIALHIDDEN:
					{
					State = 122;
					rootMember();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(IMPORT);
			State = 129;
			Match(IDENTIFIER);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 130;
				Match(T__0);
				State = 131;
				Match(IDENTIFIER);
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(LumaSharpParser.AS, 0); }
		public ImportAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasContext importAlias() {
		ImportAliasContext _localctx = new ImportAliasContext(Context, State);
		EnterRule(_localctx, 4, RULE_importAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(IMPORT);
			State = 140;
			Match(IDENTIFIER);
			State = 141;
			Match(AS);
			State = 142;
			Match(IDENTIFIER);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 143;
				Match(T__0);
				State = 144;
				Match(IDENTIFIER);
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			State = 149;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(LumaSharpParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberBlockContext rootMemberBlock() {
			return GetRuleContext<RootMemberBlockContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(NAMESPACE);
			State = 152;
			Match(IDENTIFIER);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 153;
				Match(T__0);
				State = 154;
				Match(IDENTIFIER);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			rootMemberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParametersContext genericParameters() {
			return GetRuleContext<GenericParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 162;
				attributeDeclaration();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 168;
				accessModifier();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(TYPE);
			State = 175;
			Match(IDENTIFIER);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 176;
				genericParameters();
				}
			}

			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 179;
				inheritParameters();
				}
			}

			State = 182;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(LumaSharpParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParametersContext genericParameters() {
			return GetRuleContext<GenericParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public ContractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDeclarationContext contractDeclaration() {
		ContractDeclarationContext _localctx = new ContractDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_contractDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 184;
				attributeDeclaration();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 190;
				accessModifier();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196;
			Match(CONTRACT);
			State = 197;
			Match(IDENTIFIER);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 198;
				genericParameters();
				}
			}

			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 201;
				inheritParameters();
				}
			}

			State = 204;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(LumaSharpParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldBlockContext fieldBlock() {
			return GetRuleContext<FieldBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 206;
				attributeDeclaration();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 212;
				accessModifier();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			Match(ENUM);
			State = 219;
			Match(IDENTIFIER);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 220;
				Match(T__2);
				State = 221;
				primitiveType();
				}
			}

			State = 224;
			fieldBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public RootMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberContext rootMember() {
		RootMemberContext _localctx = new RootMemberContext(Context, State);
		EnterRule(_localctx, 14, RULE_rootMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 226;
				typeDeclaration();
				}
				break;
			case 2:
				{
				State = 227;
				contractDeclaration();
				}
				break;
			case 3:
				{
				State = 228;
				enumDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext[] rootMember() {
			return GetRuleContexts<RootMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember(int i) {
			return GetRuleContext<RootMemberContext>(i);
		}
		public RootMemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMemberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberBlockContext rootMemberBlock() {
		RootMemberBlockContext _localctx = new RootMemberBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_rootMemberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(T__3);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640896L) != 0)) {
				{
				{
				State = 232;
				rootMember();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 238;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public MemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberBlockContext memberBlock() {
		MemberBlockContext _localctx = new MemberBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_memberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__3);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640896L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 49151L) != 0)) {
				{
				{
				State = 241;
				memberDeclaration();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 247;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public FieldBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldBlockContext fieldBlock() {
		FieldBlockContext _localctx = new FieldBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(T__3);
			State = 250;
			fieldDeclaration();
			State = 251;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_memberDeclaration);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				typeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				contractDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				enumDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 256;
				fieldDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 257;
				methodDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(LumaSharpParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(LumaSharpParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(LumaSharpParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(LumaSharpParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(LumaSharpParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(LumaSharpParser.LITERAL, i);
		}
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_attributeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(T__5);
			State = 261;
			Match(IDENTIFIER);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 262;
				Match(T__6);
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 11L) != 0)) {
					{
					State = 263;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 11L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__7) {
						{
						{
						State = 264;
						Match(T__7);
						State = 265;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 11L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 270;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 273;
				Match(T__8);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 276;
				attributeDeclaration();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 282;
				accessModifier();
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 288;
			primitiveType();
			State = 289;
			Match(IDENTIFIER);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 290;
				fieldAssignment();
				}
			}

			State = 293;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LumaSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LumaSharpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public FieldAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAssignmentContext fieldAssignment() {
		FieldAssignmentContext _localctx = new FieldAssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_fieldAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(T__9);
			State = 296;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		public AccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDeclarationContext accessorDeclaration() {
		AccessorDeclarationContext _localctx = new AccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_accessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 298;
				attributeDeclaration();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 304;
				accessModifier();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 310;
			typeReference();
			State = 311;
			Match(IDENTIFIER);
			State = 312;
			accessorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndExpressionContext endExpression() {
			return GetRuleContext<EndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorReadContext accessorRead() {
			return GetRuleContext<AccessorReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorWriteContext accessorWrite() {
			return GetRuleContext<AccessorWriteContext>(0);
		}
		public AccessorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorBodyContext accessorBody() {
		AccessorBodyContext _localctx = new AccessorBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_accessorBody);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				Match(T__10);
				State = 315;
				endExpression();
				State = 316;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				Match(T__10);
				State = 319;
				Match(IDENTIFIER);
				State = 320;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321;
				accessorRead();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322;
				accessorWrite();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 323;
				accessorRead();
				State = 324;
				accessorWrite();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 326;
				accessorWrite();
				State = 327;
				accessorRead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LumaSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorRead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorReadContext accessorRead() {
		AccessorReadContext _localctx = new AccessorReadContext(Context, State);
		EnterRule(_localctx, 34, RULE_accessorRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(T__10);
			State = 332;
			Match(READ);
			State = 333;
			Match(T__2);
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 334;
				statement();
				}
				break;
			case 2:
				{
				State = 335;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LumaSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorWriteContext accessorWrite() {
		AccessorWriteContext _localctx = new AccessorWriteContext(Context, State);
		EnterRule(_localctx, 36, RULE_accessorWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(T__10);
			State = 339;
			Match(WRITE);
			State = 340;
			Match(T__2);
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 341;
				statement();
				}
				break;
			case 2:
				{
				State = 342;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public InitializerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerDeclarationContext initializerDeclaration() {
		InitializerDeclarationContext _localctx = new InitializerDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_initializerDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 345;
				attributeDeclaration();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 351;
				accessModifier();
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357;
			Match(THIS);
			State = 358;
			Match(T__6);
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 49151L) != 0)) {
				{
				State = 359;
				methodParameterList();
				}
			}

			State = 362;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 364;
				attributeDeclaration();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 370;
				accessModifier();
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 376;
			typeReference();
			State = 377;
			Match(IDENTIFIER);
			State = 378;
			Match(T__6);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 49151L) != 0)) {
				{
				State = 379;
				methodParameterList();
				}
			}

			State = 382;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext[] methodParameter() {
			return GetRuleContexts<MethodParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext methodParameter(int i) {
			return GetRuleContext<MethodParameterContext>(i);
		}
		public MethodParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterListContext methodParameterList() {
		MethodParameterListContext _localctx = new MethodParameterListContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			methodParameter();
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 385;
				Match(T__7);
				State = 386;
				methodParameter();
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public MethodParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterContext methodParameter() {
		MethodParameterContext _localctx = new MethodParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			typeReference();
			State = 393;
			Match(IDENTIFIER);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 394;
				Match(T__11);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(LumaSharpParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(LumaSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIALHIDDEN() { return GetToken(LumaSharpParser.SPECIALHIDDEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(LumaSharpParser.GLOBAL, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		public GenericParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParametersContext genericParameters() {
		GenericParametersContext _localctx = new GenericParametersContext(Context, State);
		EnterRule(_localctx, 48, RULE_genericParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(T__12);
			State = 400;
			Match(IDENTIFIER);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 401;
				Match(T__7);
				State = 402;
				Match(IDENTIFIER);
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 408;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public GenericArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentsContext genericArguments() {
		GenericArgumentsContext _localctx = new GenericArgumentsContext(Context, State);
		EnterRule(_localctx, 50, RULE_genericArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(T__12);
			State = 411;
			typeReference();
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 412;
				Match(T__7);
				State = 413;
				typeReference();
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 419;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayParametersContext : ParserRuleContext {
		public ArrayParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayParametersContext arrayParameters() {
		ArrayParametersContext _localctx = new ArrayParametersContext(Context, State);
		EnterRule(_localctx, 52, RULE_arrayParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(T__14);
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 422;
				Match(T__7);
				}
				break;
			}
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 425;
				Match(T__7);
				}
			}

			State = 428;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public InheritParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritParametersContext inheritParameters() {
		InheritParametersContext _localctx = new InheritParametersContext(Context, State);
		EnterRule(_localctx, 54, RULE_inheritParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(T__2);
			State = 431;
			typeReference();
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 432;
				Match(T__7);
				State = 433;
				typeReference();
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case FLOAT:
			case DOUBLE:
			case STRING:
				{
				State = 439;
				primitiveType();
				}
				break;
			case IDENTIFIER:
				{
				{
				State = 440;
				Match(IDENTIFIER);
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 441;
					Match(T__0);
					State = 442;
					Match(IDENTIFIER);
					}
					}
					State = 447;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__12) {
					{
					State = 448;
					genericArguments();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 453;
				arrayParameters();
				}
			}

			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 456;
				Match(T__16);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(LumaSharpParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LumaSharpParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LumaSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(LumaSharpParser.I8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(LumaSharpParser.U8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(LumaSharpParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(LumaSharpParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(LumaSharpParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(LumaSharpParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(LumaSharpParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(LumaSharpParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LumaSharpParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LumaSharpParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LumaSharpParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 16383L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(T__3);
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
				{
				{
				State = 462;
				statement();
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 468;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixStatementContext postfixStatement() {
			return GetRuleContext<PostfixStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableStatementContext localVariableStatement() {
			return GetRuleContext<LocalVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LumaSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(LumaSharpParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_statement);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 470;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471;
				postfixStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 472;
				statementBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 473;
				localVariableStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 474;
				assignStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 475;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 476;
				foreachStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 477;
				forStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 478;
				whileStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 479;
				selectStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 480;
				tryStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 481;
				Match(BREAK);
				State = 482;
				Match(T__1);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 483;
				Match(CONTINUE);
				State = 484;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LumaSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(RETURN);
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511424L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 33030145L) != 0)) {
				{
				State = 488;
				expression(0);
				}
			}

			State = 491;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixStatementContext postfixStatement() {
		PostfixStatementContext _localctx = new PostfixStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_postfixStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			expression(0);
			State = 494;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 495;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableStatementContext localVariableStatement() {
		LocalVariableStatementContext _localctx = new LocalVariableStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_localVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			typeReference();
			State = 498;
			Match(IDENTIFIER);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 499;
				Match(T__9);
				State = 500;
				expression(0);
				}
			}

			State = 503;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_assignStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			expression(0);
			State = 506;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15729664L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 507;
			expression(0);
			State = 508;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LumaSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext[] elseifStatement() {
			return GetRuleContexts<ElseifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement(int i) {
			return GetRuleContext<ElseifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(IF);
			State = 511;
			Match(T__6);
			State = 512;
			expression(0);
			State = 513;
			Match(T__8);
			State = 524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 514;
				statement();
				}
				break;
			case 2:
				{
				State = 515;
				Match(T__1);
				}
				break;
			case 3:
				{
				State = 516;
				Match(T__3);
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 517;
					statement();
					}
					}
					State = 522;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 523;
				Match(T__4);
				}
				break;
			}
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 526;
					elseifStatement();
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 532;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(LumaSharpParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStatementContext elseifStatement() {
		ElseifStatementContext _localctx = new ElseifStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_elseifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(ELSEIF);
			State = 536;
			Match(T__6);
			State = 537;
			expression(0);
			State = 538;
			Match(T__8);
			State = 549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 539;
				statement();
				}
				break;
			case 2:
				{
				State = 540;
				Match(T__1);
				}
				break;
			case 3:
				{
				State = 541;
				Match(T__3);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 542;
					statement();
					}
					}
					State = 547;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 548;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LumaSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(ELSE);
			State = 562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 552;
				statement();
				}
				break;
			case 2:
				{
				State = 553;
				Match(T__1);
				}
				break;
			case 3:
				{
				State = 554;
				Match(T__3);
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 555;
					statement();
					}
					}
					State = 560;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 561;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(LumaSharpParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(LumaSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(FOREACH);
			State = 565;
			Match(T__6);
			State = 566;
			typeReference();
			State = 567;
			Match(IDENTIFIER);
			State = 568;
			Match(IN);
			State = 569;
			expression(0);
			State = 570;
			Match(T__8);
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					State = 571;
					statement();
					}
				}

				State = 574;
				Match(T__1);
				}
				break;
			case 2:
				{
				State = 575;
				Match(T__3);
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 576;
					statement();
					}
					}
					State = 581;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 582;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LumaSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForVariableStatementContext forVariableStatement() {
			return GetRuleContext<ForVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(FOR);
			State = 586;
			Match(T__6);
			State = 588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 49151L) != 0)) {
				{
				State = 587;
				forVariableStatement();
				}
			}

			State = 590;
			Match(T__1);
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511424L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 33030145L) != 0)) {
				{
				State = 591;
				expression(0);
				}
			}

			State = 594;
			Match(T__1);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691511424L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 33030145L) != 0)) {
				{
				State = 595;
				expression(0);
				}
			}

			State = 598;
			Match(T__8);
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					State = 599;
					statement();
					}
				}

				State = 602;
				Match(T__1);
				}
				break;
			case 2:
				{
				State = 603;
				Match(T__3);
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 604;
					statement();
					}
					}
					State = 609;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 610;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForVariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForVariableStatementContext forVariableStatement() {
		ForVariableStatementContext _localctx = new ForVariableStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_forVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			typeReference();
			State = 614;
			Match(IDENTIFIER);
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 615;
				Match(T__9);
				State = 616;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LumaSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(WHILE);
			State = 620;
			Match(T__6);
			State = 621;
			expression(0);
			State = 622;
			Match(T__8);
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 623;
				statement();
				}
				break;
			case 2:
				{
				State = 624;
				Match(T__1);
				}
				break;
			case 3:
				{
				State = 625;
				Match(T__3);
				State = 629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 626;
					statement();
					}
					}
					State = 631;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 632;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(LumaSharpParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext[] defaultStatement() {
			return GetRuleContexts<DefaultStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext defaultStatement(int i) {
			return GetRuleContext<DefaultStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext[] matchStatement() {
			return GetRuleContexts<MatchStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext matchStatement(int i) {
			return GetRuleContext<MatchStatementContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			Match(SELECT);
			State = 636;
			Match(T__6);
			State = 637;
			expression(0);
			State = 638;
			Match(T__8);
			State = 639;
			Match(T__3);
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH || _la==DEFAULT) {
				{
				State = 642;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 640;
					defaultStatement();
					}
					break;
				case MATCH:
					{
					State = 641;
					matchStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 647;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LumaSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStatementContext defaultStatement() {
		DefaultStatementContext _localctx = new DefaultStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_defaultStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(DEFAULT);
			State = 650;
			Match(T__2);
			State = 661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 651;
				statement();
				}
				break;
			case 2:
				{
				State = 652;
				Match(T__1);
				}
				break;
			case 3:
				{
				State = 653;
				Match(T__3);
				State = 657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 654;
					statement();
					}
					}
					State = 659;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 660;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(LumaSharpParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchStatementContext matchStatement() {
		MatchStatementContext _localctx = new MatchStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_matchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(MATCH);
			State = 664;
			expression(0);
			State = 665;
			Match(T__2);
			State = 676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 666;
				statement();
				}
				break;
			case 2:
				{
				State = 667;
				Match(T__1);
				}
				break;
			case 3:
				{
				State = 668;
				Match(T__3);
				State = 672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 669;
					statement();
					}
					}
					State = 674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 675;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(LumaSharpParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchStatementContext catchStatement() {
			return GetRuleContext<CatchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyStatementContext finallyStatement() {
			return GetRuleContext<FinallyStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(TRY);
			State = 688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 679;
				statement();
				}
				break;
			case 2:
				{
				State = 680;
				Match(T__3);
				State = 684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 681;
					statement();
					}
					}
					State = 686;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 687;
				Match(T__4);
				}
				break;
			}
			State = 691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 690;
				catchStatement();
				}
				break;
			}
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 693;
				finallyStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(LumaSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public CatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchStatementContext catchStatement() {
		CatchStatementContext _localctx = new CatchStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_catchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(CATCH);
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 697;
				Match(T__6);
				State = 698;
				typeReference();
				State = 699;
				Match(T__8);
				}
				break;
			}
			State = 712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 703;
				statement();
				}
				break;
			case 2:
				{
				State = 704;
				Match(T__3);
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 705;
					statement();
					}
					}
					State = 710;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 711;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(LumaSharpParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FinallyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyStatementContext finallyStatement() {
		FinallyStatementContext _localctx = new FinallyStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_finallyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			Match(FINALLY);
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 715;
				statement();
				}
				break;
			case 2:
				{
				State = 716;
				Match(T__3);
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798718472048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2147481673L) != 0)) {
					{
					{
					State = 717;
					statement();
					}
					}
					State = 722;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 723;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExpressionContext endExpression() {
			return GetRuleContext<EndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression() {
			return GetRuleContext<IndexExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionContext typeExpression() {
			return GetRuleContext<TypeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeExpressionContext sizeExpression() {
			return GetRuleContext<SizeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessExpressionContext fieldAccessExpression() {
			return GetRuleContext<FieldAccessExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				{
				State = 727;
				Match(T__23);
				State = 728;
				expression(15);
				}
				break;
			case T__24:
				{
				State = 729;
				Match(T__24);
				State = 730;
				expression(14);
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case IDENTIFIER:
			case INT:
			case DECIMAL:
			case HEX:
			case LITERAL:
				{
				State = 731;
				endExpression();
				State = 733;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 732;
					indexExpression();
					}
					break;
				}
				}
				break;
			case T__6:
				{
				State = 735;
				Match(T__6);
				State = 736;
				expression(0);
				State = 737;
				Match(T__8);
				State = 739;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 738;
					indexExpression();
					}
					break;
				}
				}
				break;
			case TYPE:
				{
				State = 741;
				typeExpression();
				}
				break;
			case SIZE:
				{
				State = 742;
				sizeExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 781;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 779;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 745;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 746;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 747;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 748;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 749;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__28) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 750;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 751;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 752;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3221250048L) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 753;
						expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 754;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 755;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 756;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 757;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 758;
						Match(T__33);
						State = 759;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 760;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 761;
						Match(T__34);
						State = 762;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 763;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 764;
						Match(T__35);
						State = 765;
						expression(0);
						State = 766;
						Match(T__2);
						State = 767;
						expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 769;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 770;
						methodInvokeExpression();
						State = 772;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
						case 1:
							{
							State = 771;
							indexExpression();
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 774;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 775;
						fieldAccessExpression();
						State = 777;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
						case 1:
							{
							State = 776;
							indexExpression();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 783;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(LumaSharpParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LumaSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LumaSharpParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(LumaSharpParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression() {
			return GetRuleContext<IndexExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(LumaSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(LumaSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(LumaSharpParser.NULL, 0); }
		public EndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExpressionContext endExpression() {
		EndExpressionContext _localctx = new EndExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_endExpression);
		int _la;
		try {
			State = 801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 784;
				Match(HEX);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 785;
				Match(INT);
				State = 787;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 786;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 789;
				Match(DECIMAL);
				State = 791;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 790;
					_la = TokenStream.LA(1);
					if ( !(_la==T__39 || _la==T__40) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 793;
				Match(LITERAL);
				State = 795;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 794;
					indexExpression();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 797;
				Match(IDENTIFIER);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 798;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 799;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 800;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExpressionContext typeExpression() {
		TypeExpressionContext _localctx = new TypeExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_typeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(TYPE);
			State = 804;
			Match(T__6);
			State = 805;
			typeReference();
			State = 806;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(LumaSharpParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public SizeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeExpressionContext sizeExpression() {
		SizeExpressionContext _localctx = new SizeExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_sizeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			Match(SIZE);
			State = 809;
			Match(T__6);
			State = 810;
			typeReference();
			State = 811;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			Match(T__14);
			State = 814;
			expression(0);
			State = 815;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public FieldAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessExpressionContext fieldAccessExpression() {
		FieldAccessExpressionContext _localctx = new FieldAccessExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_fieldAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(T__0);
			State = 818;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext[] methodArgument() {
			return GetRuleContexts<MethodArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext methodArgument(int i) {
			return GetRuleContext<MethodArgumentContext>(i);
		}
		public MethodInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeExpressionContext methodInvokeExpression() {
		MethodInvokeExpressionContext _localctx = new MethodInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_methodInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(T__0);
			State = 821;
			Match(IDENTIFIER);
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 822;
				genericArguments();
				}
			}

			State = 825;
			Match(T__6);
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720691642496L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 33030145L) != 0)) {
				{
				State = 826;
				methodArgument();
				}
			}

			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 829;
				Match(T__7);
				State = 830;
				methodArgument();
				}
				}
				State = 835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 836;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 112, RULE_methodArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 838;
				Match(T__16);
				}
			}

			State = 841;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,96,844,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		1,0,1,0,5,0,117,8,0,10,0,12,0,120,9,0,1,0,1,0,5,0,124,8,0,10,0,12,0,127,
		9,0,1,1,1,1,1,1,1,1,5,1,133,8,1,10,1,12,1,136,9,1,1,1,1,1,1,2,1,2,1,2,
		1,2,1,2,1,2,4,2,146,8,2,11,2,12,2,147,1,2,1,2,1,3,1,3,1,3,1,3,5,3,156,
		8,3,10,3,12,3,159,9,3,1,3,1,3,1,4,5,4,164,8,4,10,4,12,4,167,9,4,1,4,5,
		4,170,8,4,10,4,12,4,173,9,4,1,4,1,4,1,4,3,4,178,8,4,1,4,3,4,181,8,4,1,
		4,1,4,1,5,5,5,186,8,5,10,5,12,5,189,9,5,1,5,5,5,192,8,5,10,5,12,5,195,
		9,5,1,5,1,5,1,5,3,5,200,8,5,1,5,3,5,203,8,5,1,5,1,5,1,6,5,6,208,8,6,10,
		6,12,6,211,9,6,1,6,5,6,214,8,6,10,6,12,6,217,9,6,1,6,1,6,1,6,1,6,3,6,223,
		8,6,1,6,1,6,1,7,1,7,1,7,3,7,230,8,7,1,8,1,8,5,8,234,8,8,10,8,12,8,237,
		9,8,1,8,1,8,1,9,1,9,5,9,243,8,9,10,9,12,9,246,9,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,259,8,11,1,12,1,12,1,12,1,12,1,12,
		1,12,5,12,267,8,12,10,12,12,12,270,9,12,3,12,272,8,12,1,12,3,12,275,8,
		12,1,13,5,13,278,8,13,10,13,12,13,281,9,13,1,13,5,13,284,8,13,10,13,12,
		13,287,9,13,1,13,1,13,1,13,3,13,292,8,13,1,13,1,13,1,14,1,14,1,14,1,15,
		5,15,300,8,15,10,15,12,15,303,9,15,1,15,5,15,306,8,15,10,15,12,15,309,
		9,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,3,16,330,8,16,1,17,1,17,1,17,1,17,1,17,3,
		17,337,8,17,1,18,1,18,1,18,1,18,1,18,3,18,344,8,18,1,19,5,19,347,8,19,
		10,19,12,19,350,9,19,1,19,5,19,353,8,19,10,19,12,19,356,9,19,1,19,1,19,
		1,19,3,19,361,8,19,1,19,1,19,1,20,5,20,366,8,20,10,20,12,20,369,9,20,1,
		20,5,20,372,8,20,10,20,12,20,375,9,20,1,20,1,20,1,20,1,20,3,20,381,8,20,
		1,20,1,20,1,21,1,21,1,21,5,21,388,8,21,10,21,12,21,391,9,21,1,22,1,22,
		1,22,3,22,396,8,22,1,23,1,23,1,24,1,24,1,24,1,24,5,24,404,8,24,10,24,12,
		24,407,9,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,415,8,25,10,25,12,25,418,
		9,25,1,25,1,25,1,26,1,26,3,26,424,8,26,1,26,3,26,427,8,26,1,26,1,26,1,
		27,1,27,1,27,1,27,5,27,435,8,27,10,27,12,27,438,9,27,1,28,1,28,1,28,1,
		28,5,28,444,8,28,10,28,12,28,447,9,28,1,28,3,28,450,8,28,3,28,452,8,28,
		1,28,3,28,455,8,28,1,28,3,28,458,8,28,1,29,1,29,1,30,1,30,5,30,464,8,30,
		10,30,12,30,467,9,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,486,8,31,1,32,1,32,3,32,490,8,
		32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,502,8,34,1,34,
		1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		5,36,519,8,36,10,36,12,36,522,9,36,1,36,3,36,525,8,36,1,36,5,36,528,8,
		36,10,36,12,36,531,9,36,1,36,3,36,534,8,36,1,37,1,37,1,37,1,37,1,37,1,
		37,1,37,1,37,5,37,544,8,37,10,37,12,37,547,9,37,1,37,3,37,550,8,37,1,38,
		1,38,1,38,1,38,1,38,5,38,557,8,38,10,38,12,38,560,9,38,1,38,3,38,563,8,
		38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,573,8,39,1,39,1,39,1,39,
		5,39,578,8,39,10,39,12,39,581,9,39,1,39,3,39,584,8,39,1,40,1,40,1,40,3,
		40,589,8,40,1,40,1,40,3,40,593,8,40,1,40,1,40,3,40,597,8,40,1,40,1,40,
		3,40,601,8,40,1,40,1,40,1,40,5,40,606,8,40,10,40,12,40,609,9,40,1,40,3,
		40,612,8,40,1,41,1,41,1,41,1,41,3,41,618,8,41,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,5,42,628,8,42,10,42,12,42,631,9,42,1,42,3,42,634,8,42,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,643,8,43,10,43,12,43,646,9,43,1,
		43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,656,8,44,10,44,12,44,659,9,
		44,1,44,3,44,662,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,671,8,45,
		10,45,12,45,674,9,45,1,45,3,45,677,8,45,1,46,1,46,1,46,1,46,5,46,683,8,
		46,10,46,12,46,686,9,46,1,46,3,46,689,8,46,1,46,3,46,692,8,46,1,46,3,46,
		695,8,46,1,47,1,47,1,47,1,47,1,47,3,47,702,8,47,1,47,1,47,1,47,5,47,707,
		8,47,10,47,12,47,710,9,47,1,47,3,47,713,8,47,1,48,1,48,1,48,1,48,5,48,
		719,8,48,10,48,12,48,722,9,48,1,48,3,48,725,8,48,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,3,49,734,8,49,1,49,1,49,1,49,1,49,3,49,740,8,49,1,49,1,49,
		3,49,744,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,3,49,773,8,49,1,49,1,49,1,49,3,49,778,8,49,5,49,780,8,49,10,49,
		12,49,783,9,49,1,50,1,50,1,50,3,50,788,8,50,1,50,1,50,3,50,792,8,50,1,
		50,1,50,3,50,796,8,50,1,50,1,50,1,50,1,50,3,50,802,8,50,1,51,1,51,1,51,
		1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,
		1,55,1,55,1,55,3,55,824,8,55,1,55,1,55,3,55,828,8,55,1,55,1,55,5,55,832,
		8,55,10,55,12,55,835,9,55,1,55,1,55,1,56,3,56,840,8,56,1,56,1,56,1,56,
		0,1,98,57,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,0,12,2,0,91,92,94,94,2,0,88,88,
		90,91,1,0,47,50,1,0,75,88,1,0,18,19,2,0,10,10,20,23,1,0,26,28,2,0,24,24,
		29,29,2,0,13,14,30,31,1,0,32,33,1,0,37,39,1,0,40,41,933,0,118,1,0,0,0,
		2,128,1,0,0,0,4,139,1,0,0,0,6,151,1,0,0,0,8,165,1,0,0,0,10,187,1,0,0,0,
		12,209,1,0,0,0,14,229,1,0,0,0,16,231,1,0,0,0,18,240,1,0,0,0,20,249,1,0,
		0,0,22,258,1,0,0,0,24,260,1,0,0,0,26,279,1,0,0,0,28,295,1,0,0,0,30,301,
		1,0,0,0,32,329,1,0,0,0,34,331,1,0,0,0,36,338,1,0,0,0,38,348,1,0,0,0,40,
		367,1,0,0,0,42,384,1,0,0,0,44,392,1,0,0,0,46,397,1,0,0,0,48,399,1,0,0,
		0,50,410,1,0,0,0,52,421,1,0,0,0,54,430,1,0,0,0,56,451,1,0,0,0,58,459,1,
		0,0,0,60,461,1,0,0,0,62,485,1,0,0,0,64,487,1,0,0,0,66,493,1,0,0,0,68,497,
		1,0,0,0,70,505,1,0,0,0,72,510,1,0,0,0,74,535,1,0,0,0,76,551,1,0,0,0,78,
		564,1,0,0,0,80,585,1,0,0,0,82,613,1,0,0,0,84,619,1,0,0,0,86,635,1,0,0,
		0,88,649,1,0,0,0,90,663,1,0,0,0,92,678,1,0,0,0,94,696,1,0,0,0,96,714,1,
		0,0,0,98,743,1,0,0,0,100,801,1,0,0,0,102,803,1,0,0,0,104,808,1,0,0,0,106,
		813,1,0,0,0,108,817,1,0,0,0,110,820,1,0,0,0,112,839,1,0,0,0,114,117,3,
		2,1,0,115,117,3,4,2,0,116,114,1,0,0,0,116,115,1,0,0,0,117,120,1,0,0,0,
		118,116,1,0,0,0,118,119,1,0,0,0,119,125,1,0,0,0,120,118,1,0,0,0,121,124,
		3,6,3,0,122,124,3,14,7,0,123,121,1,0,0,0,123,122,1,0,0,0,124,127,1,0,0,
		0,125,123,1,0,0,0,125,126,1,0,0,0,126,1,1,0,0,0,127,125,1,0,0,0,128,129,
		5,42,0,0,129,134,5,90,0,0,130,131,5,1,0,0,131,133,5,90,0,0,132,130,1,0,
		0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,
		134,1,0,0,0,137,138,5,2,0,0,138,3,1,0,0,0,139,140,5,42,0,0,140,141,5,90,
		0,0,141,142,5,51,0,0,142,145,5,90,0,0,143,144,5,1,0,0,144,146,5,90,0,0,
		145,143,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,149,
		1,0,0,0,149,150,5,2,0,0,150,5,1,0,0,0,151,152,5,43,0,0,152,157,5,90,0,
		0,153,154,5,1,0,0,154,156,5,90,0,0,155,153,1,0,0,0,156,159,1,0,0,0,157,
		155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,3,
		16,8,0,161,7,1,0,0,0,162,164,3,24,12,0,163,162,1,0,0,0,164,167,1,0,0,0,
		165,163,1,0,0,0,165,166,1,0,0,0,166,171,1,0,0,0,167,165,1,0,0,0,168,170,
		3,46,23,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,
		0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,5,44,0,0,175,177,5,90,0,0,
		176,178,3,48,24,0,177,176,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,
		181,3,54,27,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,183,
		3,18,9,0,183,9,1,0,0,0,184,186,3,24,12,0,185,184,1,0,0,0,186,189,1,0,0,
		0,187,185,1,0,0,0,187,188,1,0,0,0,188,193,1,0,0,0,189,187,1,0,0,0,190,
		192,3,46,23,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,
		1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,45,0,0,197,199,5,90,
		0,0,198,200,3,48,24,0,199,198,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,
		201,203,3,54,27,0,202,201,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,
		205,3,18,9,0,205,11,1,0,0,0,206,208,3,24,12,0,207,206,1,0,0,0,208,211,
		1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,215,1,0,0,0,211,209,1,0,0,
		0,212,214,3,46,23,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,
		216,1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,46,0,0,219,222,5,
		90,0,0,220,221,5,3,0,0,221,223,3,58,29,0,222,220,1,0,0,0,222,223,1,0,0,
		0,223,224,1,0,0,0,224,225,3,20,10,0,225,13,1,0,0,0,226,230,3,8,4,0,227,
		230,3,10,5,0,228,230,3,12,6,0,229,226,1,0,0,0,229,227,1,0,0,0,229,228,
		1,0,0,0,230,15,1,0,0,0,231,235,5,4,0,0,232,234,3,14,7,0,233,232,1,0,0,
		0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,
		235,1,0,0,0,238,239,5,5,0,0,239,17,1,0,0,0,240,244,5,4,0,0,241,243,3,22,
		11,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,
		247,1,0,0,0,246,244,1,0,0,0,247,248,5,5,0,0,248,19,1,0,0,0,249,250,5,4,
		0,0,250,251,3,26,13,0,251,252,5,5,0,0,252,21,1,0,0,0,253,259,3,8,4,0,254,
		259,3,10,5,0,255,259,3,12,6,0,256,259,3,26,13,0,257,259,3,40,20,0,258,
		253,1,0,0,0,258,254,1,0,0,0,258,255,1,0,0,0,258,256,1,0,0,0,258,257,1,
		0,0,0,259,23,1,0,0,0,260,261,5,6,0,0,261,274,5,90,0,0,262,271,5,7,0,0,
		263,268,7,0,0,0,264,265,5,8,0,0,265,267,7,0,0,0,266,264,1,0,0,0,267,270,
		1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,
		0,271,263,1,0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,275,5,9,0,0,274,
		262,1,0,0,0,274,275,1,0,0,0,275,25,1,0,0,0,276,278,3,24,12,0,277,276,1,
		0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,285,1,0,0,0,
		281,279,1,0,0,0,282,284,3,46,23,0,283,282,1,0,0,0,284,287,1,0,0,0,285,
		283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,3,
		58,29,0,289,291,5,90,0,0,290,292,3,28,14,0,291,290,1,0,0,0,291,292,1,0,
		0,0,292,293,1,0,0,0,293,294,5,2,0,0,294,27,1,0,0,0,295,296,5,10,0,0,296,
		297,7,1,0,0,297,29,1,0,0,0,298,300,3,24,12,0,299,298,1,0,0,0,300,303,1,
		0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,307,1,0,0,0,303,301,1,0,0,0,
		304,306,3,46,23,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,
		308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,311,3,56,28,0,311,312,
		5,90,0,0,312,313,3,32,16,0,313,31,1,0,0,0,314,315,5,11,0,0,315,316,3,100,
		50,0,316,317,5,2,0,0,317,330,1,0,0,0,318,319,5,11,0,0,319,320,5,90,0,0,
		320,330,5,2,0,0,321,330,3,34,17,0,322,330,3,36,18,0,323,324,3,34,17,0,
		324,325,3,36,18,0,325,330,1,0,0,0,326,327,3,36,18,0,327,328,3,34,17,0,
		328,330,1,0,0,0,329,314,1,0,0,0,329,318,1,0,0,0,329,321,1,0,0,0,329,322,
		1,0,0,0,329,323,1,0,0,0,329,326,1,0,0,0,330,33,1,0,0,0,331,332,5,11,0,
		0,332,333,5,71,0,0,333,336,5,3,0,0,334,337,3,62,31,0,335,337,3,60,30,0,
		336,334,1,0,0,0,336,335,1,0,0,0,337,35,1,0,0,0,338,339,5,11,0,0,339,340,
		5,72,0,0,340,343,5,3,0,0,341,344,3,62,31,0,342,344,3,60,30,0,343,341,1,
		0,0,0,343,342,1,0,0,0,344,37,1,0,0,0,345,347,3,24,12,0,346,345,1,0,0,0,
		347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,354,1,0,0,0,350,348,
		1,0,0,0,351,353,3,46,23,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,
		0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,358,5,73,0,0,358,
		360,5,7,0,0,359,361,3,42,21,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,
		1,0,0,0,362,363,5,9,0,0,363,39,1,0,0,0,364,366,3,24,12,0,365,364,1,0,0,
		0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,373,1,0,0,0,369,
		367,1,0,0,0,370,372,3,46,23,0,371,370,1,0,0,0,372,375,1,0,0,0,373,371,
		1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,0,376,377,3,56,28,
		0,377,378,5,90,0,0,378,380,5,7,0,0,379,381,3,42,21,0,380,379,1,0,0,0,380,
		381,1,0,0,0,381,382,1,0,0,0,382,383,5,9,0,0,383,41,1,0,0,0,384,389,3,44,
		22,0,385,386,5,8,0,0,386,388,3,44,22,0,387,385,1,0,0,0,388,391,1,0,0,0,
		389,387,1,0,0,0,389,390,1,0,0,0,390,43,1,0,0,0,391,389,1,0,0,0,392,393,
		3,56,28,0,393,395,5,90,0,0,394,396,5,12,0,0,395,394,1,0,0,0,395,396,1,
		0,0,0,396,45,1,0,0,0,397,398,7,2,0,0,398,47,1,0,0,0,399,400,5,13,0,0,400,
		405,5,90,0,0,401,402,5,8,0,0,402,404,5,90,0,0,403,401,1,0,0,0,404,407,
		1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,
		0,408,409,5,14,0,0,409,49,1,0,0,0,410,411,5,13,0,0,411,416,3,56,28,0,412,
		413,5,8,0,0,413,415,3,56,28,0,414,412,1,0,0,0,415,418,1,0,0,0,416,414,
		1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,420,5,14,0,
		0,420,51,1,0,0,0,421,423,5,15,0,0,422,424,5,8,0,0,423,422,1,0,0,0,423,
		424,1,0,0,0,424,426,1,0,0,0,425,427,5,8,0,0,426,425,1,0,0,0,426,427,1,
		0,0,0,427,428,1,0,0,0,428,429,5,16,0,0,429,53,1,0,0,0,430,431,5,3,0,0,
		431,436,3,56,28,0,432,433,5,8,0,0,433,435,3,56,28,0,434,432,1,0,0,0,435,
		438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,55,1,0,0,0,438,436,1,0,
		0,0,439,452,3,58,29,0,440,445,5,90,0,0,441,442,5,1,0,0,442,444,5,90,0,
		0,443,441,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,
		449,1,0,0,0,447,445,1,0,0,0,448,450,3,50,25,0,449,448,1,0,0,0,449,450,
		1,0,0,0,450,452,1,0,0,0,451,439,1,0,0,0,451,440,1,0,0,0,452,454,1,0,0,
		0,453,455,3,52,26,0,454,453,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,
		458,5,17,0,0,457,456,1,0,0,0,457,458,1,0,0,0,458,57,1,0,0,0,459,460,7,
		3,0,0,460,59,1,0,0,0,461,465,5,4,0,0,462,464,3,62,31,0,463,462,1,0,0,0,
		464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,
		1,0,0,0,468,469,5,5,0,0,469,61,1,0,0,0,470,486,3,64,32,0,471,486,3,66,
		33,0,472,486,3,60,30,0,473,486,3,68,34,0,474,486,3,70,35,0,475,486,3,72,
		36,0,476,486,3,78,39,0,477,486,3,80,40,0,478,486,3,84,42,0,479,486,3,86,
		43,0,480,486,3,92,46,0,481,482,5,53,0,0,482,486,5,2,0,0,483,484,5,52,0,
		0,484,486,5,2,0,0,485,470,1,0,0,0,485,471,1,0,0,0,485,472,1,0,0,0,485,
		473,1,0,0,0,485,474,1,0,0,0,485,475,1,0,0,0,485,476,1,0,0,0,485,477,1,
		0,0,0,485,478,1,0,0,0,485,479,1,0,0,0,485,480,1,0,0,0,485,481,1,0,0,0,
		485,483,1,0,0,0,486,63,1,0,0,0,487,489,5,54,0,0,488,490,3,98,49,0,489,
		488,1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,5,2,0,0,492,65,1,0,
		0,0,493,494,3,98,49,0,494,495,7,4,0,0,495,496,5,2,0,0,496,67,1,0,0,0,497,
		498,3,56,28,0,498,501,5,90,0,0,499,500,5,10,0,0,500,502,3,98,49,0,501,
		499,1,0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,504,5,2,0,0,504,69,1,0,
		0,0,505,506,3,98,49,0,506,507,7,5,0,0,507,508,3,98,49,0,508,509,5,2,0,
		0,509,71,1,0,0,0,510,511,5,55,0,0,511,512,5,7,0,0,512,513,3,98,49,0,513,
		524,5,9,0,0,514,525,3,62,31,0,515,525,5,2,0,0,516,520,5,4,0,0,517,519,
		3,62,31,0,518,517,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,
		0,0,521,523,1,0,0,0,522,520,1,0,0,0,523,525,5,5,0,0,524,514,1,0,0,0,524,
		515,1,0,0,0,524,516,1,0,0,0,525,529,1,0,0,0,526,528,3,74,37,0,527,526,
		1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,533,1,0,0,
		0,531,529,1,0,0,0,532,534,3,76,38,0,533,532,1,0,0,0,533,534,1,0,0,0,534,
		73,1,0,0,0,535,536,5,57,0,0,536,537,5,7,0,0,537,538,3,98,49,0,538,549,
		5,9,0,0,539,550,3,62,31,0,540,550,5,2,0,0,541,545,5,4,0,0,542,544,3,62,
		31,0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,
		548,1,0,0,0,547,545,1,0,0,0,548,550,5,5,0,0,549,539,1,0,0,0,549,540,1,
		0,0,0,549,541,1,0,0,0,550,75,1,0,0,0,551,562,5,56,0,0,552,563,3,62,31,
		0,553,563,5,2,0,0,554,558,5,4,0,0,555,557,3,62,31,0,556,555,1,0,0,0,557,
		560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,558,1,
		0,0,0,561,563,5,5,0,0,562,552,1,0,0,0,562,553,1,0,0,0,562,554,1,0,0,0,
		563,77,1,0,0,0,564,565,5,60,0,0,565,566,5,7,0,0,566,567,3,56,28,0,567,
		568,5,90,0,0,568,569,5,61,0,0,569,570,3,98,49,0,570,583,5,9,0,0,571,573,
		3,62,31,0,572,571,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,584,5,2,
		0,0,575,579,5,4,0,0,576,578,3,62,31,0,577,576,1,0,0,0,578,581,1,0,0,0,
		579,577,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,584,
		5,5,0,0,583,572,1,0,0,0,583,575,1,0,0,0,584,79,1,0,0,0,585,586,5,62,0,
		0,586,588,5,7,0,0,587,589,3,82,41,0,588,587,1,0,0,0,588,589,1,0,0,0,589,
		590,1,0,0,0,590,592,5,2,0,0,591,593,3,98,49,0,592,591,1,0,0,0,592,593,
		1,0,0,0,593,594,1,0,0,0,594,596,5,2,0,0,595,597,3,98,49,0,596,595,1,0,
		0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,611,5,9,0,0,599,601,3,62,31,0,
		600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,612,5,2,0,0,603,607,
		5,4,0,0,604,606,3,62,31,0,605,604,1,0,0,0,606,609,1,0,0,0,607,605,1,0,
		0,0,607,608,1,0,0,0,608,610,1,0,0,0,609,607,1,0,0,0,610,612,5,5,0,0,611,
		600,1,0,0,0,611,603,1,0,0,0,612,81,1,0,0,0,613,614,3,56,28,0,614,617,5,
		90,0,0,615,616,5,10,0,0,616,618,3,98,49,0,617,615,1,0,0,0,617,618,1,0,
		0,0,618,83,1,0,0,0,619,620,5,63,0,0,620,621,5,7,0,0,621,622,3,98,49,0,
		622,633,5,9,0,0,623,634,3,62,31,0,624,634,5,2,0,0,625,629,5,4,0,0,626,
		628,3,62,31,0,627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,
		1,0,0,0,630,632,1,0,0,0,631,629,1,0,0,0,632,634,5,5,0,0,633,623,1,0,0,
		0,633,624,1,0,0,0,633,625,1,0,0,0,634,85,1,0,0,0,635,636,5,64,0,0,636,
		637,5,7,0,0,637,638,3,98,49,0,638,639,5,9,0,0,639,644,5,4,0,0,640,643,
		3,88,44,0,641,643,3,90,45,0,642,640,1,0,0,0,642,641,1,0,0,0,643,646,1,
		0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,644,1,0,0,0,
		647,648,5,5,0,0,648,87,1,0,0,0,649,650,5,66,0,0,650,661,5,3,0,0,651,662,
		3,62,31,0,652,662,5,2,0,0,653,657,5,4,0,0,654,656,3,62,31,0,655,654,1,
		0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,
		659,657,1,0,0,0,660,662,5,5,0,0,661,651,1,0,0,0,661,652,1,0,0,0,661,653,
		1,0,0,0,662,89,1,0,0,0,663,664,5,65,0,0,664,665,3,98,49,0,665,676,5,3,
		0,0,666,677,3,62,31,0,667,677,5,2,0,0,668,672,5,4,0,0,669,671,3,62,31,
		0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,
		675,1,0,0,0,674,672,1,0,0,0,675,677,5,5,0,0,676,666,1,0,0,0,676,667,1,
		0,0,0,676,668,1,0,0,0,677,91,1,0,0,0,678,688,5,67,0,0,679,689,3,62,31,
		0,680,684,5,4,0,0,681,683,3,62,31,0,682,681,1,0,0,0,683,686,1,0,0,0,684,
		682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,684,1,0,0,0,687,689,5,
		5,0,0,688,679,1,0,0,0,688,680,1,0,0,0,689,691,1,0,0,0,690,692,3,94,47,
		0,691,690,1,0,0,0,691,692,1,0,0,0,692,694,1,0,0,0,693,695,3,96,48,0,694,
		693,1,0,0,0,694,695,1,0,0,0,695,93,1,0,0,0,696,701,5,68,0,0,697,698,5,
		7,0,0,698,699,3,56,28,0,699,700,5,9,0,0,700,702,1,0,0,0,701,697,1,0,0,
		0,701,702,1,0,0,0,702,712,1,0,0,0,703,713,3,62,31,0,704,708,5,4,0,0,705,
		707,3,62,31,0,706,705,1,0,0,0,707,710,1,0,0,0,708,706,1,0,0,0,708,709,
		1,0,0,0,709,711,1,0,0,0,710,708,1,0,0,0,711,713,5,5,0,0,712,703,1,0,0,
		0,712,704,1,0,0,0,713,95,1,0,0,0,714,724,5,69,0,0,715,725,3,62,31,0,716,
		720,5,4,0,0,717,719,3,62,31,0,718,717,1,0,0,0,719,722,1,0,0,0,720,718,
		1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,0,0,0,723,725,5,5,0,
		0,724,715,1,0,0,0,724,716,1,0,0,0,725,97,1,0,0,0,726,727,6,49,-1,0,727,
		728,5,24,0,0,728,744,3,98,49,15,729,730,5,25,0,0,730,744,3,98,49,14,731,
		733,3,100,50,0,732,734,3,106,53,0,733,732,1,0,0,0,733,734,1,0,0,0,734,
		744,1,0,0,0,735,736,5,7,0,0,736,737,3,98,49,0,737,739,5,9,0,0,738,740,
		3,106,53,0,739,738,1,0,0,0,739,740,1,0,0,0,740,744,1,0,0,0,741,744,3,102,
		51,0,742,744,3,104,52,0,743,726,1,0,0,0,743,729,1,0,0,0,743,731,1,0,0,
		0,743,735,1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,781,1,0,0,0,745,
		746,10,13,0,0,746,747,7,6,0,0,747,780,3,98,49,14,748,749,10,12,0,0,749,
		750,7,7,0,0,750,780,3,98,49,13,751,752,10,11,0,0,752,753,7,8,0,0,753,780,
		3,98,49,12,754,755,10,10,0,0,755,756,7,9,0,0,756,780,3,98,49,11,757,758,
		10,9,0,0,758,759,5,34,0,0,759,780,3,98,49,10,760,761,10,8,0,0,761,762,
		5,35,0,0,762,780,3,98,49,9,763,764,10,7,0,0,764,765,5,36,0,0,765,766,3,
		98,49,0,766,767,5,3,0,0,767,768,3,98,49,8,768,780,1,0,0,0,769,770,10,5,
		0,0,770,772,3,110,55,0,771,773,3,106,53,0,772,771,1,0,0,0,772,773,1,0,
		0,0,773,780,1,0,0,0,774,775,10,4,0,0,775,777,3,108,54,0,776,778,3,106,
		53,0,777,776,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,745,1,0,0,0,779,
		748,1,0,0,0,779,751,1,0,0,0,779,754,1,0,0,0,779,757,1,0,0,0,779,760,1,
		0,0,0,779,763,1,0,0,0,779,769,1,0,0,0,779,774,1,0,0,0,780,783,1,0,0,0,
		781,779,1,0,0,0,781,782,1,0,0,0,782,99,1,0,0,0,783,781,1,0,0,0,784,802,
		5,93,0,0,785,787,5,91,0,0,786,788,7,10,0,0,787,786,1,0,0,0,787,788,1,0,
		0,0,788,802,1,0,0,0,789,791,5,92,0,0,790,792,7,11,0,0,791,790,1,0,0,0,
		791,792,1,0,0,0,792,802,1,0,0,0,793,795,5,94,0,0,794,796,3,106,53,0,795,
		794,1,0,0,0,795,796,1,0,0,0,796,802,1,0,0,0,797,802,5,90,0,0,798,802,5,
		58,0,0,799,802,5,59,0,0,800,802,5,89,0,0,801,784,1,0,0,0,801,785,1,0,0,
		0,801,789,1,0,0,0,801,793,1,0,0,0,801,797,1,0,0,0,801,798,1,0,0,0,801,
		799,1,0,0,0,801,800,1,0,0,0,802,101,1,0,0,0,803,804,5,44,0,0,804,805,5,
		7,0,0,805,806,3,56,28,0,806,807,5,9,0,0,807,103,1,0,0,0,808,809,5,70,0,
		0,809,810,5,7,0,0,810,811,3,56,28,0,811,812,5,9,0,0,812,105,1,0,0,0,813,
		814,5,15,0,0,814,815,3,98,49,0,815,816,5,16,0,0,816,107,1,0,0,0,817,818,
		5,1,0,0,818,819,5,90,0,0,819,109,1,0,0,0,820,821,5,1,0,0,821,823,5,90,
		0,0,822,824,3,50,25,0,823,822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,
		825,827,5,7,0,0,826,828,3,112,56,0,827,826,1,0,0,0,827,828,1,0,0,0,828,
		833,1,0,0,0,829,830,5,8,0,0,830,832,3,112,56,0,831,829,1,0,0,0,832,835,
		1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,1,0,0,
		0,836,837,5,9,0,0,837,111,1,0,0,0,838,840,5,17,0,0,839,838,1,0,0,0,839,
		840,1,0,0,0,840,841,1,0,0,0,841,842,3,98,49,0,842,113,1,0,0,0,105,116,
		118,123,125,134,147,157,165,171,177,180,187,193,199,202,209,215,222,229,
		235,244,258,268,271,274,279,285,291,301,307,329,336,343,348,354,360,367,
		373,380,389,395,405,416,423,426,436,445,449,451,454,457,465,485,489,501,
		520,524,529,533,545,549,558,562,572,579,583,588,592,596,600,607,611,617,
		629,633,642,644,657,661,672,676,684,688,691,694,701,708,712,720,724,733,
		739,743,772,777,779,781,787,791,795,801,823,827,833,839
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
