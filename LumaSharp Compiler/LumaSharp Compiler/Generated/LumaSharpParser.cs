//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/LumaSharp.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LumaSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, IMPORT=42, NAMESPACE=43, TYPE=44, CONTRACT=45, 
		ENUM=46, GLOBAL=47, EXPORT=48, INTERNAL=49, SPECIALHIDDEN=50, AS=51, CONTINUE=52, 
		BREAK=53, RETURN=54, IF=55, ELSE=56, ELSEIF=57, TRUE=58, FALSE=59, FOREACH=60, 
		IN=61, FOR=62, WHILE=63, SELECT=64, MATCH=65, DEFAULT=66, TRY=67, CATCH=68, 
		FINALLY=69, SIZE=70, READ=71, WRITE=72, THIS=73, BASE=74, NEW=75, STACKNEW=76, 
		ANY=77, BOOL=78, CHAR=79, I8=80, U8=81, I16=82, U16=83, I32=84, U32=85, 
		I64=86, U64=87, FLOAT=88, DOUBLE=89, STRING=90, NULL=91, IDENTIFIER=92, 
		INT=93, DECIMAL=94, HEX=95, LITERAL=96, WS=97, COMMENT=98;
	public const int
		RULE_compilationUnit = 0, RULE_importElement = 1, RULE_rootElement = 2, 
		RULE_importStatement = 3, RULE_importAlias = 4, RULE_namespaceDeclaration = 5, 
		RULE_namespaceName = 6, RULE_typeDeclaration = 7, RULE_contractDeclaration = 8, 
		RULE_enumDeclaration = 9, RULE_enumBlock = 10, RULE_enumField = 11, RULE_rootMember = 12, 
		RULE_rootMemberBlock = 13, RULE_memberBlock = 14, RULE_memberDeclaration = 15, 
		RULE_attributeDeclaration = 16, RULE_fieldDeclaration = 17, RULE_fieldAssignment = 18, 
		RULE_accessorDeclaration = 19, RULE_accessorBody = 20, RULE_accessorRead = 21, 
		RULE_accessorWrite = 22, RULE_initializerDeclaration = 23, RULE_methodDeclaration = 24, 
		RULE_methodParameterList = 25, RULE_methodParameter = 26, RULE_accessModifier = 27, 
		RULE_genericParameterList = 28, RULE_genericParameter = 29, RULE_genericArguments = 30, 
		RULE_arrayParameters = 31, RULE_inheritParameters = 32, RULE_typeReference = 33, 
		RULE_shortTypeReference = 34, RULE_parentTypeReference = 35, RULE_primitiveType = 36, 
		RULE_statementBlock = 37, RULE_statement = 38, RULE_returnStatement = 39, 
		RULE_methodInvokeStatement = 40, RULE_postfixStatement = 41, RULE_localVariableStatement = 42, 
		RULE_localVariableAssignment = 43, RULE_assignStatement = 44, RULE_ifStatement = 45, 
		RULE_elseifStatement = 46, RULE_elseStatement = 47, RULE_foreachStatement = 48, 
		RULE_forStatement = 49, RULE_forVariableStatement = 50, RULE_forIncrementExpression = 51, 
		RULE_whileStatement = 52, RULE_selectStatement = 53, RULE_defaultStatement = 54, 
		RULE_matchStatement = 55, RULE_tryStatement = 56, RULE_catchStatement = 57, 
		RULE_finallyStatement = 58, RULE_expression = 59, RULE_endExpression = 60, 
		RULE_typeExpression = 61, RULE_sizeExpression = 62, RULE_newExpression = 63, 
		RULE_indexExpression = 64, RULE_fieldAccessExpression = 65, RULE_methodInvokeExpression = 66, 
		RULE_methodArgument = 67, RULE_initializerInvokeExpression = 68;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importElement", "rootElement", "importStatement", 
		"importAlias", "namespaceDeclaration", "namespaceName", "typeDeclaration", 
		"contractDeclaration", "enumDeclaration", "enumBlock", "enumField", "rootMember", 
		"rootMemberBlock", "memberBlock", "memberDeclaration", "attributeDeclaration", 
		"fieldDeclaration", "fieldAssignment", "accessorDeclaration", "accessorBody", 
		"accessorRead", "accessorWrite", "initializerDeclaration", "methodDeclaration", 
		"methodParameterList", "methodParameter", "accessModifier", "genericParameterList", 
		"genericParameter", "genericArguments", "arrayParameters", "inheritParameters", 
		"typeReference", "shortTypeReference", "parentTypeReference", "primitiveType", 
		"statementBlock", "statement", "returnStatement", "methodInvokeStatement", 
		"postfixStatement", "localVariableStatement", "localVariableAssignment", 
		"assignStatement", "ifStatement", "elseifStatement", "elseStatement", 
		"foreachStatement", "forStatement", "forVariableStatement", "forIncrementExpression", 
		"whileStatement", "selectStatement", "defaultStatement", "matchStatement", 
		"tryStatement", "catchStatement", "finallyStatement", "expression", "endExpression", 
		"typeExpression", "sizeExpression", "newExpression", "indexExpression", 
		"fieldAccessExpression", "methodInvokeExpression", "methodArgument", "initializerInvokeExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "':'", "'{'", "','", "'}'", "'#'", "'('", "')'", "'='", 
		"'=>'", "'...'", "'<'", "'>'", "'['", "']'", "'&'", "'++'", "'--'", "'+='", 
		"'-='", "'/='", "'*='", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'>='", 
		"'<='", "'=='", "'!='", "'&&'", "'||'", "'?'", "'U'", "'L'", "'UL'", "'F'", 
		"'D'", "'import'", "'namespace'", "'type'", "'contract'", "'enum'", "'global'", 
		"'export'", "'internal'", "'hidden'", "'as'", "'continue'", "'break'", 
		"'return'", "'if'", "'else'", "'elseif'", "'true'", "'false'", "'foreach'", 
		"'in'", "'for'", "'while'", "'select'", "'match'", "'default'", "'try'", 
		"'catch'", "'finally'", "'size'", "'read'", "'write'", "'this'", "'base'", 
		"'new'", "'stacknew'", "'any'", "'bool'", "'char'", "'i8'", "'u8'", "'i16'", 
		"'u16'", "'i32'", "'u32'", "'i64'", "'u64'", "'float'", "'double'", "'string'", 
		"'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IMPORT", "NAMESPACE", "TYPE", "CONTRACT", 
		"ENUM", "GLOBAL", "EXPORT", "INTERNAL", "SPECIALHIDDEN", "AS", "CONTINUE", 
		"BREAK", "RETURN", "IF", "ELSE", "ELSEIF", "TRUE", "FALSE", "FOREACH", 
		"IN", "FOR", "WHILE", "SELECT", "MATCH", "DEFAULT", "TRY", "CATCH", "FINALLY", 
		"SIZE", "READ", "WRITE", "THIS", "BASE", "NEW", "STACKNEW", "ANY", "BOOL", 
		"CHAR", "I8", "U8", "I16", "U16", "I32", "U32", "I64", "U64", "FLOAT", 
		"DOUBLE", "STRING", "NULL", "IDENTIFIER", "INT", "DECIMAL", "HEX", "LITERAL", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LumaSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LumaSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LumaSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LumaSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext[] importElement() {
			return GetRuleContexts<ImportElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportElementContext importElement(int i) {
			return GetRuleContext<ImportElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext[] rootElement() {
			return GetRuleContexts<RootElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootElementContext rootElement(int i) {
			return GetRuleContext<RootElementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 138;
				importElement();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2243003720663168L) != 0)) {
				{
				{
				State = 144;
				rootElement();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext importAlias() {
			return GetRuleContext<ImportAliasContext>(0);
		}
		public ImportElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportElementContext importElement() {
		ImportElementContext _localctx = new ImportElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importElement);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				importStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				importAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember() {
			return GetRuleContext<RootMemberContext>(0);
		}
		public RootElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootElementContext rootElement() {
		RootElementContext _localctx = new RootElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_rootElement);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				namespaceDeclaration();
				}
				break;
			case T__6:
			case TYPE:
			case CONTRACT:
			case ENUM:
			case GLOBAL:
			case EXPORT:
			case INTERNAL:
			case SPECIALHIDDEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				rootMember();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(IMPORT);
			State = 159;
			namespaceName();
			State = 160;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LumaSharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(LumaSharpParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ImportAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasContext importAlias() {
		ImportAliasContext _localctx = new ImportAliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_importAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(IMPORT);
			State = 163;
			Match(IDENTIFIER);
			State = 164;
			Match(AS);
			State = 165;
			namespaceName();
			State = 166;
			Match(T__1);
			State = 167;
			typeReference();
			State = 168;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(LumaSharpParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberBlockContext rootMemberBlock() {
			return GetRuleContext<RootMemberBlockContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(NAMESPACE);
			State = 171;
			namespaceName();
			State = 172;
			rootMemberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(IDENTIFIER);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 175;
				Match(T__2);
				State = 176;
				Match(IDENTIFIER);
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 182;
				attributeDeclaration();
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 188;
				accessModifier();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			Match(TYPE);
			State = 195;
			Match(IDENTIFIER);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 196;
				genericParameterList();
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 199;
				inheritParameters();
				}
			}

			State = 202;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRACT() { return GetToken(LumaSharpParser.CONTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritParametersContext inheritParameters() {
			return GetRuleContext<InheritParametersContext>(0);
		}
		public ContractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitContractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDeclarationContext contractDeclaration() {
		ContractDeclarationContext _localctx = new ContractDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_contractDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 204;
				attributeDeclaration();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 210;
				accessModifier();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(CONTRACT);
			State = 217;
			Match(IDENTIFIER);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 218;
				genericParameterList();
				}
			}

			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 221;
				inheritParameters();
				}
			}

			State = 224;
			memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(LumaSharpParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 226;
				attributeDeclaration();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 232;
				accessModifier();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 238;
			Match(ENUM);
			State = 239;
			Match(IDENTIFIER);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 240;
				Match(T__2);
				State = 241;
				primitiveType();
				}
			}

			State = 244;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		public IToken lblock;
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_localctx.lblock = Match(T__3);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==IDENTIFIER) {
				{
				State = 247;
				enumField();
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 248;
					Match(T__4);
					State = 249;
					enumField();
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 257;
			_localctx.lblock = Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 259;
				attributeDeclaration();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 265;
			Match(IDENTIFIER);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 266;
				fieldAssignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public RootMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberContext rootMember() {
		RootMemberContext _localctx = new RootMemberContext(Context, State);
		EnterRule(_localctx, 24, RULE_rootMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 269;
				typeDeclaration();
				}
				break;
			case 2:
				{
				State = 270;
				contractDeclaration();
				}
				break;
			case 3:
				{
				State = 271;
				enumDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootMemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext[] rootMember() {
			return GetRuleContexts<RootMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootMemberContext rootMember(int i) {
			return GetRuleContext<RootMemberContext>(i);
		}
		public RootMemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootMemberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitRootMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootMemberBlockContext rootMemberBlock() {
		RootMemberBlockContext _localctx = new RootMemberBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_rootMemberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(T__3);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640960L) != 0)) {
				{
				{
				State = 275;
				rootMember();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 281;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public MemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberBlockContext memberBlock() {
		MemberBlockContext _localctx = new MemberBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_memberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__3);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2234207627640960L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				{
				State = 284;
				memberDeclaration();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 290;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDeclarationContext contractDeclaration() {
			return GetRuleContext<ContractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDeclarationContext accessorDeclaration() {
			return GetRuleContext<AccessorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberDeclaration);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				typeDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				contractDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				enumDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 295;
				fieldDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 296;
				accessorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 297;
				methodDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_attributeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(T__6);
			State = 301;
			typeReference();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 302;
				Match(T__7);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720692297984L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
					{
					State = 303;
					expression(0);
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 304;
						Match(T__4);
						State = 305;
						expression(0);
						}
						}
						State = 310;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 313;
				Match(T__8);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 316;
				attributeDeclaration();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 322;
				accessModifier();
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 328;
			typeReference();
			State = 329;
			Match(IDENTIFIER);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 330;
				fieldAssignment();
				}
			}

			State = 333;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAssignmentContext : ParserRuleContext {
		public IToken assign;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAssignmentContext fieldAssignment() {
		FieldAssignmentContext _localctx = new FieldAssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_localctx.assign = Match(T__9);
			State = 336;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		public AccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDeclarationContext accessorDeclaration() {
		AccessorDeclarationContext _localctx = new AccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_accessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 338;
				attributeDeclaration();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 344;
				accessModifier();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 350;
			typeReference();
			State = 351;
			Match(IDENTIFIER);
			State = 352;
			accessorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorWriteContext accessorWrite() {
			return GetRuleContext<AccessorWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorReadContext accessorRead() {
			return GetRuleContext<AccessorReadContext>(0);
		}
		public AccessorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorBodyContext accessorBody() {
		AccessorBodyContext _localctx = new AccessorBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_accessorBody);
		int _la;
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				Match(T__10);
				State = 355;
				expression(0);
				State = 356;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				accessorWrite();
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 359;
					accessorRead();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 362;
				accessorRead();
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 363;
					accessorWrite();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LumaSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorRead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorReadContext accessorRead() {
		AccessorReadContext _localctx = new AccessorReadContext(Context, State);
		EnterRule(_localctx, 42, RULE_accessorRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(T__10);
			State = 369;
			Match(READ);
			State = 370;
			Match(T__2);
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 371;
				statement();
				}
				break;
			case 2:
				{
				State = 372;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LumaSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public AccessorWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessorWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorWriteContext accessorWrite() {
		AccessorWriteContext _localctx = new AccessorWriteContext(Context, State);
		EnterRule(_localctx, 44, RULE_accessorWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(T__10);
			State = 376;
			Match(WRITE);
			State = 377;
			Match(T__2);
			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 378;
				statement();
				}
				break;
			case 2:
				{
				State = 379;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public InitializerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerDeclarationContext initializerDeclaration() {
		InitializerDeclarationContext _localctx = new InitializerDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_initializerDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 382;
				attributeDeclaration();
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 388;
				accessModifier();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394;
			Match(THIS);
			State = 395;
			Match(T__7);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 396;
				methodParameterList();
				}
			}

			State = 399;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 401;
				attributeDeclaration();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) {
				{
				{
				State = 407;
				accessModifier();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 413;
			typeReference();
			State = 414;
			Match(IDENTIFIER);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 415;
				genericParameterList();
				}
			}

			State = 418;
			Match(T__7);
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 419;
				methodParameterList();
				}
			}

			State = 422;
			Match(T__8);
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 423;
				Match(T__0);
				}
				break;
			case T__3:
				{
				State = 424;
				statementBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext[] methodParameter() {
			return GetRuleContexts<MethodParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodParameterContext methodParameter(int i) {
			return GetRuleContext<MethodParameterContext>(i);
		}
		public MethodParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterListContext methodParameterList() {
		MethodParameterListContext _localctx = new MethodParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			methodParameter();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 428;
				Match(T__4);
				State = 429;
				methodParameter();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public MethodParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterContext methodParameter() {
		MethodParameterContext _localctx = new MethodParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			typeReference();
			State = 436;
			Match(IDENTIFIER);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 437;
				Match(T__11);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(LumaSharpParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(LumaSharpParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIALHIDDEN() { return GetToken(LumaSharpParser.SPECIALHIDDEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(LumaSharpParser.GLOBAL, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext[] genericParameter() {
			return GetRuleContexts<GenericParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParameterContext genericParameter(int i) {
			return GetRuleContext<GenericParameterContext>(i);
		}
		public GenericParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterListContext genericParameterList() {
		GenericParameterListContext _localctx = new GenericParameterListContext(Context, State);
		EnterRule(_localctx, 56, RULE_genericParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(T__12);
			State = 443;
			genericParameter();
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 444;
				Match(T__4);
				State = 445;
				genericParameter();
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 451;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public GenericParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterContext genericParameter() {
		GenericParameterContext _localctx = new GenericParameterContext(Context, State);
		EnterRule(_localctx, 58, RULE_genericParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(IDENTIFIER);
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 454;
				Match(T__2);
				State = 455;
				typeReference();
				State = 460;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 456;
						Match(T__4);
						State = 457;
						typeReference();
						}
						} 
					}
					State = 462;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentsContext : ParserRuleContext {
		public IToken lgen;
		public IToken rgen;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public GenericArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitGenericArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentsContext genericArguments() {
		GenericArgumentsContext _localctx = new GenericArgumentsContext(Context, State);
		EnterRule(_localctx, 60, RULE_genericArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			_localctx.lgen = Match(T__12);
			State = 466;
			typeReference();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 467;
				Match(T__4);
				State = 468;
				typeReference();
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 474;
			_localctx.rgen = Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayParametersContext : ParserRuleContext {
		public ArrayParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitArrayParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayParametersContext arrayParameters() {
		ArrayParametersContext _localctx = new ArrayParametersContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrayParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(T__14);
			State = 478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 477;
				Match(T__4);
				}
				break;
			}
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 480;
				Match(T__4);
				}
			}

			State = 483;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public InheritParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInheritParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritParametersContext inheritParameters() {
		InheritParametersContext _localctx = new InheritParametersContext(Context, State);
		EnterRule(_localctx, 64, RULE_inheritParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(T__2);
			State = 486;
			typeReference();
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 487;
				Match(T__4);
				State = 488;
				typeReference();
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentTypeReferenceContext parentTypeReference() {
			return GetRuleContext<ParentTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case FLOAT:
			case DOUBLE:
			case STRING:
				{
				State = 494;
				primitiveType();
				}
				break;
			case IDENTIFIER:
				{
				{
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 495;
						Match(IDENTIFIER);
						State = 496;
						Match(T__2);
						}
						} 
					}
					State = 501;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				}
				State = 503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 502;
					parentTypeReference();
					}
					break;
				}
				State = 505;
				Match(IDENTIFIER);
				State = 507;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 506;
					genericArguments();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 511;
				arrayParameters();
				}
				break;
			}
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 514;
				_localctx.@ref = Match(T__16);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayParametersContext arrayParameters() {
			return GetRuleContext<ArrayParametersContext>(0);
		}
		public ShortTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterShortTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitShortTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortTypeReferenceContext shortTypeReference() {
		ShortTypeReferenceContext _localctx = new ShortTypeReferenceContext(Context, State);
		EnterRule(_localctx, 68, RULE_shortTypeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(IDENTIFIER);
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 518;
				genericArguments();
				}
			}

			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 521;
				arrayParameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShortTypeReferenceContext[] shortTypeReference() {
			return GetRuleContexts<ShortTypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortTypeReferenceContext shortTypeReference(int i) {
			return GetRuleContext<ShortTypeReferenceContext>(i);
		}
		public ParentTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterParentTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitParentTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentTypeReferenceContext parentTypeReference() {
		ParentTypeReferenceContext _localctx = new ParentTypeReferenceContext(Context, State);
		EnterRule(_localctx, 70, RULE_parentTypeReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 524;
					shortTypeReference();
					State = 525;
					Match(T__1);
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(LumaSharpParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LumaSharpParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LumaSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(LumaSharpParser.I8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(LumaSharpParser.U8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(LumaSharpParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(LumaSharpParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(LumaSharpParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(LumaSharpParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(LumaSharpParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(LumaSharpParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LumaSharpParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LumaSharpParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LumaSharpParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 16383L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(T__3);
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
				{
				{
				State = 535;
				statement();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 541;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeStatementContext methodInvokeStatement() {
			return GetRuleContext<MethodInvokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixStatementContext postfixStatement() {
			return GetRuleContext<PostfixStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableStatementContext localVariableStatement() {
			return GetRuleContext<LocalVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LumaSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(LumaSharpParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement);
		try {
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544;
				methodInvokeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 545;
				postfixStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 546;
				statementBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 547;
				localVariableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 548;
				assignStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 549;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 550;
				foreachStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 551;
				forStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 552;
				whileStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 553;
				selectStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 554;
				tryStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 555;
				Match(BREAK);
				State = 556;
				Match(T__0);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 557;
				Match(CONTINUE);
				State = 558;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LumaSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(RETURN);
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720692297984L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 562;
				expression(0);
				}
			}

			State = 565;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodInvokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeStatementContext methodInvokeStatement() {
		MethodInvokeStatementContext _localctx = new MethodInvokeStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_methodInvokeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 567;
				expression(0);
				}
				break;
			}
			State = 570;
			methodInvokeExpression();
			State = 571;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitPostfixStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixStatementContext postfixStatement() {
		PostfixStatementContext _localctx = new PostfixStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_postfixStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			expression(0);
			State = 574;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 575;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableAssignmentContext localVariableAssignment() {
			return GetRuleContext<LocalVariableAssignmentContext>(0);
		}
		public LocalVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableStatementContext localVariableStatement() {
		LocalVariableStatementContext _localctx = new LocalVariableStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_localVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			typeReference();
			State = 578;
			Match(IDENTIFIER);
			State = 583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 579;
				Match(T__4);
				State = 580;
				Match(IDENTIFIER);
				}
				}
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 586;
				localVariableAssignment();
				}
			}

			State = 589;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableAssignmentContext : ParserRuleContext {
		public IToken assign;
		public IToken lblock;
		public IToken rblock;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LocalVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterLocalVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitLocalVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableAssignmentContext localVariableAssignment() {
		LocalVariableAssignmentContext _localctx = new LocalVariableAssignmentContext(Context, State);
		EnterRule(_localctx, 86, RULE_localVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_localctx.assign = Match(T__9);
			State = 604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__17:
			case T__18:
			case T__23:
			case T__24:
			case TYPE:
			case TRUE:
			case FALSE:
			case SIZE:
			case THIS:
			case BASE:
			case NEW:
			case STACKNEW:
			case ANY:
			case BOOL:
			case CHAR:
			case I8:
			case U8:
			case I16:
			case U16:
			case I32:
			case U32:
			case I64:
			case U64:
			case FLOAT:
			case DOUBLE:
			case STRING:
			case NULL:
			case IDENTIFIER:
			case INT:
			case DECIMAL:
			case HEX:
			case LITERAL:
				{
				State = 592;
				expression(0);
				}
				break;
			case T__3:
				{
				State = 593;
				_localctx.lblock = Match(T__3);
				State = 594;
				expression(0);
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 595;
					Match(T__4);
					State = 596;
					expression(0);
					}
					}
					State = 601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 602;
				_localctx.rblock = Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public IToken assign;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			expression(0);
			State = 607;
			_localctx.assign = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15729664L) != 0)) ) {
				_localctx.assign = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 608;
			expression(0);
			State = 609;
			_localctx.semi = Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LumaSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext[] elseifStatement() {
			return GetRuleContexts<ElseifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement(int i) {
			return GetRuleContext<ElseifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(IF);
			State = 612;
			_localctx.lparen = Match(T__7);
			State = 613;
			expression(0);
			State = 614;
			_localctx.rparen = Match(T__8);
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 615;
				statement();
				}
				break;
			case 2:
				{
				State = 616;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 617;
				statementBlock();
				}
				break;
			}
			State = 623;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 620;
					elseifStatement();
					}
					} 
				}
				State = 625;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			State = 627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 626;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(LumaSharpParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStatementContext elseifStatement() {
		ElseifStatementContext _localctx = new ElseifStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_elseifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			Match(ELSEIF);
			State = 630;
			_localctx.lparen = Match(T__7);
			State = 631;
			expression(0);
			State = 632;
			_localctx.rparen = Match(T__8);
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 633;
				statement();
				}
				break;
			case 2:
				{
				State = 634;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 635;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LumaSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(ELSE);
			State = 642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 639;
				statement();
				}
				break;
			case 2:
				{
				State = 640;
				_localctx.semi = Match(T__0);
				}
				break;
			case 3:
				{
				State = 641;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(LumaSharpParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(LumaSharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(FOREACH);
			State = 645;
			_localctx.lparen = Match(T__7);
			State = 646;
			typeReference();
			State = 647;
			Match(IDENTIFIER);
			State = 648;
			Match(IN);
			State = 649;
			expression(0);
			State = 650;
			_localctx.rparen = Match(T__8);
			State = 656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					State = 651;
					statement();
					}
				}

				State = 654;
				_localctx.semi = Match(T__0);
				}
				break;
			case 2:
				{
				State = 655;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public IToken lparen;
		public IToken semiVar;
		public IToken semiCond;
		public IToken rparen;
		public IToken semi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LumaSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForVariableStatementContext forVariableStatement() {
			return GetRuleContext<ForVariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIncrementExpressionContext[] forIncrementExpression() {
			return GetRuleContexts<ForIncrementExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIncrementExpressionContext forIncrementExpression(int i) {
			return GetRuleContext<ForIncrementExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(FOR);
			State = 659;
			_localctx.lparen = Match(T__7);
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 49151L) != 0)) {
				{
				State = 660;
				forVariableStatement();
				}
			}

			State = 663;
			_localctx.semiVar = Match(T__0);
			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720692297984L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 664;
				expression(0);
				}
			}

			State = 667;
			_localctx.semiCond = Match(T__0);
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720692297984L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 668;
				forIncrementExpression();
				State = 673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 669;
					Match(T__4);
					State = 670;
					forIncrementExpression();
					}
					}
					State = 675;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 678;
			_localctx.rparen = Match(T__8);
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					State = 679;
					statement();
					}
				}

				State = 682;
				_localctx.semi = Match(T__0);
				}
				break;
			case 2:
				{
				State = 683;
				statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForVariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LumaSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LumaSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableAssignmentContext localVariableAssignment() {
			return GetRuleContext<LocalVariableAssignmentContext>(0);
		}
		public ForVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForVariableStatementContext forVariableStatement() {
		ForVariableStatementContext _localctx = new ForVariableStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_forVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			typeReference();
			State = 687;
			Match(IDENTIFIER);
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 688;
				Match(T__4);
				State = 689;
				Match(IDENTIFIER);
				}
				}
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 695;
				localVariableAssignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIncrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIncrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterForIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitForIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIncrementExpressionContext forIncrementExpression() {
		ForIncrementExpressionContext _localctx = new ForIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_forIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LumaSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			Match(WHILE);
			State = 701;
			Match(T__7);
			State = 702;
			expression(0);
			State = 703;
			Match(T__8);
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 704;
				statement();
				}
				break;
			case 2:
				{
				State = 705;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 706;
				Match(T__3);
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 707;
					statement();
					}
					}
					State = 712;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 713;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(LumaSharpParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext[] defaultStatement() {
			return GetRuleContexts<DefaultStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext defaultStatement(int i) {
			return GetRuleContext<DefaultStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext[] matchStatement() {
			return GetRuleContexts<MatchStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchStatementContext matchStatement(int i) {
			return GetRuleContext<MatchStatementContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(SELECT);
			State = 717;
			Match(T__7);
			State = 718;
			expression(0);
			State = 719;
			Match(T__8);
			State = 720;
			Match(T__3);
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH || _la==DEFAULT) {
				{
				State = 723;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 721;
					defaultStatement();
					}
					break;
				case MATCH:
					{
					State = 722;
					matchStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 728;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LumaSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStatementContext defaultStatement() {
		DefaultStatementContext _localctx = new DefaultStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_defaultStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			Match(DEFAULT);
			State = 731;
			Match(T__2);
			State = 742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 732;
				statement();
				}
				break;
			case 2:
				{
				State = 733;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 734;
				Match(T__3);
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 735;
					statement();
					}
					}
					State = 740;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 741;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(LumaSharpParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchStatementContext matchStatement() {
		MatchStatementContext _localctx = new MatchStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_matchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(MATCH);
			State = 745;
			expression(0);
			State = 746;
			Match(T__2);
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 747;
				statement();
				}
				break;
			case 2:
				{
				State = 748;
				Match(T__0);
				}
				break;
			case 3:
				{
				State = 749;
				Match(T__3);
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 750;
					statement();
					}
					}
					State = 755;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 756;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(LumaSharpParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchStatementContext catchStatement() {
			return GetRuleContext<CatchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyStatementContext finallyStatement() {
			return GetRuleContext<FinallyStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			Match(TRY);
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 760;
				statement();
				}
				break;
			case 2:
				{
				State = 761;
				Match(T__3);
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 762;
					statement();
					}
					}
					State = 767;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 768;
				Match(T__5);
				}
				break;
			}
			State = 772;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 771;
				catchStatement();
				}
				break;
			}
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 774;
				finallyStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(LumaSharpParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public CatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchStatementContext catchStatement() {
		CatchStatementContext _localctx = new CatchStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_catchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			Match(CATCH);
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 778;
				Match(T__7);
				State = 779;
				typeReference();
				State = 780;
				Match(T__8);
				}
				break;
			}
			State = 793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 784;
				statement();
				}
				break;
			case 2:
				{
				State = 785;
				Match(T__3);
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 786;
					statement();
					}
					}
					State = 791;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 792;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(LumaSharpParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FinallyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyStatementContext finallyStatement() {
		FinallyStatementContext _localctx = new FinallyStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_finallyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			Match(FINALLY);
			State = 805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 796;
				statement();
				}
				break;
			case 2:
				{
				State = 797;
				Match(T__3);
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2526501798717685484L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8589934153L) != 0)) {
					{
					{
					State = 798;
					statement();
					}
					}
					State = 803;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 804;
				Match(T__5);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken unary;
		public IToken lparen;
		public IToken binary;
		public IToken ternary;
		public IToken alternate;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext[] indexExpression() {
			return GetRuleContexts<IndexExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression(int i) {
			return GetRuleContext<IndexExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndExpressionContext endExpression() {
			return GetRuleContext<EndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvokeExpressionContext methodInvokeExpression() {
			return GetRuleContext<MethodInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessExpressionContext fieldAccessExpression() {
			return GetRuleContext<FieldAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionContext typeExpression() {
			return GetRuleContext<TypeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeExpressionContext sizeExpression() {
			return GetRuleContext<SizeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerInvokeExpressionContext initializerInvokeExpression() {
			return GetRuleContext<InitializerInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(LumaSharpParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(LumaSharpParser.BASE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 808;
				_localctx.unary = Match(T__23);
				State = 809;
				expression(27);
				}
				break;
			case 2:
				{
				State = 810;
				_localctx.unary = Match(T__24);
				State = 811;
				expression(26);
				}
				break;
			case 3:
				{
				State = 812;
				_localctx.unary = Match(T__17);
				State = 813;
				expression(25);
				}
				break;
			case 4:
				{
				State = 814;
				_localctx.unary = Match(T__18);
				State = 815;
				expression(24);
				}
				break;
			case 5:
				{
				State = 816;
				Match(IDENTIFIER);
				State = 820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 817;
						indexExpression();
						}
						} 
					}
					State = 822;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				}
				}
				break;
			case 6:
				{
				State = 823;
				endExpression();
				State = 827;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 824;
						indexExpression();
						}
						} 
					}
					State = 829;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				}
				}
				break;
			case 7:
				{
				State = 830;
				typeReference();
				State = 831;
				methodInvokeExpression();
				State = 835;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 832;
						indexExpression();
						}
						} 
					}
					State = 837;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				}
				}
				break;
			case 8:
				{
				State = 838;
				typeReference();
				State = 839;
				fieldAccessExpression();
				State = 843;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 840;
						indexExpression();
						}
						} 
					}
					State = 845;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				}
				}
				break;
			case 9:
				{
				State = 846;
				_localctx.lparen = Match(T__7);
				State = 847;
				expression(0);
				State = 848;
				_localctx.lparen = Match(T__8);
				State = 852;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 849;
						indexExpression();
						}
						} 
					}
					State = 854;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				}
				}
				break;
			case 10:
				{
				State = 855;
				typeExpression();
				}
				break;
			case 11:
				{
				State = 856;
				sizeExpression();
				}
				break;
			case 12:
				{
				State = 857;
				newExpression();
				State = 861;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 858;
						indexExpression();
						}
						} 
					}
					State = 863;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				}
				}
				break;
			case 13:
				{
				State = 864;
				initializerInvokeExpression();
				State = 868;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 865;
						indexExpression();
						}
						} 
					}
					State = 870;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				}
				}
				break;
			case 14:
				{
				State = 871;
				Match(THIS);
				State = 875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 872;
						indexExpression();
						}
						} 
					}
					State = 877;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				}
				}
				break;
			case 15:
				{
				State = 878;
				Match(BASE);
				State = 882;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 879;
						indexExpression();
						}
						} 
					}
					State = 884;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
				}
				}
				break;
			case 16:
				{
				State = 885;
				typeReference();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 934;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 932;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 888;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 889;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 890;
						expression(22);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 891;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 892;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__28) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 893;
						expression(21);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 894;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 895;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3221250048L) != 0)) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 896;
						expression(20);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 897;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 898;
						_localctx.binary = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
							_localctx.binary = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 899;
						expression(19);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 900;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 901;
						_localctx.binary = Match(T__33);
						State = 902;
						expression(18);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 903;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 904;
						_localctx.binary = Match(T__34);
						State = 905;
						expression(17);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 906;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 907;
						_localctx.ternary = Match(T__35);
						State = 908;
						expression(0);
						State = 909;
						_localctx.alternate = Match(T__2);
						State = 910;
						expression(16);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 912;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 913;
						_localctx.unary = Match(T__17);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 914;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 915;
						_localctx.unary = Match(T__18);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 916;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 917;
						methodInvokeExpression();
						State = 921;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 918;
								indexExpression();
								}
								} 
							}
							State = 923;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
						}
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 924;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 925;
						fieldAccessExpression();
						State = 929;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 926;
								indexExpression();
								}
								} 
							}
							State = 931;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
						}
						}
						break;
					}
					} 
				}
				State = 936;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EndExpressionContext : ParserRuleContext {
		public IToken decorator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(LumaSharpParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LumaSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LumaSharpParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(LumaSharpParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(LumaSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(LumaSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(LumaSharpParser.NULL, 0); }
		public EndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitEndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndExpressionContext endExpression() {
		EndExpressionContext _localctx = new EndExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_endExpression);
		int _la;
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 937;
				Match(HEX);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 938;
				Match(INT);
				State = 940;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 939;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 942;
				Match(DECIMAL);
				State = 944;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 943;
					_localctx.decorator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__39 || _la==T__40) ) {
						_localctx.decorator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 946;
				Match(LITERAL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 947;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 948;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 949;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LumaSharpParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExpressionContext typeExpression() {
		TypeExpressionContext _localctx = new TypeExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_typeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			Match(TYPE);
			State = 953;
			_localctx.lparen = Match(T__7);
			State = 954;
			typeReference();
			State = 955;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(LumaSharpParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public SizeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitSizeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeExpressionContext sizeExpression() {
		SizeExpressionContext _localctx = new SizeExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_sizeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			Match(SIZE);
			State = 958;
			_localctx.lparen = Match(T__7);
			State = 959;
			typeReference();
			State = 960;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerInvokeExpressionContext initializerInvokeExpression() {
			return GetRuleContext<InitializerInvokeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(LumaSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKNEW() { return GetToken(LumaSharpParser.STACKNEW, 0); }
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_newExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==STACKNEW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 963;
			initializerInvokeExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		public IToken larray;
		public IToken rarray;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_indexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			_localctx.larray = Match(T__14);
			State = 966;
			expression(0);
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 967;
				Match(T__4);
				State = 968;
				expression(0);
				}
				}
				State = 973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 974;
			_localctx.rarray = Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessExpressionContext : ParserRuleContext {
		public IToken dot;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		public FieldAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessExpressionContext fieldAccessExpression() {
		FieldAccessExpressionContext _localctx = new FieldAccessExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_fieldAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			_localctx.dot = Match(T__1);
			State = 977;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvokeExpressionContext : ParserRuleContext {
		public IToken dot;
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LumaSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgumentsContext genericArguments() {
			return GetRuleContext<GenericArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext[] methodArgument() {
			return GetRuleContexts<MethodArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext methodArgument(int i) {
			return GetRuleContext<MethodArgumentContext>(i);
		}
		public MethodInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvokeExpressionContext methodInvokeExpression() {
		MethodInvokeExpressionContext _localctx = new MethodInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_methodInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 979;
				_localctx.dot = Match(T__1);
				}
			}

			State = 982;
			Match(IDENTIFIER);
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 983;
				genericArguments();
				}
			}

			State = 986;
			_localctx.lparen = Match(T__7);
			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720692429056L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 987;
				methodArgument();
				}
			}

			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 990;
				Match(T__4);
				State = 991;
				methodArgument();
				}
				}
				State = 996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 997;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 134, RULE_methodArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 999;
				Match(T__16);
				}
			}

			State = 1002;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerInvokeExpressionContext : ParserRuleContext {
		public IToken lparen;
		public IToken rparen;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InitializerInvokeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerInvokeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.EnterInitializerInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILumaSharpListener typedListener = listener as ILumaSharpListener;
			if (typedListener != null) typedListener.ExitInitializerInvokeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumaSharpVisitor<TResult> typedVisitor = visitor as ILumaSharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerInvokeExpressionContext initializerInvokeExpression() {
		InitializerInvokeExpressionContext _localctx = new InitializerInvokeExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_initializerInvokeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			typeReference();
			State = 1005;
			_localctx.lparen = Match(T__7);
			State = 1014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864708720692297984L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 134217721L) != 0)) {
				{
				State = 1006;
				expression(0);
				State = 1011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 1007;
					Match(T__4);
					State = 1008;
					expression(0);
					}
					}
					State = 1013;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1016;
			_localctx.rparen = Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 59: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 21);
		case 1: return Precpred(Context, 20);
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 23);
		case 8: return Precpred(Context, 22);
		case 9: return Precpred(Context, 12);
		case 10: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,98,1019,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,5,0,140,8,0,10,0,
		12,0,143,9,0,1,0,5,0,146,8,0,10,0,12,0,149,9,0,1,1,1,1,3,1,153,8,1,1,2,
		1,2,3,2,157,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,5,6,178,8,6,10,6,12,6,181,9,6,1,7,5,7,184,8,7,10,
		7,12,7,187,9,7,1,7,5,7,190,8,7,10,7,12,7,193,9,7,1,7,1,7,1,7,3,7,198,8,
		7,1,7,3,7,201,8,7,1,7,1,7,1,8,5,8,206,8,8,10,8,12,8,209,9,8,1,8,5,8,212,
		8,8,10,8,12,8,215,9,8,1,8,1,8,1,8,3,8,220,8,8,1,8,3,8,223,8,8,1,8,1,8,
		1,9,5,9,228,8,9,10,9,12,9,231,9,9,1,9,5,9,234,8,9,10,9,12,9,237,9,9,1,
		9,1,9,1,9,1,9,3,9,243,8,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,251,8,10,10,
		10,12,10,254,9,10,3,10,256,8,10,1,10,1,10,1,11,5,11,261,8,11,10,11,12,
		11,264,9,11,1,11,1,11,3,11,268,8,11,1,12,1,12,1,12,3,12,273,8,12,1,13,
		1,13,5,13,277,8,13,10,13,12,13,280,9,13,1,13,1,13,1,14,1,14,5,14,286,8,
		14,10,14,12,14,289,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,299,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,307,8,16,10,16,12,16,310,9,16,
		3,16,312,8,16,1,16,3,16,315,8,16,1,17,5,17,318,8,17,10,17,12,17,321,9,
		17,1,17,5,17,324,8,17,10,17,12,17,327,9,17,1,17,1,17,1,17,3,17,332,8,17,
		1,17,1,17,1,18,1,18,1,18,1,19,5,19,340,8,19,10,19,12,19,343,9,19,1,19,
		5,19,346,8,19,10,19,12,19,349,9,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,361,8,20,1,20,1,20,3,20,365,8,20,3,20,367,8,20,1,21,
		1,21,1,21,1,21,1,21,3,21,374,8,21,1,22,1,22,1,22,1,22,1,22,3,22,381,8,
		22,1,23,5,23,384,8,23,10,23,12,23,387,9,23,1,23,5,23,390,8,23,10,23,12,
		23,393,9,23,1,23,1,23,1,23,3,23,398,8,23,1,23,1,23,1,24,5,24,403,8,24,
		10,24,12,24,406,9,24,1,24,5,24,409,8,24,10,24,12,24,412,9,24,1,24,1,24,
		1,24,3,24,417,8,24,1,24,1,24,3,24,421,8,24,1,24,1,24,1,24,3,24,426,8,24,
		1,25,1,25,1,25,5,25,431,8,25,10,25,12,25,434,9,25,1,26,1,26,1,26,3,26,
		439,8,26,1,27,1,27,1,28,1,28,1,28,1,28,5,28,447,8,28,10,28,12,28,450,9,
		28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,5,29,459,8,29,10,29,12,29,462,9,
		29,3,29,464,8,29,1,30,1,30,1,30,1,30,5,30,470,8,30,10,30,12,30,473,9,30,
		1,30,1,30,1,31,1,31,3,31,479,8,31,1,31,3,31,482,8,31,1,31,1,31,1,32,1,
		32,1,32,1,32,5,32,490,8,32,10,32,12,32,493,9,32,1,33,1,33,1,33,5,33,498,
		8,33,10,33,12,33,501,9,33,1,33,3,33,504,8,33,1,33,1,33,3,33,508,8,33,3,
		33,510,8,33,1,33,3,33,513,8,33,1,33,3,33,516,8,33,1,34,1,34,3,34,520,8,
		34,1,34,3,34,523,8,34,1,35,1,35,1,35,5,35,528,8,35,10,35,12,35,531,9,35,
		1,36,1,36,1,37,1,37,5,37,537,8,37,10,37,12,37,540,9,37,1,37,1,37,1,38,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,3,38,560,8,38,1,39,1,39,3,39,564,8,39,1,39,1,39,1,40,3,40,569,8,40,
		1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,582,8,42,10,
		42,12,42,585,9,42,1,42,3,42,588,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,
		1,43,5,43,598,8,43,10,43,12,43,601,9,43,1,43,1,43,3,43,605,8,43,1,44,1,
		44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,619,8,45,1,45,
		5,45,622,8,45,10,45,12,45,625,9,45,1,45,3,45,628,8,45,1,46,1,46,1,46,1,
		46,1,46,1,46,1,46,3,46,637,8,46,1,47,1,47,1,47,1,47,3,47,643,8,47,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,653,8,48,1,48,1,48,3,48,657,8,
		48,1,49,1,49,1,49,3,49,662,8,49,1,49,1,49,3,49,666,8,49,1,49,1,49,1,49,
		1,49,5,49,672,8,49,10,49,12,49,675,9,49,3,49,677,8,49,1,49,1,49,3,49,681,
		8,49,1,49,1,49,3,49,685,8,49,1,50,1,50,1,50,1,50,5,50,691,8,50,10,50,12,
		50,694,9,50,1,50,3,50,697,8,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,5,52,709,8,52,10,52,12,52,712,9,52,1,52,3,52,715,8,52,1,53,1,
		53,1,53,1,53,1,53,1,53,1,53,5,53,724,8,53,10,53,12,53,727,9,53,1,53,1,
		53,1,54,1,54,1,54,1,54,1,54,1,54,5,54,737,8,54,10,54,12,54,740,9,54,1,
		54,3,54,743,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,752,8,55,10,55,
		12,55,755,9,55,1,55,3,55,758,8,55,1,56,1,56,1,56,1,56,5,56,764,8,56,10,
		56,12,56,767,9,56,1,56,3,56,770,8,56,1,56,3,56,773,8,56,1,56,3,56,776,
		8,56,1,57,1,57,1,57,1,57,1,57,3,57,783,8,57,1,57,1,57,1,57,5,57,788,8,
		57,10,57,12,57,791,9,57,1,57,3,57,794,8,57,1,58,1,58,1,58,1,58,5,58,800,
		8,58,10,58,12,58,803,9,58,1,58,3,58,806,8,58,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,5,59,819,8,59,10,59,12,59,822,9,59,1,59,
		1,59,5,59,826,8,59,10,59,12,59,829,9,59,1,59,1,59,1,59,5,59,834,8,59,10,
		59,12,59,837,9,59,1,59,1,59,1,59,5,59,842,8,59,10,59,12,59,845,9,59,1,
		59,1,59,1,59,1,59,5,59,851,8,59,10,59,12,59,854,9,59,1,59,1,59,1,59,1,
		59,5,59,860,8,59,10,59,12,59,863,9,59,1,59,1,59,5,59,867,8,59,10,59,12,
		59,870,9,59,1,59,1,59,5,59,874,8,59,10,59,12,59,877,9,59,1,59,1,59,5,59,
		881,8,59,10,59,12,59,884,9,59,1,59,3,59,887,8,59,1,59,1,59,1,59,1,59,1,
		59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
		59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,920,
		8,59,10,59,12,59,923,9,59,1,59,1,59,1,59,5,59,928,8,59,10,59,12,59,931,
		9,59,5,59,933,8,59,10,59,12,59,936,9,59,1,60,1,60,1,60,3,60,941,8,60,1,
		60,1,60,3,60,945,8,60,1,60,1,60,1,60,1,60,3,60,951,8,60,1,61,1,61,1,61,
		1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
		5,64,970,8,64,10,64,12,64,973,9,64,1,64,1,64,1,65,1,65,1,65,1,66,3,66,
		981,8,66,1,66,1,66,3,66,985,8,66,1,66,1,66,3,66,989,8,66,1,66,1,66,5,66,
		993,8,66,10,66,12,66,996,9,66,1,66,1,66,1,67,3,67,1001,8,67,1,67,1,67,
		1,68,1,68,1,68,1,68,1,68,5,68,1010,8,68,10,68,12,68,1013,9,68,3,68,1015,
		8,68,1,68,1,68,1,68,0,1,118,69,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,0,11,1,0,47,50,1,0,77,90,1,0,18,19,
		2,0,10,10,20,23,1,0,26,28,2,0,24,24,29,29,2,0,13,14,30,31,1,0,32,33,1,
		0,37,39,1,0,40,41,1,0,75,76,1129,0,141,1,0,0,0,2,152,1,0,0,0,4,156,1,0,
		0,0,6,158,1,0,0,0,8,162,1,0,0,0,10,170,1,0,0,0,12,174,1,0,0,0,14,185,1,
		0,0,0,16,207,1,0,0,0,18,229,1,0,0,0,20,246,1,0,0,0,22,262,1,0,0,0,24,272,
		1,0,0,0,26,274,1,0,0,0,28,283,1,0,0,0,30,298,1,0,0,0,32,300,1,0,0,0,34,
		319,1,0,0,0,36,335,1,0,0,0,38,341,1,0,0,0,40,366,1,0,0,0,42,368,1,0,0,
		0,44,375,1,0,0,0,46,385,1,0,0,0,48,404,1,0,0,0,50,427,1,0,0,0,52,435,1,
		0,0,0,54,440,1,0,0,0,56,442,1,0,0,0,58,453,1,0,0,0,60,465,1,0,0,0,62,476,
		1,0,0,0,64,485,1,0,0,0,66,509,1,0,0,0,68,517,1,0,0,0,70,529,1,0,0,0,72,
		532,1,0,0,0,74,534,1,0,0,0,76,559,1,0,0,0,78,561,1,0,0,0,80,568,1,0,0,
		0,82,573,1,0,0,0,84,577,1,0,0,0,86,591,1,0,0,0,88,606,1,0,0,0,90,611,1,
		0,0,0,92,629,1,0,0,0,94,638,1,0,0,0,96,644,1,0,0,0,98,658,1,0,0,0,100,
		686,1,0,0,0,102,698,1,0,0,0,104,700,1,0,0,0,106,716,1,0,0,0,108,730,1,
		0,0,0,110,744,1,0,0,0,112,759,1,0,0,0,114,777,1,0,0,0,116,795,1,0,0,0,
		118,886,1,0,0,0,120,950,1,0,0,0,122,952,1,0,0,0,124,957,1,0,0,0,126,962,
		1,0,0,0,128,965,1,0,0,0,130,976,1,0,0,0,132,980,1,0,0,0,134,1000,1,0,0,
		0,136,1004,1,0,0,0,138,140,3,2,1,0,139,138,1,0,0,0,140,143,1,0,0,0,141,
		139,1,0,0,0,141,142,1,0,0,0,142,147,1,0,0,0,143,141,1,0,0,0,144,146,3,
		4,2,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,
		148,1,1,0,0,0,149,147,1,0,0,0,150,153,3,6,3,0,151,153,3,8,4,0,152,150,
		1,0,0,0,152,151,1,0,0,0,153,3,1,0,0,0,154,157,3,10,5,0,155,157,3,24,12,
		0,156,154,1,0,0,0,156,155,1,0,0,0,157,5,1,0,0,0,158,159,5,42,0,0,159,160,
		3,12,6,0,160,161,5,1,0,0,161,7,1,0,0,0,162,163,5,42,0,0,163,164,5,92,0,
		0,164,165,5,51,0,0,165,166,3,12,6,0,166,167,5,2,0,0,167,168,3,66,33,0,
		168,169,5,1,0,0,169,9,1,0,0,0,170,171,5,43,0,0,171,172,3,12,6,0,172,173,
		3,26,13,0,173,11,1,0,0,0,174,179,5,92,0,0,175,176,5,3,0,0,176,178,5,92,
		0,0,177,175,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
		13,1,0,0,0,181,179,1,0,0,0,182,184,3,32,16,0,183,182,1,0,0,0,184,187,1,
		0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,191,1,0,0,0,187,185,1,0,0,0,
		188,190,3,54,27,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,
		192,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,44,0,0,195,197,5,
		92,0,0,196,198,3,56,28,0,197,196,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,
		0,199,201,3,64,32,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,
		203,3,28,14,0,203,15,1,0,0,0,204,206,3,32,16,0,205,204,1,0,0,0,206,209,
		1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,213,1,0,0,0,209,207,1,0,0,
		0,210,212,3,54,27,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,
		214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,45,0,0,217,219,5,
		92,0,0,218,220,3,56,28,0,219,218,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,
		0,221,223,3,64,32,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,
		225,3,28,14,0,225,17,1,0,0,0,226,228,3,32,16,0,227,226,1,0,0,0,228,231,
		1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,235,1,0,0,0,231,229,1,0,0,
		0,232,234,3,54,27,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,
		236,1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,5,46,0,0,239,242,5,
		92,0,0,240,241,5,3,0,0,241,243,3,72,36,0,242,240,1,0,0,0,242,243,1,0,0,
		0,243,244,1,0,0,0,244,245,3,20,10,0,245,19,1,0,0,0,246,255,5,4,0,0,247,
		252,3,22,11,0,248,249,5,5,0,0,249,251,3,22,11,0,250,248,1,0,0,0,251,254,
		1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,
		0,255,247,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,5,6,0,0,258,
		21,1,0,0,0,259,261,3,32,16,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,
		0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,267,5,92,0,0,
		266,268,3,36,18,0,267,266,1,0,0,0,267,268,1,0,0,0,268,23,1,0,0,0,269,273,
		3,14,7,0,270,273,3,16,8,0,271,273,3,18,9,0,272,269,1,0,0,0,272,270,1,0,
		0,0,272,271,1,0,0,0,273,25,1,0,0,0,274,278,5,4,0,0,275,277,3,24,12,0,276,
		275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,281,1,
		0,0,0,280,278,1,0,0,0,281,282,5,6,0,0,282,27,1,0,0,0,283,287,5,4,0,0,284,
		286,3,30,15,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,
		1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,5,6,0,0,291,29,1,0,0,0,
		292,299,3,14,7,0,293,299,3,16,8,0,294,299,3,18,9,0,295,299,3,34,17,0,296,
		299,3,38,19,0,297,299,3,48,24,0,298,292,1,0,0,0,298,293,1,0,0,0,298,294,
		1,0,0,0,298,295,1,0,0,0,298,296,1,0,0,0,298,297,1,0,0,0,299,31,1,0,0,0,
		300,301,5,7,0,0,301,314,3,66,33,0,302,311,5,8,0,0,303,308,3,118,59,0,304,
		305,5,5,0,0,305,307,3,118,59,0,306,304,1,0,0,0,307,310,1,0,0,0,308,306,
		1,0,0,0,308,309,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,311,303,1,0,0,
		0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,5,9,0,0,314,302,1,0,0,0,314,
		315,1,0,0,0,315,33,1,0,0,0,316,318,3,32,16,0,317,316,1,0,0,0,318,321,1,
		0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,325,1,0,0,0,321,319,1,0,0,0,
		322,324,3,54,27,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,
		326,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,329,3,66,33,0,329,331,
		5,92,0,0,330,332,3,36,18,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,
		0,0,333,334,5,1,0,0,334,35,1,0,0,0,335,336,5,10,0,0,336,337,3,118,59,0,
		337,37,1,0,0,0,338,340,3,32,16,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,
		1,0,0,0,341,342,1,0,0,0,342,347,1,0,0,0,343,341,1,0,0,0,344,346,3,54,27,
		0,345,344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
		350,1,0,0,0,349,347,1,0,0,0,350,351,3,66,33,0,351,352,5,92,0,0,352,353,
		3,40,20,0,353,39,1,0,0,0,354,355,5,11,0,0,355,356,3,118,59,0,356,357,5,
		1,0,0,357,367,1,0,0,0,358,360,3,44,22,0,359,361,3,42,21,0,360,359,1,0,
		0,0,360,361,1,0,0,0,361,367,1,0,0,0,362,364,3,42,21,0,363,365,3,44,22,
		0,364,363,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,354,1,0,0,0,366,
		358,1,0,0,0,366,362,1,0,0,0,367,41,1,0,0,0,368,369,5,11,0,0,369,370,5,
		71,0,0,370,373,5,3,0,0,371,374,3,76,38,0,372,374,3,74,37,0,373,371,1,0,
		0,0,373,372,1,0,0,0,374,43,1,0,0,0,375,376,5,11,0,0,376,377,5,72,0,0,377,
		380,5,3,0,0,378,381,3,76,38,0,379,381,3,74,37,0,380,378,1,0,0,0,380,379,
		1,0,0,0,381,45,1,0,0,0,382,384,3,32,16,0,383,382,1,0,0,0,384,387,1,0,0,
		0,385,383,1,0,0,0,385,386,1,0,0,0,386,391,1,0,0,0,387,385,1,0,0,0,388,
		390,3,54,27,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,
		1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,395,5,73,0,0,395,397,5,8,0,
		0,396,398,3,50,25,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,
		400,5,9,0,0,400,47,1,0,0,0,401,403,3,32,16,0,402,401,1,0,0,0,403,406,1,
		0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,410,1,0,0,0,406,404,1,0,0,0,
		407,409,3,54,27,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,
		411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,3,66,33,0,414,416,
		5,92,0,0,415,417,3,56,28,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,
		0,0,418,420,5,8,0,0,419,421,3,50,25,0,420,419,1,0,0,0,420,421,1,0,0,0,
		421,422,1,0,0,0,422,425,5,9,0,0,423,426,5,1,0,0,424,426,3,74,37,0,425,
		423,1,0,0,0,425,424,1,0,0,0,426,49,1,0,0,0,427,432,3,52,26,0,428,429,5,
		5,0,0,429,431,3,52,26,0,430,428,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,
		0,432,433,1,0,0,0,433,51,1,0,0,0,434,432,1,0,0,0,435,436,3,66,33,0,436,
		438,5,92,0,0,437,439,5,12,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,53,1,
		0,0,0,440,441,7,0,0,0,441,55,1,0,0,0,442,443,5,13,0,0,443,448,3,58,29,
		0,444,445,5,5,0,0,445,447,3,58,29,0,446,444,1,0,0,0,447,450,1,0,0,0,448,
		446,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,448,1,0,0,0,451,452,5,
		14,0,0,452,57,1,0,0,0,453,463,5,92,0,0,454,455,5,3,0,0,455,460,3,66,33,
		0,456,457,5,5,0,0,457,459,3,66,33,0,458,456,1,0,0,0,459,462,1,0,0,0,460,
		458,1,0,0,0,460,461,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,463,454,1,
		0,0,0,463,464,1,0,0,0,464,59,1,0,0,0,465,466,5,13,0,0,466,471,3,66,33,
		0,467,468,5,5,0,0,468,470,3,66,33,0,469,467,1,0,0,0,470,473,1,0,0,0,471,
		469,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,5,
		14,0,0,475,61,1,0,0,0,476,478,5,15,0,0,477,479,5,5,0,0,478,477,1,0,0,0,
		478,479,1,0,0,0,479,481,1,0,0,0,480,482,5,5,0,0,481,480,1,0,0,0,481,482,
		1,0,0,0,482,483,1,0,0,0,483,484,5,16,0,0,484,63,1,0,0,0,485,486,5,3,0,
		0,486,491,3,66,33,0,487,488,5,5,0,0,488,490,3,66,33,0,489,487,1,0,0,0,
		490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,65,1,0,0,0,493,491,
		1,0,0,0,494,510,3,72,36,0,495,496,5,92,0,0,496,498,5,3,0,0,497,495,1,0,
		0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,503,1,0,0,0,501,
		499,1,0,0,0,502,504,3,70,35,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,
		1,0,0,0,505,507,5,92,0,0,506,508,3,60,30,0,507,506,1,0,0,0,507,508,1,0,
		0,0,508,510,1,0,0,0,509,494,1,0,0,0,509,499,1,0,0,0,510,512,1,0,0,0,511,
		513,3,62,31,0,512,511,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,516,
		5,17,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,67,1,0,0,0,517,519,5,92,0,
		0,518,520,3,60,30,0,519,518,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,
		523,3,62,31,0,522,521,1,0,0,0,522,523,1,0,0,0,523,69,1,0,0,0,524,525,3,
		68,34,0,525,526,5,2,0,0,526,528,1,0,0,0,527,524,1,0,0,0,528,531,1,0,0,
		0,529,527,1,0,0,0,529,530,1,0,0,0,530,71,1,0,0,0,531,529,1,0,0,0,532,533,
		7,1,0,0,533,73,1,0,0,0,534,538,5,4,0,0,535,537,3,76,38,0,536,535,1,0,0,
		0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,541,1,0,0,0,540,
		538,1,0,0,0,541,542,5,6,0,0,542,75,1,0,0,0,543,560,3,78,39,0,544,560,3,
		80,40,0,545,560,3,82,41,0,546,560,3,74,37,0,547,560,3,84,42,0,548,560,
		3,88,44,0,549,560,3,90,45,0,550,560,3,96,48,0,551,560,3,98,49,0,552,560,
		3,104,52,0,553,560,3,106,53,0,554,560,3,112,56,0,555,556,5,53,0,0,556,
		560,5,1,0,0,557,558,5,52,0,0,558,560,5,1,0,0,559,543,1,0,0,0,559,544,1,
		0,0,0,559,545,1,0,0,0,559,546,1,0,0,0,559,547,1,0,0,0,559,548,1,0,0,0,
		559,549,1,0,0,0,559,550,1,0,0,0,559,551,1,0,0,0,559,552,1,0,0,0,559,553,
		1,0,0,0,559,554,1,0,0,0,559,555,1,0,0,0,559,557,1,0,0,0,560,77,1,0,0,0,
		561,563,5,54,0,0,562,564,3,118,59,0,563,562,1,0,0,0,563,564,1,0,0,0,564,
		565,1,0,0,0,565,566,5,1,0,0,566,79,1,0,0,0,567,569,3,118,59,0,568,567,
		1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,3,132,66,0,571,572,5,1,
		0,0,572,81,1,0,0,0,573,574,3,118,59,0,574,575,7,2,0,0,575,576,5,1,0,0,
		576,83,1,0,0,0,577,578,3,66,33,0,578,583,5,92,0,0,579,580,5,5,0,0,580,
		582,5,92,0,0,581,579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,
		0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,586,588,3,86,43,0,587,586,1,0,0,
		0,587,588,1,0,0,0,588,589,1,0,0,0,589,590,5,1,0,0,590,85,1,0,0,0,591,604,
		5,10,0,0,592,605,3,118,59,0,593,594,5,4,0,0,594,599,3,118,59,0,595,596,
		5,5,0,0,596,598,3,118,59,0,597,595,1,0,0,0,598,601,1,0,0,0,599,597,1,0,
		0,0,599,600,1,0,0,0,600,602,1,0,0,0,601,599,1,0,0,0,602,603,5,6,0,0,603,
		605,1,0,0,0,604,592,1,0,0,0,604,593,1,0,0,0,605,87,1,0,0,0,606,607,3,118,
		59,0,607,608,7,3,0,0,608,609,3,118,59,0,609,610,5,1,0,0,610,89,1,0,0,0,
		611,612,5,55,0,0,612,613,5,8,0,0,613,614,3,118,59,0,614,618,5,9,0,0,615,
		619,3,76,38,0,616,619,5,1,0,0,617,619,3,74,37,0,618,615,1,0,0,0,618,616,
		1,0,0,0,618,617,1,0,0,0,619,623,1,0,0,0,620,622,3,92,46,0,621,620,1,0,
		0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,627,1,0,0,0,625,
		623,1,0,0,0,626,628,3,94,47,0,627,626,1,0,0,0,627,628,1,0,0,0,628,91,1,
		0,0,0,629,630,5,57,0,0,630,631,5,8,0,0,631,632,3,118,59,0,632,636,5,9,
		0,0,633,637,3,76,38,0,634,637,5,1,0,0,635,637,3,74,37,0,636,633,1,0,0,
		0,636,634,1,0,0,0,636,635,1,0,0,0,637,93,1,0,0,0,638,642,5,56,0,0,639,
		643,3,76,38,0,640,643,5,1,0,0,641,643,3,74,37,0,642,639,1,0,0,0,642,640,
		1,0,0,0,642,641,1,0,0,0,643,95,1,0,0,0,644,645,5,60,0,0,645,646,5,8,0,
		0,646,647,3,66,33,0,647,648,5,92,0,0,648,649,5,61,0,0,649,650,3,118,59,
		0,650,656,5,9,0,0,651,653,3,76,38,0,652,651,1,0,0,0,652,653,1,0,0,0,653,
		654,1,0,0,0,654,657,5,1,0,0,655,657,3,74,37,0,656,652,1,0,0,0,656,655,
		1,0,0,0,657,97,1,0,0,0,658,659,5,62,0,0,659,661,5,8,0,0,660,662,3,100,
		50,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,665,5,1,0,0,664,
		666,3,118,59,0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,676,
		5,1,0,0,668,673,3,102,51,0,669,670,5,5,0,0,670,672,3,102,51,0,671,669,
		1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,677,1,0,0,
		0,675,673,1,0,0,0,676,668,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,
		684,5,9,0,0,679,681,3,76,38,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,
		1,0,0,0,682,685,5,1,0,0,683,685,3,74,37,0,684,680,1,0,0,0,684,683,1,0,
		0,0,685,99,1,0,0,0,686,687,3,66,33,0,687,692,5,92,0,0,688,689,5,5,0,0,
		689,691,5,92,0,0,690,688,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,
		1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,695,697,3,86,43,0,696,695,1,0,
		0,0,696,697,1,0,0,0,697,101,1,0,0,0,698,699,3,118,59,0,699,103,1,0,0,0,
		700,701,5,63,0,0,701,702,5,8,0,0,702,703,3,118,59,0,703,714,5,9,0,0,704,
		715,3,76,38,0,705,715,5,1,0,0,706,710,5,4,0,0,707,709,3,76,38,0,708,707,
		1,0,0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,
		0,712,710,1,0,0,0,713,715,5,6,0,0,714,704,1,0,0,0,714,705,1,0,0,0,714,
		706,1,0,0,0,715,105,1,0,0,0,716,717,5,64,0,0,717,718,5,8,0,0,718,719,3,
		118,59,0,719,720,5,9,0,0,720,725,5,4,0,0,721,724,3,108,54,0,722,724,3,
		110,55,0,723,721,1,0,0,0,723,722,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,
		0,725,726,1,0,0,0,726,728,1,0,0,0,727,725,1,0,0,0,728,729,5,6,0,0,729,
		107,1,0,0,0,730,731,5,66,0,0,731,742,5,3,0,0,732,743,3,76,38,0,733,743,
		5,1,0,0,734,738,5,4,0,0,735,737,3,76,38,0,736,735,1,0,0,0,737,740,1,0,
		0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,738,1,0,0,0,741,
		743,5,6,0,0,742,732,1,0,0,0,742,733,1,0,0,0,742,734,1,0,0,0,743,109,1,
		0,0,0,744,745,5,65,0,0,745,746,3,118,59,0,746,757,5,3,0,0,747,758,3,76,
		38,0,748,758,5,1,0,0,749,753,5,4,0,0,750,752,3,76,38,0,751,750,1,0,0,0,
		752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,753,
		1,0,0,0,756,758,5,6,0,0,757,747,1,0,0,0,757,748,1,0,0,0,757,749,1,0,0,
		0,758,111,1,0,0,0,759,769,5,67,0,0,760,770,3,76,38,0,761,765,5,4,0,0,762,
		764,3,76,38,0,763,762,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,
		1,0,0,0,766,768,1,0,0,0,767,765,1,0,0,0,768,770,5,6,0,0,769,760,1,0,0,
		0,769,761,1,0,0,0,770,772,1,0,0,0,771,773,3,114,57,0,772,771,1,0,0,0,772,
		773,1,0,0,0,773,775,1,0,0,0,774,776,3,116,58,0,775,774,1,0,0,0,775,776,
		1,0,0,0,776,113,1,0,0,0,777,782,5,68,0,0,778,779,5,8,0,0,779,780,3,66,
		33,0,780,781,5,9,0,0,781,783,1,0,0,0,782,778,1,0,0,0,782,783,1,0,0,0,783,
		793,1,0,0,0,784,794,3,76,38,0,785,789,5,4,0,0,786,788,3,76,38,0,787,786,
		1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,
		0,791,789,1,0,0,0,792,794,5,6,0,0,793,784,1,0,0,0,793,785,1,0,0,0,794,
		115,1,0,0,0,795,805,5,69,0,0,796,806,3,76,38,0,797,801,5,4,0,0,798,800,
		3,76,38,0,799,798,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,
		0,0,802,804,1,0,0,0,803,801,1,0,0,0,804,806,5,6,0,0,805,796,1,0,0,0,805,
		797,1,0,0,0,806,117,1,0,0,0,807,808,6,59,-1,0,808,809,5,24,0,0,809,887,
		3,118,59,27,810,811,5,25,0,0,811,887,3,118,59,26,812,813,5,18,0,0,813,
		887,3,118,59,25,814,815,5,19,0,0,815,887,3,118,59,24,816,820,5,92,0,0,
		817,819,3,128,64,0,818,817,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,
		821,1,0,0,0,821,887,1,0,0,0,822,820,1,0,0,0,823,827,3,120,60,0,824,826,
		3,128,64,0,825,824,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,
		0,0,828,887,1,0,0,0,829,827,1,0,0,0,830,831,3,66,33,0,831,835,3,132,66,
		0,832,834,3,128,64,0,833,832,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,
		836,1,0,0,0,836,887,1,0,0,0,837,835,1,0,0,0,838,839,3,66,33,0,839,843,
		3,130,65,0,840,842,3,128,64,0,841,840,1,0,0,0,842,845,1,0,0,0,843,841,
		1,0,0,0,843,844,1,0,0,0,844,887,1,0,0,0,845,843,1,0,0,0,846,847,5,8,0,
		0,847,848,3,118,59,0,848,852,5,9,0,0,849,851,3,128,64,0,850,849,1,0,0,
		0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,887,1,0,0,0,854,
		852,1,0,0,0,855,887,3,122,61,0,856,887,3,124,62,0,857,861,3,126,63,0,858,
		860,3,128,64,0,859,858,1,0,0,0,860,863,1,0,0,0,861,859,1,0,0,0,861,862,
		1,0,0,0,862,887,1,0,0,0,863,861,1,0,0,0,864,868,3,136,68,0,865,867,3,128,
		64,0,866,865,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,
		887,1,0,0,0,870,868,1,0,0,0,871,875,5,73,0,0,872,874,3,128,64,0,873,872,
		1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,887,1,0,0,
		0,877,875,1,0,0,0,878,882,5,74,0,0,879,881,3,128,64,0,880,879,1,0,0,0,
		881,884,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,887,1,0,0,0,884,882,
		1,0,0,0,885,887,3,66,33,0,886,807,1,0,0,0,886,810,1,0,0,0,886,812,1,0,
		0,0,886,814,1,0,0,0,886,816,1,0,0,0,886,823,1,0,0,0,886,830,1,0,0,0,886,
		838,1,0,0,0,886,846,1,0,0,0,886,855,1,0,0,0,886,856,1,0,0,0,886,857,1,
		0,0,0,886,864,1,0,0,0,886,871,1,0,0,0,886,878,1,0,0,0,886,885,1,0,0,0,
		887,934,1,0,0,0,888,889,10,21,0,0,889,890,7,4,0,0,890,933,3,118,59,22,
		891,892,10,20,0,0,892,893,7,5,0,0,893,933,3,118,59,21,894,895,10,19,0,
		0,895,896,7,6,0,0,896,933,3,118,59,20,897,898,10,18,0,0,898,899,7,7,0,
		0,899,933,3,118,59,19,900,901,10,17,0,0,901,902,5,34,0,0,902,933,3,118,
		59,18,903,904,10,16,0,0,904,905,5,35,0,0,905,933,3,118,59,17,906,907,10,
		15,0,0,907,908,5,36,0,0,908,909,3,118,59,0,909,910,5,3,0,0,910,911,3,118,
		59,16,911,933,1,0,0,0,912,913,10,23,0,0,913,933,5,18,0,0,914,915,10,22,
		0,0,915,933,5,19,0,0,916,917,10,12,0,0,917,921,3,132,66,0,918,920,3,128,
		64,0,919,918,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,
		933,1,0,0,0,923,921,1,0,0,0,924,925,10,10,0,0,925,929,3,130,65,0,926,928,
		3,128,64,0,927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,
		0,0,930,933,1,0,0,0,931,929,1,0,0,0,932,888,1,0,0,0,932,891,1,0,0,0,932,
		894,1,0,0,0,932,897,1,0,0,0,932,900,1,0,0,0,932,903,1,0,0,0,932,906,1,
		0,0,0,932,912,1,0,0,0,932,914,1,0,0,0,932,916,1,0,0,0,932,924,1,0,0,0,
		933,936,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,119,1,0,0,0,936,934,
		1,0,0,0,937,951,5,95,0,0,938,940,5,93,0,0,939,941,7,8,0,0,940,939,1,0,
		0,0,940,941,1,0,0,0,941,951,1,0,0,0,942,944,5,94,0,0,943,945,7,9,0,0,944,
		943,1,0,0,0,944,945,1,0,0,0,945,951,1,0,0,0,946,951,5,96,0,0,947,951,5,
		58,0,0,948,951,5,59,0,0,949,951,5,91,0,0,950,937,1,0,0,0,950,938,1,0,0,
		0,950,942,1,0,0,0,950,946,1,0,0,0,950,947,1,0,0,0,950,948,1,0,0,0,950,
		949,1,0,0,0,951,121,1,0,0,0,952,953,5,44,0,0,953,954,5,8,0,0,954,955,3,
		66,33,0,955,956,5,9,0,0,956,123,1,0,0,0,957,958,5,70,0,0,958,959,5,8,0,
		0,959,960,3,66,33,0,960,961,5,9,0,0,961,125,1,0,0,0,962,963,7,10,0,0,963,
		964,3,136,68,0,964,127,1,0,0,0,965,966,5,15,0,0,966,971,3,118,59,0,967,
		968,5,5,0,0,968,970,3,118,59,0,969,967,1,0,0,0,970,973,1,0,0,0,971,969,
		1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,971,1,0,0,0,974,975,5,16,0,
		0,975,129,1,0,0,0,976,977,5,2,0,0,977,978,5,92,0,0,978,131,1,0,0,0,979,
		981,5,2,0,0,980,979,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,984,5,
		92,0,0,983,985,3,60,30,0,984,983,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,
		0,986,988,5,8,0,0,987,989,3,134,67,0,988,987,1,0,0,0,988,989,1,0,0,0,989,
		994,1,0,0,0,990,991,5,5,0,0,991,993,3,134,67,0,992,990,1,0,0,0,993,996,
		1,0,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,997,1,0,0,0,996,994,1,0,0,
		0,997,998,5,9,0,0,998,133,1,0,0,0,999,1001,5,17,0,0,1000,999,1,0,0,0,1000,
		1001,1,0,0,0,1001,1002,1,0,0,0,1002,1003,3,118,59,0,1003,135,1,0,0,0,1004,
		1005,3,66,33,0,1005,1014,5,8,0,0,1006,1011,3,118,59,0,1007,1008,5,5,0,
		0,1008,1010,3,118,59,0,1009,1007,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,
		0,0,0,1011,1012,1,0,0,0,1012,1015,1,0,0,0,1013,1011,1,0,0,0,1014,1006,
		1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,1017,5,9,0,0,1017,137,
		1,0,0,0,128,141,147,152,156,179,185,191,197,200,207,213,219,222,229,235,
		242,252,255,262,267,272,278,287,298,308,311,314,319,325,331,341,347,360,
		364,366,373,380,385,391,397,404,410,416,420,425,432,438,448,460,463,471,
		478,481,491,499,503,507,509,512,515,519,522,529,538,559,563,568,583,587,
		599,604,618,623,627,636,642,652,656,661,665,673,676,680,684,692,696,710,
		714,723,725,738,742,753,757,765,769,772,775,782,789,793,801,805,820,827,
		835,843,852,861,868,875,882,886,921,929,932,934,940,944,950,971,980,984,
		988,994,1000,1011,1014
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
